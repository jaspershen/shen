<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chinese | Xiaotao Shen</title>
    <link>/tags/chinese/</link>
      <atom:link href="/tags/chinese/index.xml" rel="self" type="application/rss+xml" />
    <description>Chinese</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©Xiaotao Shen2019</copyright><lastBuildDate>Sun, 01 Dec 2019 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Python数据的导入和输出总结</title>
      <link>/post/2019-12-01-python-data-import-output/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-12-01-python-data-import-output/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#csv文件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; CSV文件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#使用python基础语法&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 使用python基础语法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;对python的数据导入和输出进行总结.&lt;/p&gt;
&lt;div id=&#34;csv文件&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; CSV文件&lt;/h1&gt;
&lt;div id=&#34;使用python基础语法&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 使用python基础语法&lt;/h2&gt;
&lt;p&gt;python内置函数&lt;code&gt;open()&lt;/code&gt;可以用来打开csv文件并进行处理.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import os as os
os.getcwd()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;D:\\my github\\shen\\content\\en\\post\\2019-12-01-python-data-import-output&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python中与dplyr类似的数据处理包</title>
      <link>/post/2019-11-29-python-dplyphon/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-29-python-dplyphon/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#dplython&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; dplython&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#简单介绍&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; 简单介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dfply&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; dfply&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装-1&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#函数概览&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; 函数概览&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#和管道操作符&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.1&lt;/span&gt; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;管道操作符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#数据框标志x&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.2&lt;/span&gt; 数据框标志&lt;code&gt;X&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#选择某列或者删除某列selecting-and-dropping&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.3&lt;/span&gt; 选择某列或者删除某列(selecting and dropping)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#对列进行筛选&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.4&lt;/span&gt; 对列进行筛选&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#数据框转变&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.5&lt;/span&gt; 数据框转变&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#分组grouping&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.6&lt;/span&gt; 分组(grouping)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#重塑数据框reshaping&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.7&lt;/span&gt; 重塑数据框(reshaping)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#合并joining&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.8&lt;/span&gt; 合并(joining)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;dplython&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; dplython&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;dplython&lt;/code&gt;是python借鉴R中&lt;code&gt;dplyr&lt;/code&gt;包开发的,用于数据tidy的包.基本语法跟R非常像,而且还支持管道函数(操作符&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;).对于我这种从R转python的人来说,用起来会更加熟悉和方便.&lt;/p&gt;
&lt;p&gt;官网在这.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pythonhosted.org/dplython/&#34; class=&#34;uri&#34;&gt;https://pythonhosted.org/dplython/&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;安装&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;pip install dplython&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以从github上安装最新开发版本.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/dodger487/dplython.git&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;简单介绍&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; 简单介绍&lt;/h2&gt;
&lt;p&gt;加载所需要的包.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pandas as pd
import numpy as np
import dplython as dply
from dplython import (DplyFrame, X, diamonds, select, sift,
  sample_n, sample_frac, head, arrange, mutate, group_by,
  summarize, DelayFunction)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;支持管道符操作,但是如果要将每一个操作写作一行,需要使用小括号将其括起来.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Unnamed: 0  carat      cut color clarity  ...  table  price     x     y     z
## 0           1   0.23    Ideal     E     SI2  ...   55.0    326  3.95  3.98  2.43
## 1           2   0.21  Premium     E     SI1  ...   61.0    326  3.89  3.84  2.31
## 2           3   0.23     Good     E     VS1  ...   65.0    327  4.05  4.07  2.31
## 3           4   0.29  Premium     I     VS2  ...   58.0    334  4.20  4.23  2.63
## 4           5   0.31     Good     J     SI2  ...   58.0    335  4.34  4.35  2.75
## 
## [5 rows x 11 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(
diamonds &amp;gt;&amp;gt;
head(5)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Unnamed: 0  carat      cut color clarity  ...  table  price     x     y     z
## 0           1   0.23    Ideal     E     SI2  ...   55.0    326  3.95  3.98  2.43
## 1           2   0.21  Premium     E     SI1  ...   61.0    326  3.89  3.84  2.31
## 2           3   0.23     Good     E     VS1  ...   65.0    327  4.05  4.07  2.31
## 3           4   0.29  Premium     I     VS2  ...   58.0    334  4.20  4.23  2.63
## 4           5   0.31     Good     J     SI2  ...   58.0    335  4.34  4.35  2.75
## 
## [5 rows x 11 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再&lt;code&gt;dplyr&lt;/code&gt;中,进行行筛选的函数为&lt;code&gt;filter()&lt;/code&gt;,但是在&lt;code&gt;dplython&lt;/code&gt;中,函数名为&lt;code&gt;sift()&lt;/code&gt;,暂时不知道为什么要改名,猜想可能是由于和python自带函数冲突.&lt;/p&gt;
&lt;p&gt;列名不能直接引用,需要使用dplython中的&lt;code&gt;X&lt;/code&gt;来引用.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;X.foo will refer to the “foo” column of the DataFrame in which it is later applied.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(
diamonds &amp;gt;&amp;gt; 
sift(X.carat &amp;gt; 4) &amp;gt;&amp;gt; 
select(X.carat, X.cut, X.depth, X.price)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        carat      cut  depth  price
## 25998   4.01  Premium   61.0  15223
## 25999   4.01  Premium   62.5  15223
## 27130   4.13     Fair   64.8  17329
## 27415   5.01     Fair   65.5  18018
## 27630   4.50     Fair   65.8  18531&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(diamonds &amp;gt;&amp;gt;
  sample_n(10) &amp;gt;&amp;gt;
  arrange(X.carat) &amp;gt;&amp;gt;
  select(X.carat, X.cut, X.depth, X.price))
  &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        carat        cut  depth  price
## 34904   0.34    Premium   59.2    880
## 41186   0.39      Ideal   61.6   1201
## 40502   0.43  Very Good   60.7   1143
## 52362   0.54      Ideal   61.1   2502
## 53392   0.77       Good   63.8   2665
## 6651    0.90    Premium   62.7   4092
## 6643    0.90      Ideal   62.7   4091
## 5532    0.92  Very Good   62.1   3854
## 9229    1.02    Premium   61.9   4558
## 27546   2.05    Premium   61.8  18318&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(diamonds &amp;gt;&amp;gt;
  mutate(carat_bin=X.carat.round()) &amp;gt;&amp;gt;
  group_by(X.cut, X.carat_bin) &amp;gt;&amp;gt;
  summarize(avg_price=X.price.mean()))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           cut  carat_bin     avg_price
## 0        Fair        0.0   1027.979275
## 1        Fair        1.0   3305.754579
## 2        Fair        2.0   9588.269737
## 3        Fair        3.0  13466.823529
## 4        Fair        4.0  15842.666667
## 5        Fair        5.0  18018.000000
## 6        Good        0.0    786.054191
## 7        Good        1.0   3815.307879
## 8        Good        2.0  11096.950321
## 9        Good        3.0  15924.176471
## 10      Ideal        0.0    863.908535
## 11      Ideal        1.0   4213.864948
## 12      Ideal        2.0  12838.984078
## 13      Ideal        3.0  16156.681818
## 14      Ideal        4.0  12587.000000
## 15    Premium        0.0    863.329085
## 16    Premium        1.0   4382.906453
## 17    Premium        2.0  12337.020064
## 18    Premium        3.0  15636.047619
## 19    Premium        4.0  16335.000000
## 20  Very Good        0.0    766.354590
## 21  Very Good        1.0   4135.271007
## 22  Very Good        2.0  12281.851661
## 23  Very Good        3.0  15053.555556
## 24  Very Good        4.0  15984.000000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是,使用管道函数,第一行为要处理的数据,第二行开始,都要缩进.&lt;/p&gt;
&lt;p&gt;但是作者已经3年没有维护这个包了,所以感觉有点悬,有可能废掉了,所以还是别用了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;dfply&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; dfply&lt;/h1&gt;
&lt;p&gt;另外一个将&lt;code&gt;dplyr&lt;/code&gt;移植到python的包是&lt;code&gt;dfply&lt;/code&gt;,可能更加可靠一些.&lt;/p&gt;
&lt;p&gt;官网如下:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kieferk/dfply#the--and--pipe-operators&#34; class=&#34;uri&#34;&gt;https://github.com/kieferk/dfply#the--and--pipe-operators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kieferk/dfply&#34; class=&#34;uri&#34;&gt;https://github.com/kieferk/dfply&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;安装-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; 安装&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;pip install dfply&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;函数概览&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; 函数概览&lt;/h2&gt;
&lt;div id=&#34;和管道操作符&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.1&lt;/span&gt; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;管道操作符&lt;/h3&gt;
&lt;p&gt;在R中,管道操作符为&lt;code&gt;%&amp;gt;%&lt;/code&gt;,在python中,改为&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from dfply import *
diamonds &amp;gt;&amp;gt; head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat      cut color clarity  depth  table  price     x     y     z
## 0   0.23    Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43
## 1   0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31
## 2   0.23     Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31
## 3   0.29  Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63
## 4   0.31     Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(
diamonds &amp;gt;&amp;gt;
  head(5)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat      cut color clarity  depth  table  price     x     y     z
## 0   0.23    Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43
## 1   0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31
## 2   0.23     Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31
## 3   0.29  Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63
## 4   0.31     Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同样的,如果每一个操作都开始新的一行的话,需要使用小括号将他们括起来.&lt;/p&gt;
&lt;p&gt;将处理之后的数据框赋予一个新的变量名的时候,需要注意变量名等号和小括号的左半部分需要在同一行.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;new = (
diamonds &amp;gt;&amp;gt;
  tail(5)
)
new&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        carat        cut color clarity  depth  table  price     x     y     z
## 53935   0.72      Ideal     D     SI1   60.8   57.0   2757  5.75  5.76  3.50
## 53936   0.72       Good     D     SI1   63.1   55.0   2757  5.69  5.75  3.61
## 53937   0.70  Very Good     D     SI1   62.8   60.0   2757  5.66  5.68  3.56
## 53938   0.86    Premium     H     SI2   61.0   58.0   2757  6.15  6.12  3.74
## 53939   0.75      Ideal     D     SI2   62.2   55.0   2757  5.83  5.87  3.64&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外一个管道操作符&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;意味着对原始数据直接进行修改后付给这个变量.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds2 = diamonds.copy()
diamonds2 &amp;gt;&amp;gt; head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat      cut color clarity  depth  table  price     x     y     z
## 0   0.23    Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43
## 1   0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31
## 2   0.23     Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31
## 3   0.29  Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63
## 4   0.31     Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds2 &amp;gt;&amp;gt;= head(5)
diamonds2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat      cut color clarity  depth  table  price     x     y     z
## 0   0.23    Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43
## 1   0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31
## 2   0.23     Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31
## 3   0.29  Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63
## 4   0.31     Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; head(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat        cut color clarity  depth  table  price     x     y     z
## 0   0.23      Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43
## 1   0.21    Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31
## 2   0.23       Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31
## 3   0.29    Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63
## 4   0.31       Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75
## 5   0.24  Very Good     J    VVS2   62.8   57.0    336  3.94  3.96  2.48
## 6   0.24  Very Good     I    VVS1   62.3   57.0    336  3.95  3.98  2.47
## 7   0.26  Very Good     H     SI1   61.9   55.0    337  4.07  4.11  2.53
## 8   0.22       Fair     E     VS2   65.1   61.0    337  3.87  3.78  2.49
## 9   0.23  Very Good     H     VS1   59.4   61.0    338  4.00  4.05  2.39&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;数据框标志x&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.2&lt;/span&gt; 数据框标志&lt;code&gt;X&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;在管道操作符中,将数据框传到后面的函数中,需要使用&lt;code&gt;X&lt;/code&gt;标志来代表.在R中,我们可以直接使用数据框的列名来引用每一列,在python中,需要使用&lt;code&gt;X&lt;/code&gt;来表示.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; select(X.carat, X.cut) &amp;gt;&amp;gt; head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat      cut
## 0   0.23    Ideal
## 1   0.21  Premium
## 2   0.23     Good
## 3   0.29  Premium
## 4   0.31     Good&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;选择某列或者删除某列selecting-and-dropping&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.3&lt;/span&gt; 选择某列或者删除某列(selecting and dropping)&lt;/h3&gt;
&lt;p&gt;在R中,使用&lt;code&gt;select&lt;/code&gt;函数可以完成选择和删除,在删除某列时,直接在前面加上减号就可以了.但是在python中,&lt;code&gt;select&lt;/code&gt;也可以完成删除列,只是减号改为&lt;code&gt;~&lt;/code&gt;.但是对于删除列,还有一个专门的函数,&lt;code&gt;drop()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;选择列的时候,既可以使用列的index,也可以使用&lt;code&gt;X&lt;/code&gt;符合以及引号括起来的列名进行选择.可惜的是,暂时看到是不支持切片的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(
diamonds &amp;gt;&amp;gt; 
  select(0, X.price, &amp;quot;x&amp;quot;, [&amp;#39;y&amp;#39;, &amp;#39;z&amp;#39;]) &amp;gt;&amp;gt;
  head(5)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat  price     x     y     z
## 0   0.23    326  3.95  3.98  2.43
## 1   0.21    326  3.89  3.84  2.31
## 2   0.23    327  4.05  4.07  2.31
## 3   0.29    334  4.20  4.23  2.63
## 4   0.31    335  4.34  4.35  2.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(
diamonds &amp;gt;&amp;gt;
  select([&amp;#39;carat&amp;#39;,&amp;#39;price&amp;#39;]) &amp;gt;&amp;gt;
  head(5)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat  price
## 0   0.23    326
## 1   0.21    326
## 2   0.23    327
## 3   0.29    334
## 4   0.31    335&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(
diamonds &amp;gt;&amp;gt;
  drop(1, X.price, [&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;]) &amp;gt;&amp;gt;
  head()
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat color clarity  depth  table     z
## 0   0.23     E     SI2   61.5   55.0  2.43
## 1   0.21     E     SI1   59.8   61.0  2.31
## 2   0.23     E     VS1   56.9   65.0  2.31
## 3   0.29     I     VS2   62.4   58.0  2.63
## 4   0.31     J     SI2   63.3   58.0  2.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(
diamonds &amp;gt;&amp;gt;
  select(~0, ~X.price) &amp;gt;&amp;gt;
  head(5)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       z
## 0  2.43
## 1  2.31
## 2  2.31
## 3  2.63
## 4  2.75&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;selection-filter函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.3.1&lt;/span&gt; Selection filter函数&lt;/h4&gt;
&lt;p&gt;和&lt;code&gt;dplyr&lt;/code&gt;类似,也有很多配合使用的函数.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;52%&#34; /&gt;
&lt;col width=&#34;47%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;starts_with(prefix)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;find columns that start with a string prefix.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;ends_with(suffix)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;find columns that end with a string suffix.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;contains(substr)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;find columns that contain a substring in their name.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;everything()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;all columns.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;columns_between(start_col, end_col, inclusive=True)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;find columns between a specified start and end column. The inclusive boolean keyword argument indicates whether the end column should be included or not.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;columns_to(end_col, inclusive=True)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;get columns up to a specified end column. The inclusive argument indicates whether the ending column should be included or not.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;columns_from(start_col)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;get the columns starting at a specified column.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;因为&lt;code&gt;dfply&lt;/code&gt;并不支持切片,所以可以看到,分别提供了三个函数用来代替切片的功能.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(
diamonds &amp;gt;&amp;gt;
  select(columns_between(&amp;quot;carat&amp;quot;, &amp;quot;color&amp;quot;)) &amp;gt;&amp;gt;
  head(5)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat      cut color
## 0   0.23    Ideal     E
## 1   0.21  Premium     E
## 2   0.23     Good     E
## 3   0.29  Premium     I
## 4   0.31     Good     J&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(
diamonds &amp;gt;&amp;gt;
  select(columns_to(&amp;quot;color&amp;quot;)) &amp;gt;&amp;gt;
  head(5)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat      cut
## 0   0.23    Ideal
## 1   0.21  Premium
## 2   0.23     Good
## 3   0.29  Premium
## 4   0.31     Good&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(
diamonds &amp;gt;&amp;gt;
  select(columns_from(&amp;quot;color&amp;quot;)) &amp;gt;&amp;gt;
  head(5)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   color clarity  depth  table  price     x     y     z
## 0     E     SI2   61.5   55.0    326  3.95  3.98  2.43
## 1     E     SI1   59.8   61.0    326  3.89  3.84  2.31
## 2     E     VS1   56.9   65.0    327  4.05  4.07  2.31
## 3     I     VS2   62.4   58.0    334  4.20  4.23  2.63
## 4     J     SI2   63.3   58.0    335  4.34  4.35  2.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; select(columns_to(1, inclusive=True), &amp;#39;depth&amp;#39;, columns_from(-2)) &amp;gt;&amp;gt; head(2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat      cut  depth     y     z
## 0   0.23    Ideal   61.5  3.98  2.43
## 1   0.21  Premium   59.8  3.84  2.31&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;对列进行筛选&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.4&lt;/span&gt; 对列进行筛选&lt;/h3&gt;
&lt;div id=&#34;row_slice&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.4.1&lt;/span&gt; &lt;code&gt;row_slice()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;与&lt;code&gt;pandas&lt;/code&gt;的&lt;code&gt;iloc&lt;/code&gt;方法类似,使用index对列筛选.&lt;/p&gt;
&lt;p&gt;问题是,仍然不支持切片.但是可以和&lt;code&gt;group_by&lt;/code&gt;联合使用,从而选出每一组的固定行.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; row_slice([10,15])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     carat      cut color clarity  depth  table  price     x     y     z
## 10   0.30     Good     J     SI1   64.0   55.0    339  4.25  4.28  2.73
## 15   0.32  Premium     E      I1   60.9   58.0    345  4.38  4.42  2.68&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; group_by(&amp;#39;cut&amp;#39;) &amp;gt;&amp;gt; row_slice(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      carat        cut color clarity  depth  table  price     x     y     z
## 128   0.91       Fair     H     SI2   64.4   57.0   2763  6.11  6.09  3.93
## 20    0.30       Good     I     SI2   63.3   56.0    351  4.26  4.30  2.71
## 40    0.33      Ideal     I     SI2   61.2   56.0    403  4.49  4.50  2.75
## 26    0.24    Premium     I     VS1   62.5   57.0    355  3.97  3.94  2.47
## 21    0.23  Very Good     E     VS2   63.8   55.0    352  3.85  3.92  2.48&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sample函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.4.2&lt;/span&gt; &lt;code&gt;sample()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;和&lt;code&gt;pandas&lt;/code&gt;的&lt;code&gt;.sample()&lt;/code&gt;方法类似,可以用于随机抽取列.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; sample(frac=0.0001, replace=False)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        carat        cut color clarity  depth  table  price     x     y     z
## 35971   0.40    Premium     F     SI1   61.7   62.0    920  4.76  4.71  2.92
## 12741   1.01      Ideal     H     VS2   60.6   57.0   5317  6.54  6.49  3.95
## 23321   1.03      Ideal     F      IF   61.3   56.0  11365  6.53  6.55  4.01
## 37784   0.53  Very Good     G     SI2   62.5   55.0   1000  5.14  5.19  3.23
## 8715    0.37      Ideal     G     SI1   62.0   55.0    586  4.62  4.64  2.87&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; sample(n=3, replace=True)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        carat        cut color clarity  depth  table  price     x     y     z
## 4188    0.83      Ideal     F     SI1   62.2   55.0   3560  6.01  6.03  3.74
## 19620   1.26      Ideal     H     VS1   60.9   57.0   8238  6.97  6.99  4.25
## 43303   0.61  Very Good     I     VS2   63.4   55.0   1401  5.46  5.42  3.45&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;distinct函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.4.3&lt;/span&gt; &lt;code&gt;distinct()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;只保留唯一不重复的行.传入的参数为列名,可以是多个列.与&lt;code&gt;pandas&lt;/code&gt;的&lt;code&gt;.drop_duolicates()&lt;/code&gt;方法类似.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; distinct(X.color, X.price) &amp;gt;&amp;gt; head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat        cut color clarity  depth  table  price     x     y     z
## 0   0.23      Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43
## 2   0.23       Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31
## 3   0.29    Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63
## 4   0.31       Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75
## 5   0.24  Very Good     J    VVS2   62.8   57.0    336  3.94  3.96  2.48&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;mask和filter_by函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.4.4&lt;/span&gt; &lt;code&gt;mask()&lt;/code&gt;和&lt;code&gt;filter_by()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;类似于&lt;code&gt;dplyr&lt;/code&gt;中的&lt;code&gt;filter()&lt;/code&gt;函数.这两个函数是等价的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; mask(X.cut == &amp;#39;Ideal&amp;#39;) &amp;gt;&amp;gt; head(4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     carat    cut color clarity  depth  table  price     x     y     z
## 0    0.23  Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43
## 11   0.23  Ideal     J     VS1   62.8   56.0    340  3.93  3.90  2.46
## 13   0.31  Ideal     J     SI2   62.2   54.0    344  4.35  4.37  2.71
## 16   0.30  Ideal     I     SI2   62.0   54.0    348  4.31  4.34  2.68&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; mask(X.cut == &amp;#39;Ideal&amp;#39;, X.color == &amp;#39;E&amp;#39;, X.table &amp;lt; 55, X.price &amp;lt; 500)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        carat    cut color clarity  depth  table  price     x     y     z
## 26683   0.33  Ideal     E     SI2   62.2   54.0    427  4.44  4.46  2.77
## 32297   0.34  Ideal     E     SI2   62.4   54.0    454  4.49  4.52  2.81
## 40928   0.30  Ideal     E     SI1   61.6   54.0    499  4.32  4.35  2.67
## 50623   0.30  Ideal     E     SI2   62.1   54.0    401  4.32  4.35  2.69
## 50625   0.30  Ideal     E     SI2   62.0   54.0    401  4.33  4.35  2.69&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; filter_by(X.cut == &amp;#39;Ideal&amp;#39;, X.color == &amp;#39;E&amp;#39;, X.table &amp;lt; 55, X.price &amp;lt; 500)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        carat    cut color clarity  depth  table  price     x     y     z
## 26683   0.33  Ideal     E     SI2   62.2   54.0    427  4.44  4.46  2.77
## 32297   0.34  Ideal     E     SI2   62.4   54.0    454  4.49  4.52  2.81
## 40928   0.30  Ideal     E     SI1   61.6   54.0    499  4.32  4.35  2.67
## 50623   0.30  Ideal     E     SI2   62.1   54.0    401  4.32  4.35  2.69
## 50625   0.30  Ideal     E     SI2   62.0   54.0    401  4.33  4.35  2.69&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pull函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.4.5&lt;/span&gt; &lt;code&gt;pull()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;与&lt;code&gt;dplyr&lt;/code&gt;中函数同名且功能相同.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(diamonds
 &amp;gt;&amp;gt; filter_by(X.cut == &amp;#39;Ideal&amp;#39;, X.color == &amp;#39;E&amp;#39;, X.table &amp;lt; 55, X.price &amp;lt; 500)
 &amp;gt;&amp;gt; pull(&amp;#39;carat&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 26683    0.33
## 32297    0.34
## 40928    0.30
## 50623    0.30
## 50625    0.30
## Name: carat, dtype: float64
## 
## D:\software\python\lib\site-packages\dfply\subset.py:87: DeprecationWarning: 
## .ix is deprecated. Please use
## .loc for label based indexing or
## .iloc for positional indexing
## 
## See the documentation here:
## http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated
##   return df.ix[:, column]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;数据框转变&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.5&lt;/span&gt; 数据框转变&lt;/h3&gt;
&lt;div id=&#34;mutate函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.5.1&lt;/span&gt; &lt;code&gt;mutate()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;添加新的变量(列)&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; mutate(x_plus_y=X.x + X.y) &amp;gt;&amp;gt; select(columns_from(&amp;#39;x&amp;#39;)) &amp;gt;&amp;gt; head(3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       x     y     z  x_plus_y
## 0  3.95  3.98  2.43      7.93
## 1  3.89  3.84  2.31      7.73
## 2  4.05  4.07  2.31      8.12&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; mutate(x_plus_y=X.x + X.y, y_div_z=(X.y / X.z)) &amp;gt;&amp;gt; select(columns_from(&amp;#39;x&amp;#39;)) &amp;gt;&amp;gt; head(3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       x     y     z  x_plus_y   y_div_z
## 0  3.95  3.98  2.43      7.93  1.637860
## 1  3.89  3.84  2.31      7.73  1.662338
## 2  4.05  4.07  2.31      8.12  1.761905&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;transmutate函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.5.2&lt;/span&gt; &lt;code&gt;transmutate()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;只保留下新创建的列(变量).&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; transmute(x_plus_y=X.x + X.y, y_div_z=(X.y / X.z)) &amp;gt;&amp;gt; head(3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    x_plus_y   y_div_z
## 0      7.93  1.637860
## 1      7.73  1.662338
## 2      8.12  1.761905&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;分组grouping&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.6&lt;/span&gt; 分组(grouping)&lt;/h3&gt;
&lt;div id=&#34;group_by和ungroup函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.6.1&lt;/span&gt; &lt;code&gt;group_by()&lt;/code&gt;和&lt;code&gt;ungroup()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;分组非常有用.利用某个或某几个变量将数据框分成不同的部分,然后对每一组分别进行处理.结束之后,需要使用&lt;code&gt;ungroup()&lt;/code&gt;函数结束分组状态.&lt;/p&gt;
&lt;p&gt;比如,如果想知道对于不同的&lt;code&gt;cut&lt;/code&gt;的钻石的最高价和最低价,可以使用下面的代码.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(diamonds &amp;gt;&amp;gt; group_by(X.cut) &amp;gt;&amp;gt;
 mutate(price_lead=lead(X.price), price_lag=lag(X.price)) &amp;gt;&amp;gt;
 head(2) &amp;gt;&amp;gt; select(X.cut, X.price, X.price_lead, X.price_lag))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##           cut  price  price_lead  price_lag
## 8        Fair    337      2757.0        NaN
## 91       Fair   2757      2759.0      337.0
## 2        Good    327       335.0        NaN
## 4        Good    335       339.0      327.0
## 0       Ideal    326       340.0        NaN
## 11      Ideal    340       344.0      326.0
## 1     Premium    326       334.0        NaN
## 3     Premium    334       342.0      326.0
## 5   Very Good    336       336.0        NaN
## 6   Very Good    336       337.0      336.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;重塑数据框reshaping&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.7&lt;/span&gt; 重塑数据框(reshaping)&lt;/h3&gt;
&lt;div id=&#34;arrange函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.7.1&lt;/span&gt; &lt;code&gt;arrange()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;这个函数是用来sort的.跟&lt;code&gt;pandas&lt;/code&gt;的&lt;code&gt;.sort_valiues()&lt;/code&gt;方法是一样的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; arrange(X.table, ascending=False) &amp;gt;&amp;gt; head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        carat   cut color clarity  depth  table  price     x     y     z
## 24932   2.01  Fair     F     SI1   58.6   95.0  13387  8.32  8.31  4.87
## 50773   0.81  Fair     F     SI2   68.8   79.0   2301  5.26  5.20  3.58
## 51342   0.79  Fair     G     SI1   65.3   76.0   2362  5.52  5.13  3.35
## 52860   0.50  Fair     E     VS2   79.0   73.0   2579  5.21  5.18  4.09
## 49375   0.70  Fair     H     VS1   62.0   73.0   2100  5.65  5.54  3.47&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(diamonds &amp;gt;&amp;gt; group_by(X.cut) &amp;gt;&amp;gt; arrange(X.price) &amp;gt;&amp;gt;
 head(3) &amp;gt;&amp;gt; ungroup() &amp;gt;&amp;gt; mask(X.carat &amp;lt; 0.23))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     carat      cut color clarity  depth  table  price     x     y     z
## 8    0.22     Fair     E     VS2   65.1   61.0    337  3.87  3.78  2.49
## 1    0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31
## 12   0.22  Premium     F     SI1   60.4   61.0    342  3.88  3.84  2.33&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rename函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.7.2&lt;/span&gt; &lt;code&gt;rename()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;对列进行重新命名.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; rename(CUT=X.cut, COLOR=&amp;#39;color&amp;#39;) &amp;gt;&amp;gt; head(2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat      CUT COLOR clarity  depth  table  price     x     y     z
## 0   0.23    Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43
## 1   0.21  Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;gather函数和spread函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.7.3&lt;/span&gt; &lt;code&gt;gather()&lt;/code&gt;函数和&lt;code&gt;spread()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;对长宽数据进行转换的函数.&lt;code&gt;gather()&lt;/code&gt;将宽数据转边为长数据,&lt;code&gt;spread()&lt;/code&gt;将长数据转换为宽数据.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;diamonds &amp;gt;&amp;gt; gather(&amp;#39;variable&amp;#39;, &amp;#39;value&amp;#39;, [&amp;#39;price&amp;#39;, &amp;#39;depth&amp;#39;,&amp;#39;x&amp;#39;,&amp;#39;y&amp;#39;,&amp;#39;z&amp;#39;]) &amp;gt;&amp;gt; head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    carat      cut color clarity  table variable  value
## 0   0.23    Ideal     E     SI2   55.0    price  326.0
## 1   0.21  Premium     E     SI1   61.0    price  326.0
## 2   0.23     Good     E     VS1   65.0    price  327.0
## 3   0.29  Premium     I     VS2   58.0    price  334.0
## 4   0.31     Good     J     SI2   58.0    price  335.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;elongated = diamonds &amp;gt;&amp;gt; gather(&amp;#39;variable&amp;#39;, &amp;#39;value&amp;#39;, add_id=True)
elongated &amp;gt;&amp;gt; head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    _ID variable value
## 0    0    carat  0.23
## 1    1    carat  0.21
## 2    2    carat  0.23
## 3    3    carat  0.29
## 4    4    carat  0.31&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;widened = elongated &amp;gt;&amp;gt; spread(X.variable, X.value)
widened &amp;gt;&amp;gt; head(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    _ID carat clarity color      cut depth price table     x     y     z
## 0    0  0.23     SI2     E    Ideal  61.5   326    55  3.95  3.98  2.43
## 1    1  0.21     SI1     E  Premium  59.8   326    61  3.89  3.84  2.31
## 2    2  0.23     VS1     E     Good  56.9   327    65  4.05  4.07  2.31
## 3    3  0.29     VS2     I  Premium  62.4   334    58   4.2  4.23  2.63
## 4    4  0.31     SI2     J     Good  63.3   335    58  4.34  4.35  2.75&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;合并joining&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.8&lt;/span&gt; 合并(joining)&lt;/h3&gt;
&lt;p&gt;这个用处非常多.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Funcation&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;inner_join(other, by=‘column’)&lt;/td&gt;
&lt;td&gt;合并两个数据框共有的部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;outer_join(other, by=‘column’)&lt;/td&gt;
&lt;td&gt;合并两个数据框并集部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;full_join(other, by=‘column’)&lt;/td&gt;
&lt;td&gt;合并两个数据框并集部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;right_join(other, by=‘column’)&lt;/td&gt;
&lt;td&gt;以右边数据框为准进行合并&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;left_join(other, by=‘column’)&lt;/td&gt;
&lt;td&gt;以左边数据框为准进行合并&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;semi_join(other, by=‘column’)&lt;/td&gt;
&lt;td&gt;只保留左边数据框能够匹配上右边数据框的行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;anti_join(other, by=‘column’)&lt;/td&gt;
&lt;td&gt;只保留两个数据框都互不相同的行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = pd.DataFrame({
        &amp;#39;x1&amp;#39;:[&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;C&amp;#39;],
        &amp;#39;x2&amp;#39;:[1,2,3]
    })
b = pd.DataFrame({
    &amp;#39;x1&amp;#39;:[&amp;#39;A&amp;#39;,&amp;#39;B&amp;#39;,&amp;#39;D&amp;#39;],
    &amp;#39;x3&amp;#39;:[True,False,True]
})

a &amp;gt;&amp;gt; inner_join(b, by=&amp;#39;x1&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   x1  x2     x3
## 0  A   1   True
## 1  B   2  False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a &amp;gt;&amp;gt; outer_join(b, by=&amp;#39;x1&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   x1   x2     x3
## 0  A  1.0   True
## 1  B  2.0  False
## 2  C  3.0    NaN
## 3  D  NaN   True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a &amp;gt;&amp;gt; full_join(b, by=&amp;#39;x1&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   x1   x2     x3
## 0  A  1.0   True
## 1  B  2.0  False
## 2  C  3.0    NaN
## 3  D  NaN   True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a &amp;gt;&amp;gt; semi_join(b, by=&amp;#39;x1&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   x1  x2
## 0  A   1
## 1  B   2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a &amp;gt;&amp;gt; anti_join(b, by=&amp;#39;x1&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   x1  x2
## 2  C   3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;未完待续….&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python Numpy函数和方法完全总结</title>
      <link>/post/2019-11-28-numpy-function-method/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-28-numpy-function-method/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#基础&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 基础&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#函数functions方法method或者属性attribute&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 函数(functions),方法(method)或者属性(attribute)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#例子&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; 例子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建array&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 创建array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#基础运算符&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; 基础运算符&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;官网在这.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://numpy.org/doc/1.17/user/quickstart.html&#34; class=&#34;uri&#34;&gt;https://numpy.org/doc/1.17/user/quickstart.html&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;基础&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 基础&lt;/h1&gt;
&lt;div id=&#34;函数functions方法method或者属性attribute&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 函数(functions),方法(method)或者属性(attribute)&lt;/h2&gt;
&lt;p&gt;NumPy’s array class is called ndarray. It is also known by the alias array. Note that numpy.array is not the same as the Standard Python Library class array.array, which only handles one-dimensional arrays and offers less functionality. The more important attributes of an ndarray object are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ndarray.ndim&lt;/code&gt;属性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;array的维度数.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ndarray.shape&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;array的维度大小.类似于R中的&lt;code&gt;dim()&lt;/code&gt;函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ndarray.size&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;array的cell(数据点)数目.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ndarray.dtype&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;array中元素的数据类型.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ndarray.itemsize&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The size in bytes of each element of the array. For example, an array of elements of type float64 has itemsize 8 (=64/8), while one of type complex32 has itemsize 4 (=32/8). It is equivalent to &lt;code&gt;ndarray.dtype.itemsize&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;例子&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; 例子&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
a = np.arange(15).reshape(3, 5)
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 0,  1,  2,  3,  4],
##        [ 5,  6,  7,  8,  9],
##        [10, 11, 12, 13, 14]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.ndim&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.shape&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (3, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.size&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.dtype&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dtype(&amp;#39;int32&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.itemsize&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;创建array&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 创建array&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array()&lt;/code&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建array.可以将列表,元组等转变为array对象.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
np.array((1,2,3,4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1, 2, 3, 4])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.array([1,2,3,4,5])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1, 2, 3, 4, 5])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.array([(1,2,3), (4,5,6)])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3],
##        [4, 5, 6]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有时候我们需要提前创建一个array,然后再往里面填充内容.比如在一个循环中,每一个循环生成一些数,然后再填充到array中.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;np.zeros()&lt;/code&gt;,&lt;code&gt;np.ones()&lt;/code&gt;和&lt;code&gt;np.empty()&lt;/code&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成一个array,然后其中用0/1或者随机的非常小的数填充.参数&lt;code&gt;shape&lt;/code&gt;用来设定array的维度.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;##zero
np.zeros(shape = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([0., 0.])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.zeros(shape = (3,4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[0., 0., 0., 0.],
##        [0., 0., 0., 0.],
##        [0., 0., 0., 0.]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.zeros(shape = (3,4,5))
##one&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[[0., 0., 0., 0., 0.],
##         [0., 0., 0., 0., 0.],
##         [0., 0., 0., 0., 0.],
##         [0., 0., 0., 0., 0.]],
## 
##        [[0., 0., 0., 0., 0.],
##         [0., 0., 0., 0., 0.],
##         [0., 0., 0., 0., 0.],
##         [0., 0., 0., 0., 0.]],
## 
##        [[0., 0., 0., 0., 0.],
##         [0., 0., 0., 0., 0.],
##         [0., 0., 0., 0., 0.],
##         [0., 0., 0., 0., 0.]]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.ones(shape = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1., 1.])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.ones(shape = (3,4))
##empty&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1., 1., 1., 1.],
##        [1., 1., 1., 1.],
##        [1., 1., 1., 1.]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.empty(shape = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1., 1.])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.empty(shape = (3,4))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1., 1., 1., 1.],
##        [1., 1., 1., 1.],
##        [1., 1., 1., 1.]])&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;np.arange()&lt;/code&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;跟基础函数&lt;code&gt;arange&lt;/code&gt;类似,可以生成连续的array.所以同样三个参数,&lt;code&gt;start&lt;/code&gt;,&lt;code&gt;stop&lt;/code&gt;和&lt;code&gt;step&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.arange(1, 10, 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1, 3, 5, 7, 9])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种办法,end参数不一定包含在最后的sequence中.为了让最后的end一定包含再sequence中,然后中间的参数,是使用线性回归得到的,可以使用另外一个参数.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;np.linspace()&lt;/code&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三个参数,&lt;code&gt;start&lt;/code&gt;,&lt;code&gt;stop&lt;/code&gt;和&lt;code&gt;num&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.linspace(start=0, stop=10, num=8)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([ 0.        ,  1.42857143,  2.85714286,  4.28571429,  5.71428571,
##         7.14285714,  8.57142857, 10.        ])&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reshape()&lt;/code&gt;方法和&lt;code&gt;reshape()&lt;/code&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用来将array重新进行shape.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr = np.arange(1,10,1)
arr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.reshape(3,3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3],
##        [4, 5, 6],
##        [7, 8, 9]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.reshape(3,3,order=&amp;quot;C&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3],
##        [4, 5, 6],
##        [7, 8, 9]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.reshape(3,3,order=&amp;quot;F&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 4, 7],
##        [2, 5, 8],
##        [3, 6, 9]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.reshape(3,3,order=&amp;quot;A&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3],
##        [4, 5, 6],
##        [7, 8, 9]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.reshape(arr, newshape=(3,3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3],
##        [4, 5, 6],
##        [7, 8, 9]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;基础运算符&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; 基础运算符&lt;/h1&gt;
&lt;p&gt;array是支持向量化运算的,所以可以直接对array进行常见的数学运算.注意,如果两个array长度不一致,会报错.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = np.array( [20,30,40,50] )
b = np.arange(4)
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([20, 30, 40, 50])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([0, 1, 2, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a + b&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([20, 31, 42, 53])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a - b&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([20, 29, 38, 47])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a * b&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([  0,  30,  80, 150])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a * 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([ 40,  60,  80, 100])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a / 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([10., 15., 20., 25.])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a &amp;lt; 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([False, False, False, False])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggraph画网络图</title>
      <link>/post/2019-11-27-r-ggraph/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-27-r-ggraph/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#构建所需要的数据&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 构建所需要的数据&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#构建edges数据&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; 构建edges数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#然后构建node的数据&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; 然后构建node的数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#构建ggraph所需的数据&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; 构建&lt;code&gt;ggraph&lt;/code&gt;所需的数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#画图&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; 画图&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#基础绘图&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; 基础绘图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#添加文字&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2&lt;/span&gt; 添加文字&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用不同的layout&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3&lt;/span&gt; 使用不同的layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#不同的连接线&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.4&lt;/span&gt; 不同的连接线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用不同的主题&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.5&lt;/span&gt; 使用不同的主题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ggraph&lt;/code&gt;是Thomas Lin Pedersen开发的网络可视化的包.官方文档在这:&lt;a href=&#34;https://ggraph.data-imaginist.com/index.html&#34; class=&#34;uri&#34;&gt;https://ggraph.data-imaginist.com/index.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;它和&lt;code&gt;igraph&lt;/code&gt;不同,igraph虽然也有网络可视化,但是更多的还是用于网络分析,可视化并不是太友好.&lt;/p&gt;
&lt;p&gt;大致记录一下如何使用它来进行网络图的构建.&lt;/p&gt;
&lt;div id=&#34;安装&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;/h1&gt;
&lt;p&gt;需要安装两个包.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;install.packages(&amp;quot;ggraph&amp;quot;)
install.packages(&amp;quot;tidygraph&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tidyverse&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages ------------------------------------------------------------- tidyverse 1.2.1 --&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v ggplot2 3.2.1     v purrr   0.3.2
## v tibble  2.1.3     v dplyr   0.8.3
## v tidyr   1.0.0     v stringr 1.4.0
## v readr   1.3.1     v forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tibble&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tidyr&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;dplyr&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts ---------------------------------------------------------------- tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidygraph)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tidygraph&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;tidygraph&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggraph)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggraph&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;构建所需要的数据&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 构建所需要的数据&lt;/h1&gt;
&lt;p&gt;最为简单的办法是使用数据库格式的数据,而且前两行分别为&lt;code&gt;from&lt;/code&gt;和&lt;code&gt;to&lt;/code&gt;.我们构建一个示例数据:&lt;/p&gt;
&lt;div id=&#34;构建edges数据&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; 构建edges数据&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(0)
edges &amp;lt;- data.frame(from = sample(1:15, 80, replace = TRUE), 
                 to = sample(1:15, 80, replace = TRUE), 
                 stringsAsFactors = FALSE) %&amp;gt;% 
  distinct()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是最简单的一个edge信息,每一行就是一个edge信息,当然,我们也可以给每一条边都加上属性信息.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;edges &amp;lt;- data.frame(edges, 
                 edge.width = rnorm(n = nrow(edges), mean = 1, sd = 0.5), 
                 edge.colour = rnorm(n = nrow(edges), mean = 0, sd = 0.5),
                 stringsAsFactors = FALSE)
edges %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   from to edge.width  edge.colour
## 1   14  6  0.2382166  0.225093551
## 2    9  8  1.2969731 -0.009279916
## 3    4  7  1.1664752 -0.159034187
## 4    7 11  1.5315499 -0.464681074
## 5    1  1  0.8479080 -0.743730155
## 6    2  4  1.1850094 -0.537596148&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;然后构建node的数据&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; 然后构建node的数据&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;node &amp;lt;- unique(c(edges$from, edges$to)) %&amp;gt;% sort()
node&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nodes &amp;lt;- data.frame(node, node.size = rnorm(n = length(node), mean = 1, sd = 0.5),
                    node.colour = sample(c(&amp;quot;Class A&amp;quot;, &amp;quot;Class B&amp;quot;), length(node), replace = TRUE), 
                    stringsAsFactors = FALSE)
nodes %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   node node.size node.colour
## 1    1 0.3733551     Class A
## 2    2 1.3211207     Class B
## 3    3 0.9776454     Class A
## 4    4 0.1333908     Class B
## 5    5 1.0010659     Class B
## 6    6 0.6848498     Class A&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;构建ggraph所需的数据&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; 构建&lt;code&gt;ggraph&lt;/code&gt;所需的数据&lt;/h2&gt;
&lt;p&gt;得到edges和nodes之后,需要将其转为&lt;code&gt;ggraph&lt;/code&gt;所需要的格式.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;graph_data &amp;lt;- tidygraph::tbl_graph(nodes = nodes, edges = edges, 
                                   directed = FALSE)
graph_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tbl_graph: 15 nodes and 67 edges
## #
## # An undirected multigraph with 1 component
## #
## # Node Data: 15 x 3 (active)
##    node node.size node.colour
##   &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      
## 1     1     0.373 Class A    
## 2     2     1.32  Class B    
## 3     3     0.978 Class A    
## 4     4     0.133 Class B    
## 5     5     1.00  Class B    
## 6     6     0.685 Class A    
## # ... with 9 more rows
## #
## # Edge Data: 67 x 4
##    from    to edge.width edge.colour
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1     6    14      0.238     0.225  
## 2     8     9      1.30     -0.00928
## 3     4     7      1.17     -0.159  
## # ... with 64 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;画图&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; 画图&lt;/h1&gt;
&lt;div id=&#34;基础绘图&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; 基础绘图&lt;/h2&gt;
&lt;p&gt;拿到所需数据之后,可以开始画图了,跟&lt;code&gt;ggplot2&lt;/code&gt;一样,也是图层的画法,一层层进行叠加.我们先看一个简单的例子.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data) +
  geom_edge_fan() +
  geom_node_point()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;首先可以看到,需要使用&lt;code&gt;ggraph&lt;/code&gt;启动一个图像,然后必须的两个geom分别是&lt;code&gt;geom_edge_xx&lt;/code&gt;和&lt;code&gt;geom_node_xxx&lt;/code&gt;分别用来定义边和node.他们的使用办法跟&lt;code&gt;ggplot2&lt;/code&gt;非常类似,参数也都很类似,只是加上了&lt;code&gt;edge&lt;/code&gt;和&lt;code&gt;node&lt;/code&gt;标签.&lt;/p&gt;
&lt;p&gt;我们下面接着对图片进行美化.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot &amp;lt;- 
ggraph(graph = graph_data, layout = &amp;quot;linear&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_void()
plot&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从上面例子可以看到,对于edge的属性的设置,需要使用&lt;code&gt;scale_edge_xxx&lt;/code&gt;系列函数,而对于node,则直接使用原来的&lt;code&gt;ggplot2&lt;/code&gt;的&lt;code&gt;scale_xxx&lt;/code&gt;系列函数就可以了.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;添加文字&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; 添加文字&lt;/h2&gt;
&lt;p&gt;添加文字可以使用&lt;code&gt;geom_node_text()&lt;/code&gt;和&lt;code&gt;geom_node_label()&lt;/code&gt;函数.&lt;/p&gt;
&lt;p&gt;对于layout为圆形网状来说,我们需要将node的角度进行一定程度的调整.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;node_name = paste(&amp;quot;Node&amp;quot;, node, sep = &amp;quot;_&amp;quot;)
node_name&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Node_1&amp;quot;  &amp;quot;Node_2&amp;quot;  &amp;quot;Node_3&amp;quot;  &amp;quot;Node_4&amp;quot;  &amp;quot;Node_5&amp;quot;  &amp;quot;Node_6&amp;quot;  &amp;quot;Node_7&amp;quot; 
##  [8] &amp;quot;Node_8&amp;quot;  &amp;quot;Node_9&amp;quot;  &amp;quot;Node_10&amp;quot; &amp;quot;Node_11&amp;quot; &amp;quot;Node_12&amp;quot; &amp;quot;Node_13&amp;quot; &amp;quot;Node_14&amp;quot;
## [15] &amp;quot;Node_15&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;angle &amp;lt;- 360 * (c(1:length(node_name)) - 0.5)/length(node_name)
hjust &amp;lt;- ifelse(angle &amp;gt; 180, 1, 0)
angle &amp;lt;- ifelse(angle &amp;gt; 180, 90 - angle + 180, 90 - angle)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后添加node文字.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot +
  geom_node_text(aes(x = x * 1.05,
                     y = y * 1.15,
                     label = node_name), 
                 angle = angle, 
                 hjust = hjust,
                 colour = &amp;quot;black&amp;quot;,
                 size = 3.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到有些文字跑到绘图区域外面了,这时候需要将坐标轴进行扩展就行了.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot +
  geom_node_text(aes(x = x * 1.05,
                     y = y * 1.15,
                     label = node_name), 
                 angle = angle, 
                 hjust = hjust,
                 colour = &amp;quot;black&amp;quot;,
                 size = 3.5) +
  expand_limits(x = c(-1.5, 1.5), y = c(-1.5, 1.5))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们可以看看原来的坐标轴是什么样子的.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;linear&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_bw()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们将theme设置为&lt;code&gt;theme_bw()&lt;/code&gt;就可以清楚的看到原来的坐标体系了.&lt;/p&gt;
&lt;p&gt;可以看到legend的顺序有点乱.可以在&lt;code&gt;guides()&lt;/code&gt;函数中设置.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;linear&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
  scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  guides(colour = guide_legend(order = 1),
         size = guide_legend(order = 2),
         colour = guide_edge_colourbar(order = 3)) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Duplicated aesthetics after name standardisation: colour&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;添加文字的时候,文字之间,以及文字node之间,会出现覆盖的问题.如下图所示:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;auto&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_void() +
      geom_node_text(aes(x = x,
                     y = y,
                     label = node_name,
                     colour = node.colour), 
                 size = 3.5) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;ggplot2&lt;/code&gt;中,我们使用&lt;code&gt;ggrepel&lt;/code&gt;包可以解决这个问题.在这里,我们可以设置&lt;code&gt;repel&lt;/code&gt;为TRUE.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;auto&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_void() +
      geom_node_text(aes(label = node_name,
                     colour = node.colour), 
                 size = 3.5, repel = TRUE) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当然,也可以使用&lt;code&gt;geom_node_label()&lt;/code&gt;来标注.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;auto&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_void() +
      geom_node_label(aes(label = node_name,
                     colour = node.colour), 
                 size = 3.5, repel = TRUE) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;使用不同的layout&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; 使用不同的layout&lt;/h2&gt;
&lt;p&gt;对网络来说,可以使用不同的layout,layout既可以通过再&lt;code&gt;ggraph&lt;/code&gt;中通过设置&lt;code&gt;layout&lt;/code&gt;参数实现,也可以通过将&lt;code&gt;graph&lt;/code&gt;直接赋予layout属性实现.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;auto&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;linear&amp;quot;, circular = FALSE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
      geom_node_text(aes(colour = node.colour),
                     hjust = 1,
                     angle = 65,
                     nudge_y = -0.3,
                     label = node_name, 
                 size = 3.5) +
  expand_limits(x = c(-1.5, 1.5), y = c(-1.5, 1.5)) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;eigen&amp;quot;, circular = FALSE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_void() +
    geom_node_text(aes(x = x,
                     y = y,
                     label = node_name,
                     colour = node.colour), 
                 size = 3.5) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;不同的连接线&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.4&lt;/span&gt; 不同的连接线&lt;/h2&gt;
&lt;p&gt;上面的例子node之间的连接都是曲线(&lt;code&gt;geom_edge_arc&lt;/code&gt;),当然我们也可以使用不同的连接方式,比如直线,这时候需要使用不同的&lt;code&gt;geom_edge_xxx()&lt;/code&gt;函数.&lt;/p&gt;
&lt;p&gt;比如直线可以使用&lt;code&gt;geom_edge_link()&lt;/code&gt;,有三个不同的函数,暂时没有仔细看差别,详细差别可以使用:&lt;code&gt;?get_edges&lt;/code&gt;查看.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;auto&amp;quot;, circular = TRUE) +
  geom_edge_link(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;auto&amp;quot;, circular = TRUE) +
  geom_edge_link2(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;auto&amp;quot;, circular = TRUE) +
  geom_edge_link0(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;画有一定弯度的edge可以使用&lt;code&gt;geom_edge_fan()&lt;/code&gt;函数.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;auto&amp;quot;, circular = TRUE) +
  geom_edge_fan(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  theme_void()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;使用不同的主题&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.5&lt;/span&gt; 使用不同的主题&lt;/h2&gt;
&lt;p&gt;可以使用暗黑主题,像图片显示的更炫酷一些.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;auto&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;, high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2)) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  ggdark::dark_theme_void() +
      geom_node_text(aes(label = node_name,
                     colour = node.colour), 
                 size = 3.5, repel = TRUE) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Inverted geom defaults of fill and color/colour.
## To change them back, use invert_geom_defaults().&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因为leged的某些显示颜色为黑色,而主题没有将其修改过来,可以手动进行修改.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggraph(graph = graph_data, layout = &amp;quot;auto&amp;quot;, circular = TRUE) +
  geom_edge_arc(aes(edge_colour = edge.colour, edge_width = edge.width)) +
  scale_edge_colour_gradient2(low = &amp;quot;#155F83FF&amp;quot;, mid = &amp;quot;white&amp;quot;,
                              high = &amp;quot;#800000FF&amp;quot;) +
  scale_edge_width_continuous(range = c(0.2,2), 
                              guide = guide_legend(override.aes = list(colour = &amp;quot;white&amp;quot;, alpha =1))) +
  guides(colour = guide_legend(override.aes = list(size = 5))) +
  geom_node_point(aes(colour = node.colour, size = node.size)) +
  scale_size_continuous(range = c(5,10)) +
  scale_colour_manual(values = c(&amp;quot;Class A&amp;quot; = &amp;quot;#8A9045FF&amp;quot;, &amp;quot;Class B&amp;quot; = &amp;quot;#155F83FF&amp;quot;)) +
  ggdark::dark_theme_void() +
      geom_node_text(aes(label = node_name,
                     colour = node.colour), 
                 size = 3.5, repel = TRUE) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Using `stress` as default layout&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-r-ggraph/index_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python模仿ggplot2的绘图包:plotnine</title>
      <link>/post/2019-11-27-plotnine/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-27-plotnine/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Python中有一个模仿R &lt;code&gt;ggplot2&lt;/code&gt;语法创建的绘图包,plotnine.官网在这:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://plotnine.readthedocs.io/en/stable/&#34; class=&#34;uri&#34;&gt;https://plotnine.readthedocs.io/en/stable/&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;安装&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;pip install plotinie&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;使用&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 使用&lt;/h1&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from plotnine import *
from plotnine.data import mtcars
mtcars.head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 name   mpg  cyl   disp   hp  ...   qsec  vs  am  gear  carb
## 0          Mazda RX4  21.0    6  160.0  110  ...  16.46   0   1     4     4
## 1      Mazda RX4 Wag  21.0    6  160.0  110  ...  17.02   0   1     4     4
## 2         Datsun 710  22.8    4  108.0   93  ...  18.61   1   1     4     1
## 3     Hornet 4 Drive  21.4    6  258.0  110  ...  19.44   1   0     3     1
## 4  Hornet Sportabout  18.7    8  360.0  175  ...  17.02   0   0     3     2
## 
## [5 rows x 12 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是,在python中,&lt;code&gt;+&lt;/code&gt;要放在每一句的前面而不是后面.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(ggplot(mtcars, aes(&amp;#39;wt&amp;#39;, &amp;#39;mpg&amp;#39;, color=&amp;#39;factor(gear)&amp;#39;))
 + geom_point()
 + stat_smooth(method=&amp;#39;lm&amp;#39;)
 + facet_wrap(&amp;#39;~gear&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;ggplot: (-9223372036762410300)&amp;gt;
## 
## D:\software\python\lib\site-packages\plotnine\scales\scale.py:93: MatplotlibDeprecationWarning: 
## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead.
##   if cbook.iterable(self.breaks) and cbook.iterable(self.labels):
## D:\software\python\lib\site-packages\numpy\core\fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
##   return ptp(axis=axis, out=out, **kwargs)
## D:\software\python\lib\site-packages\numpy\core\fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
##   return ptp(axis=axis, out=out, **kwargs)
## D:\software\python\lib\site-packages\numpy\core\fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
##   return ptp(axis=axis, out=out, **kwargs)
## D:\software\python\lib\site-packages\plotnine\utils.py:553: MatplotlibDeprecationWarning: 
## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead.
##   return cbook.iterable(var) and not is_string(var)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-plotnine/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;614&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到跟&lt;code&gt;ggplot2&lt;/code&gt;语法几乎一致,非常方便,大大减小了学习成本.&lt;/p&gt;
&lt;p&gt;当然也可以将生成的图片赋值给变量.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;plot = (ggplot(mtcars)
+ geom_point(aes(x = &amp;quot;wt&amp;quot;, y = &amp;quot;mpg&amp;quot;, colour = &amp;quot;gear&amp;quot;))
+ theme_bw()
)
plot&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;ggplot: (-9223372036754654152)&amp;gt;
## 
## D:\software\python\lib\site-packages\plotnine\scales\scale.py:93: MatplotlibDeprecationWarning: 
## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead.
##   if cbook.iterable(self.breaks) and cbook.iterable(self.labels):
## D:\software\python\lib\site-packages\plotnine\utils.py:553: MatplotlibDeprecationWarning: 
## The iterable function was deprecated in Matplotlib 3.1 and will be removed in 3.3. Use np.iterable instead.
##   return cbook.iterable(var) and not is_string(var)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-plotnine/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;614&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是需要注意&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;ggplot&lt;/code&gt;开始,到绘图代码结束,都需要放在一个小括号里面.&lt;/p&gt;
&lt;p&gt;语法跟ggplot2几乎是相同的,真的是非常方便了!!&lt;/p&gt;
&lt;p&gt;当然,问题也是有的,就是没有像R中一样的,&lt;code&gt;ggplot2&lt;/code&gt;的扩展包了,比如&lt;code&gt;ggraph&lt;/code&gt;等.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>SAM test用于差异标志物的选择</title>
      <link>/post/2019-11-27-volcano-plot/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-27-volcano-plot/</guid>
      <description>


&lt;p&gt;参考文献&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;,&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;示例代码:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function to compute the smooth threshold curve
smooth.threshold=function(x,ta,s0,df){
  xp=x[x&amp;gt;(ta*s0)]; xn=x[x&amp;lt;(-ta*s0)]; dp=xp/ta-s0; dn=xn/(-ta)-s0;
  dp=s0/dp; dp=ta*(1+dp); dn=s0/dn; dn=ta*(1+dn);
  fp=pt(dp,df=df); fn=pt(dn,df=df); yp=-log10(2*(1-fp)); yn=-log10(2*(1-fn));
  return(cbind(c(xn,xp),c(yn,yp)));
}

# Get data
library(cp4p); data(LFQRatio2); tabl=LFQRatio2;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;cp4p&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: MESS&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;MESS&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: multtest&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: BiocGenerics&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: parallel&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;BiocGenerics&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:parallel&amp;#39;:
## 
##     clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
##     clusterExport, clusterMap, parApply, parCapply, parLapply,
##     parLapplyLB, parRapply, parSapply, parSapplyLB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     IQR, mad, sd, var, xtabs&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     anyDuplicated, append, as.data.frame, basename, cbind,
##     colnames, dirname, do.call, duplicated, eval, evalq, Filter,
##     Find, get, grep, grepl, intersect, is.unsorted, lapply, Map,
##     mapply, match, mget, order, paste, pmax, pmax.int, pmin,
##     pmin.int, Position, rank, rbind, Reduce, rownames, sapply,
##     setdiff, sort, table, tapply, union, unique, unsplit, which,
##     which.max, which.min&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: Biobase&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Welcome to Bioconductor
## 
##     Vignettes contain introductory material; view with
##     &amp;#39;browseVignettes()&amp;#39;. To cite Bioconductor, see
##     &amp;#39;citation(&amp;quot;Biobase&amp;quot;)&amp;#39;, and for packages &amp;#39;citation(&amp;quot;pkgname&amp;quot;)&amp;#39;.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: qvalue&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: limma&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;limma&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following object is masked from &amp;#39;package:BiocGenerics&amp;#39;:
## 
##     plotMA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get Fold-Change
n1=3; n2=3;
m1=apply(tabl[,1:n1],1,mean); m2=apply(tabl[,(n1+1):(n1+n2)],1,mean);
FC=m1-m2;

# Get standard deviations for t-test
sd1=apply(tabl[,1:n1],1,sd)
sd2=apply(tabl[,(n1+1):(n1+n2)],1,sd)
sdd=sqrt(((sd1^2)+(sd2^2))/(n1+n2))

# Compute the fudge factor with the method of Tusher, V., Tibshirani, R., and Chu, G. (2001)
library(siggenes) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: splines&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ff0=fudge2(FC,sdd)$s.zero;

# Get degrees of freedom for significance testing
df=(n1+n2)-2;

# Get t.stats and p.values 
t.stat=FC/sdd; p.value=2*(1-pt(abs(t.stat),df=df));

####################################################
# Prepare displays
abs.inf=-3.5; abs.sup=3.5;

#################################
# Figure a
#################################
# Display the volcano plot on the interval [abs.inf,abs.sup]
plot(FC,-log10(p.value),xlim=c(abs.inf,abs.sup),col=4);
# Display the human proteins which should be identified as differentially abundant
points(FC[(tabl$Organism==&amp;quot;human&amp;quot;)],-log10(p.value)[(tabl$Organism==&amp;quot;human&amp;quot;)],col=2,pch=3);

confidence_level=0.975
ff=0.5;
ht &amp;lt;- -log10(1-confidence_level);
points(c(-ff,ff), c(10,10), type=&amp;#39;h&amp;#39;, col=&amp;#39;green&amp;#39;,lwd=2);
lines(c(abs.inf,abs.sup), c(ht,ht), col=&amp;#39;green&amp;#39;,lwd=2);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-volcano-plot/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#################################
# Figure b
#################################
# Display the volcano plot on the interval [abs.inf,abs.sup]
plot(FC,-log10(p.value),xlim=c(abs.inf,abs.sup),col=4);
# Display the human proteins which should be identified as differentially abundant
points(FC[(tabl$Organism==&amp;quot;human&amp;quot;)],-log10(p.value)[(tabl$Organism==&amp;quot;human&amp;quot;)],col=2,pch=3);

confidence_level=0.975; ff=0.5;
smoothcurve=smooth.threshold(seq(abs.inf,abs.sup,by=0.0001),
                             ta=qt(confidence_level,df=df),s0=ff,df=df);
lines(smoothcurve, col=&amp;#39;green&amp;#39;,lwd=2);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-volcano-plot/index_files/figure-html/unnamed-chunk-1-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#################################
# Figure c
#################################
# Display the volcano plot on the interval [abs.inf,abs.sup]
plot(FC,-log10(p.value),xlim=c(abs.inf,abs.sup),col=4);
# Display the human proteins which should be identified as differentially abundant
points(FC[(tabl$Organism==&amp;quot;human&amp;quot;)],-log10(p.value)[(tabl$Organism==&amp;quot;human&amp;quot;)],col=2,pch=3);

confidence_level=0.975; ff=0.5; ht &amp;lt;- -log10(1-confidence_level)
points(c(-ff,ff), c(10,10), type=&amp;#39;h&amp;#39;, col=&amp;#39;black&amp;#39;,lwd=1)
lines(c(abs.inf,abs.sup), c(ht,ht), col=&amp;#39;black&amp;#39;,lwd=1)

confidence_level=0.9; ff=0.6;
smoothcurve=smooth.threshold(seq(abs.inf,abs.sup,by=0.0001),ta=qt(confidence_level,df=df),s0=ff,df=df);
lines(smoothcurve, col=&amp;#39;gray&amp;#39;,lwd=1)

confidence_level=0.75; ff=2;
smoothcurve=smooth.threshold(seq(abs.inf,abs.sup,by=0.0001),ta=qt(confidence_level,df=df),s0=ff,df=df);
lines(smoothcurve, col=&amp;#39;gray&amp;#39;,lwd=1)

confidence_level=0.95; ff=0.6;
smoothcurve=smooth.threshold(seq(abs.inf,abs.sup,by=0.0001),ta=qt(confidence_level,df=df),s0=ff,df=df);
lines(smoothcurve, col=&amp;#39;gray&amp;#39;,lwd=1)

confidence_level=0.97; ff=0.15;
smoothcurve=smooth.threshold(seq(abs.inf,abs.sup,by=0.0001),ta=qt(confidence_level,df=df),s0=ff,df=df);
lines(smoothcurve, col=&amp;#39;green&amp;#39;,lwd=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-volcano-plot/index_files/figure-html/unnamed-chunk-1-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#################################
# Figure d
#################################
# Display the volcano plot on the interval [abs.inf,abs.sup]
plot(FC,-log10(p.value),xlim=c(abs.inf,abs.sup),col=4);
# Display the human proteins which should be identified as differentially abundant
points(FC[(tabl$Organism==&amp;quot;human&amp;quot;)],-log10(p.value)[(tabl$Organism==&amp;quot;human&amp;quot;)],col=2,pch=3);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-27-volcano-plot/index_files/figure-html/unnamed-chunk-1-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Uses and misuses of the fudge factor in quantitative discovery proteomics&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Significance analysis of microarrays applied to the ionizing radiation response&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python包及模块的导入</title>
      <link>/post/2019-11-26-impot-module-package/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-26-impot-module-package/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#模块module&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 模块(module)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#包package&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 包(package)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#常规导入&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; 常规导入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用from语句导入&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; 使用&lt;code&gt;from&lt;/code&gt;语句导入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用as语句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; 使用&lt;code&gt;as&lt;/code&gt;语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#我倾向的方式&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;6&lt;/span&gt; 我倾向的方式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;模块module&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 模块(module)&lt;/h1&gt;
&lt;p&gt;模块一般是一个python文件(.py),直接使用&lt;code&gt;import&lt;/code&gt;语句就可以导入一个模块.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;包package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 包(package)&lt;/h1&gt;
&lt;p&gt;包是一个目录,可以使用&lt;code&gt;import&lt;/code&gt;语句或者&lt;code&gt;from&lt;/code&gt; + &lt;code&gt;import&lt;/code&gt;语句来导入.也可以再后面加上&lt;code&gt;as&lt;/code&gt;语句,将导入的包或者模块重新命名为其他的名字.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;常规导入&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; 常规导入&lt;/h1&gt;
&lt;p&gt;直接使用&lt;code&gt;import&lt;/code&gt;语句&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import os
os.getcwd()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;D:\\my github\\shen\\content\\en\\post\\2019-11-26-impot-module-package&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然,也可以同时导入多个包.每个包中间使用逗号分隔开.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import os,sys,time&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是,这样导入多个包的时候,一方面不能使用&lt;code&gt;as&lt;/code&gt;将包重新命名,另外也不符合python的编程风格指导,python建议一行只导入一个包.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;使用from语句导入&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; 使用&lt;code&gt;from&lt;/code&gt;语句导入&lt;/h1&gt;
&lt;p&gt;很多时候,可能只想导入包的某个模块.这时候我们可以使用&lt;code&gt;from&lt;/code&gt;语句跟&lt;code&gt;import&lt;/code&gt;语句联合使用&lt;/p&gt;
&lt;pre class=&#34;(python)&#34;&gt;&lt;code&gt;from functools import lru_cache#只导入lru_cache模块
import functools#导入functools所有的模块&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样就可以直接使用&lt;code&gt;lru_cache&lt;/code&gt;模块了.&lt;/p&gt;
&lt;p&gt;当然,也可以导入这个包的所有模块.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from os import *&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样做有一个很大的问题,就是打乱了你的命名空间,因为很有可能你自己定义的函数或者变量跟你导入的包中的模块名时相同的,这时候就有可能发生冲突,所以并不推荐这样做.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;使用as语句&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; 使用&lt;code&gt;as&lt;/code&gt;语句&lt;/h1&gt;
&lt;p&gt;使用&lt;code&gt;as&lt;/code&gt;语句可以将导入的包或者模块重新命名,对于那些包名字比较长而且不太好打印的包来说,非常有用.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
import pandas as pd
np.array([1,2,3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1, 2, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = np.array(np.arange(9))
test = test.reshape((3,3))
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[0, 1, 2],
##        [3, 4, 5],
##        [6, 7, 8]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test2 = pd.DataFrame(test)
test2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    0  1  2
## 0  0  1  2
## 1  3  4  5
## 2  6  7  8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;我倾向的方式&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;6&lt;/span&gt; 我倾向的方式&lt;/h1&gt;
&lt;p&gt;还是使用&lt;code&gt;import&lt;/code&gt; + &lt;code&gt;as&lt;/code&gt;的方式更加可靠,然后使用&lt;code&gt;pkg_name.function()&lt;/code&gt;的方式进行调用.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python NumPy包总结</title>
      <link>/post/2019-11-24-python-numpy-summary/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-24-python-numpy-summary/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#numpy中的数据格式&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Numpy中的数据格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#numpy-array基础&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Numpy array基础&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#array的属性&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; Array的属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#array索引获得其中单个元素&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2&lt;/span&gt; Array索引:获得其中单个元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#array切片获得一个subarray&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3&lt;/span&gt; Array切片:获得一个subarray&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#一维array&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.1&lt;/span&gt; 一维array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#多维array&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3.2&lt;/span&gt; 多维array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#重塑array的形状&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.4&lt;/span&gt; 重塑array的形状&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#array的合并和分裂concatenation-and-splitting&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.5&lt;/span&gt; Array的合并和分裂(Concatenation and Splitting)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#合并array&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.5.1&lt;/span&gt; 合并array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#分割array&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.5.2&lt;/span&gt; 分割array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#在numpy-array上进行运算&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; 在Numpy array上进行运算&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#universal-functionsufuncs&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.1&lt;/span&gt; Universal Functions(UFuncs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#面向数组的编程&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2&lt;/span&gt; 面向数组的编程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#expressing-conditional-logic-as-array-operations&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2.1&lt;/span&gt; Expressing Conditional Logic as Array Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#numpy中的数学和统计方法&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2.2&lt;/span&gt; Numpy中的数学和统计方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#排序sorting&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2.3&lt;/span&gt; 排序(sorting)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unique-and-other-set-logic&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2.4&lt;/span&gt; Unique and Other Set Logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#array数据的输入和的输出&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2.5&lt;/span&gt; array数据的输入和的输出&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;安装&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;/h1&gt;
&lt;p&gt;在终端中输入:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install numpy&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用numpy&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
np.__version__&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;1.16.4&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;numpy中的数据格式&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Numpy中的数据格式&lt;/h1&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;45%&#34; /&gt;
&lt;col width=&#34;54%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Data type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;bool_ Boolean&lt;/td&gt;
&lt;td&gt;(True or False) stored as a byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;int_ Default&lt;/td&gt;
&lt;td&gt;integer type (same as C long; normally either int64 or int32)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;intc&lt;/td&gt;
&lt;td&gt;Identical to C int (normally int32 or int64)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;intp&lt;/td&gt;
&lt;td&gt;Integer used for indexing (same as C ssize_t; normally either int32 or int64)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;int8&lt;/td&gt;
&lt;td&gt;Byte (–128 to 127)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;int16&lt;/td&gt;
&lt;td&gt;Integer (–32768 to 32767)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;int32&lt;/td&gt;
&lt;td&gt;Integer (–2147483648 to 2147483647)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;int64&lt;/td&gt;
&lt;td&gt;Integer (–9223372036854775808 to 9223372036854775807)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;uint8&lt;/td&gt;
&lt;td&gt;Unsigned integer (0 to 255)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;uint16&lt;/td&gt;
&lt;td&gt;Unsigned integer (0 to 65535)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;uint32&lt;/td&gt;
&lt;td&gt;Unsigned integer (0 to 4294967295)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;uint64&lt;/td&gt;
&lt;td&gt;Unsigned integer (0 to 18446744073709551615)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;float_&lt;/td&gt;
&lt;td&gt;Shorthand for float64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;float16&lt;/td&gt;
&lt;td&gt;Half-precision float: sign bit, 5 bits exponent, 10 bits mantissa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;float32&lt;/td&gt;
&lt;td&gt;Single-precision float: sign bit, 8 bits exponent, 23 bits mantissa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;float64&lt;/td&gt;
&lt;td&gt;Double-precision float: sign bit, 11 bits exponent, 52 bits mantissa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;complex_&lt;/td&gt;
&lt;td&gt;Shorthand for complex128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;complex64&lt;/td&gt;
&lt;td&gt;Complex number, represented by two 32-bit floats&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;complex128&lt;/td&gt;
&lt;td&gt;Complex number, represented by two 64-bit floats&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;numpy-array基础&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Numpy array基础&lt;/h1&gt;
&lt;div id=&#34;array的属性&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Array的属性&lt;/h2&gt;
&lt;p&gt;先生成三个不同的array,一维,二维和三维array.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
np.random.seed(0)#设置seed,保证重复性

x1 = np.random.randint(10, size = 6)#一维
x2 = np.random.randint(10, size = (3, 4))#二维
x3 = np.random.randint(10, size = (3, 4, 5))#三维
x1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([5, 0, 3, 3, 7, 9])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[3, 5, 2, 4],
##        [7, 6, 8, 8],
##        [1, 6, 7, 7]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[[8, 1, 5, 9, 8],
##         [9, 4, 3, 0, 3],
##         [5, 0, 2, 3, 8],
##         [1, 3, 3, 3, 7]],
## 
##        [[0, 1, 9, 9, 0],
##         [4, 7, 3, 2, 7],
##         [2, 0, 0, 4, 5],
##         [5, 6, 8, 4, 1]],
## 
##        [[4, 9, 8, 1, 1],
##         [7, 9, 9, 3, 6],
##         [7, 2, 0, 3, 5],
##         [9, 4, 4, 6, 4]]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每一个array都有&lt;code&gt;ndim&lt;/code&gt;,&lt;code&gt;shape&lt;/code&gt;和&lt;code&gt;size&lt;/code&gt;属性.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(x1.ndim, x1.shape, x1.size)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1 (6,) 6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(x2.ndim, x2.shape, x2.size)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2 (3, 4) 12&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(x3.ndim, x3.shape, x3.size)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3 (3, 4, 5) 60&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从上面例子可以看出来这三个属性分别代表什么意思.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ndim&lt;/code&gt;属性:该数据是几维数据.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;shape&lt;/code&gt;属性:该数据每个维度的大小,这个可以看作是R中的&lt;code&gt;dim()&lt;/code&gt;函数得到的内容.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;size&lt;/code&gt;属性:该数据的总的cell数目.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;dtype&lt;/code&gt;属性是指array的数据类型.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(x1.dtype, x2.dtype, x3.dtype)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## int32 int32 int32&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;array索引获得其中单个元素&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; Array索引:获得其中单个元素&lt;/h2&gt;
&lt;p&gt;array的索引跟python中内置的列表非常像,可以使用位置索引,但是同样注意从0开始算起.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([5, 0, 3, 3, 7, 9])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x1[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x1[-1]#倒数第一个元素&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于多维,比如二维array,则跟R中的数据框类似,使用逗号分开行和列的索引.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[3, 5, 2, 4],
##        [7, 6, 8, 8],
##        [1, 6, 7, 7]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2[0,0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2[0,0] = 10
x2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[10,  5,  2,  4],
##        [ 7,  6,  8,  8],
##        [ 1,  6,  7,  7]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2[0,0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;array切片获得一个subarray&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; Array切片:获得一个subarray&lt;/h2&gt;
&lt;p&gt;类似于列表,可以这样切片:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list[start🔚step]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要强调一次再,取出的subarray不包括end.&lt;/p&gt;
&lt;div id=&#34;一维array&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.1&lt;/span&gt; 一维array&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = np.arange(10)
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x[:5]#前五个元素&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([0, 1, 2, 3, 4])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x[4:7]#前五个元素&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([4, 5, 6])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x[::2]#前五个元素&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([0, 2, 4, 6, 8])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x[::-1]#将array反向排列&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;多维array&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3.2&lt;/span&gt; 多维array&lt;/h3&gt;
&lt;p&gt;多维数组跟一致数组一样,只是需要使用逗号把不同维度的切片分开即可.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array[start🔚step,start:end;step]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[10,  5,  2,  4],
##        [ 7,  6,  8,  8],
##        [ 1,  6,  7,  7]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2[1:3, 1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[6, 8],
##        [6, 7]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2[::-1, ::-1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 7,  7,  6,  1],
##        [ 8,  8,  6,  7],
##        [ 4,  2,  5, 10]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果对于行或者列只取出一个,会出现什么情况呢?&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[10,  5,  2,  4],
##        [ 7,  6,  8,  8],
##        [ 1,  6,  7,  7]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2[1:3, 0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([7, 1])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2[1:3, 0].ndim&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,降维了.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;array_slicing.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;重塑array的形状&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.4&lt;/span&gt; 重塑array的形状&lt;/h2&gt;
&lt;p&gt;array的形状,上面简单介绍了,指的就是数组的各个维度的大小.比较常用的是&lt;code&gt;reshape&lt;/code&gt;方法.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;grid = np.arange(1, 10)
grid&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;grid.reshape((3,3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3],
##        [4, 5, 6],
##        [7, 8, 9]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;array的合并和分裂concatenation-and-splitting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.5&lt;/span&gt; Array的合并和分裂(Concatenation and Splitting)&lt;/h2&gt;
&lt;div id=&#34;合并array&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.5.1&lt;/span&gt; 合并array&lt;/h3&gt;
&lt;p&gt;将两个array合并为一个array,可以使用函数&lt;code&gt;concatenate&lt;/code&gt;,是&lt;code&gt;numpy&lt;/code&gt;中的函数.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = np.array([1, 2, 3])
y = np.array([3, 2, 1])
z = [99, 99, 99]
np.concatenate([x, y, z])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([ 1,  2,  3,  3,  2,  1, 99, 99, 99])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,需要将array放在一个&lt;code&gt;list&lt;/code&gt;(中括号)中.&lt;/p&gt;
&lt;p&gt;还可以用于二维array的合并.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;grid = np.array([[1, 2, 3],
[4, 5, 6]])
grid&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3],
##        [4, 5, 6]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.concatenate([grid, grid])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3],
##        [4, 5, 6],
##        [1, 2, 3],
##        [4, 5, 6]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,这样类似于R中的数据库的&lt;code&gt;rbind&lt;/code&gt;功能,将array按照列进行合并.&lt;/p&gt;
&lt;p&gt;那么如何实现&lt;code&gt;cbind&lt;/code&gt;效果呢?&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.concatenate([grid, grid], axis=1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3, 1, 2, 3],
##        [4, 5, 6, 4, 5, 6]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其实还可以使用更为形象的函数,&lt;code&gt;np.vstack&lt;/code&gt;(相当于R中的&lt;code&gt;rbind&lt;/code&gt;),和&lt;code&gt;np.hstack&lt;/code&gt;(相当于R中的&lt;code&gt;cbind&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = np.array([1, 2, 3])
grid = np.array([[9, 8, 7],
[6, 5, 4]])
np.vstack([x, grid])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3],
##        [9, 8, 7],
##        [6, 5, 4]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y = np.array([[99],
[99]])
np.hstack([grid, y])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 9,  8,  7, 99],
##        [ 6,  5,  4, 99]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;分割array&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.5.2&lt;/span&gt; 分割array&lt;/h3&gt;
&lt;p&gt;分割array有几个函数.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.split&lt;/code&gt;,&lt;code&gt;np.hsplit&lt;/code&gt;,和&lt;code&gt;np.vsplit&lt;/code&gt;.看几个例子就明白了.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = [1, 2, 3, 99, 99, 3, 2, 1]
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 99, 99, 3, 2, 1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x1, x2, x3 = np.split(x, [3, 5])
x1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1, 2, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([99, 99])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([3, 2, 1])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于函数&lt;code&gt;split&lt;/code&gt;,第一参数是要分割的列表,第二个参数需要是一个list,代表从哪分割,比如这里面的&lt;code&gt;[3,5]&lt;/code&gt;,就代表着将列表分割为三段,分别是[:3],[3:5],[5:].&lt;/p&gt;
&lt;p&gt;同样对于&lt;code&gt;hsplit&lt;/code&gt;和&lt;code&gt;vsplit&lt;/code&gt;也就比较好理解了,分别是对多维array进行垂直和水平切割.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;grid = np.arange(16).reshape((4, 4))
grid&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 0,  1,  2,  3],
##        [ 4,  5,  6,  7],
##        [ 8,  9, 10, 11],
##        [12, 13, 14, 15]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;upper, lower = np.vsplit(grid, [2])
print(upper)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[0 1 2 3]
##  [4 5 6 7]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(lower)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[ 8  9 10 11]
##  [12 13 14 15]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;left, right = np.hsplit(grid, [2])
print(left)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[ 0  1]
##  [ 4  5]
##  [ 8  9]
##  [12 13]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(right)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[ 2  3]
##  [ 6  7]
##  [10 11]
##  [14 15]]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;在numpy-array上进行运算&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; 在Numpy array上进行运算&lt;/h1&gt;
&lt;p&gt;对array进行运算有一点非常重要,就是进行向量化操作(vectorized operations),跟R一样.这样的好处时可以提高运算速度.&lt;/p&gt;
&lt;div id=&#34;universal-functionsufuncs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; Universal Functions(UFuncs)&lt;/h2&gt;
&lt;p&gt;举一个简单的例子,给定一组数,计算每个数的倒数.如果用以前的思维,那么应该对每一个数分别计算倒数,然后循环.但是其实大可不必.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
values = np.arange(1,10)
values&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;1/values&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1.        , 0.5       , 0.33333333, 0.25      , 0.2       ,
##        0.16666667, 0.14285714, 0.125     , 0.11111111])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这在R中的基础数据格式,向量中就可以运行的,但是对python的基础数据格式,列表和tuple是不可以的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(range(1,10))
# 1/list(range(1,10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是说列表是不支持向量化操作的,只有在numpy的array上才可以.&lt;/p&gt;
&lt;p&gt;所以,可以将numpy中的一维array想象成是R中的向量,这样就好记住多了.&lt;/p&gt;
&lt;p&gt;那么,同样的,两个一维array也可以像R向量一样,做向量化的操作.比如+,÷等.但是两个array的长度必须相等,否则报错.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.arange(1,10)/np.arange(2,11)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([0.5       , 0.66666667, 0.75      , 0.8       , 0.83333333,
##        0.85714286, 0.875     , 0.88888889, 0.9       ])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.arange(1,10) + np.arange(2,11)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([ 3,  5,  7,  9, 11, 13, 15, 17, 19])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.arange(1,10) - np.arange(2,11)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([-1, -1, -1, -1, -1, -1, -1, -1, -1])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然,向量化的操作并不局限于一维的array,对于二维的array同样适用,只要将其对比为R中的数据框即可.当然,也可以二维和一维操作,这时候是按照每行都对同一个一维array分别操作进行的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = np.arange(1,10)
test = test.reshape((3,3))
test2 = np.arange(2,11).reshape((3,3)) 
test3 = np.array([1,2,3])
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1, 2, 3],
##        [4, 5, 6],
##        [7, 8, 9]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 2,  3,  4],
##        [ 5,  6,  7],
##        [ 8,  9, 10]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1, 2, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test + test2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 3,  5,  7],
##        [ 9, 11, 13],
##        [15, 17, 19]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test/test2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[0.5       , 0.66666667, 0.75      ],
##        [0.8       , 0.83333333, 0.85714286],
##        [0.875     , 0.88888889, 0.9       ]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test/test3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[1. , 1. , 1. ],
##        [4. , 2.5, 2. ],
##        [7. , 4. , 3. ]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再来看一个例子:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
x = np.random.randn(8)
y = np.random.randn(8)
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([ 1.25441407,  1.41910204, -0.74385608, -2.5174371 , -1.50709602,
##         1.14907613, -1.19357825,  1.14104245])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([ 1.50944508,  1.06777513, -0.68658948,  0.01487332, -0.3756659 ,
##        -0.03822364,  0.36797447, -0.0447237 ])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.maximum(x, y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([ 1.50944508,  1.41910204, -0.68658948,  0.01487332, -0.3756659 ,
##         1.14907613,  0.36797447,  1.14104245])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,&lt;code&gt;np.maximum()&lt;/code&gt;函数对两个array的同一位置上的数取最大值,返回与输入array长度相同的array.&lt;/p&gt;
&lt;p&gt;如果两个array长度不同,则报错.&lt;/p&gt;
&lt;p&gt;常见的接受一个array的ufuncs:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;44%&#34; /&gt;
&lt;col width=&#34;55%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;abs&lt;/code&gt;,&lt;code&gt;fabs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compute the absolute value element-wise for integer, floating-point, or complex values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;sqrt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compute the square root of each element (equivalent to arr ** 0.5)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;square&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compute the square of each element (equivalent to arr ** 2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;exp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compute the exponent ex of each element&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;log, log10, log2, log1p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Natural logarithm (base e), log base 10, log base 2, and log(1 + x), respectively&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;sign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compute the sign of each element: 1 (positive), 0 (zero), or –1 (negative)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;ceil&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compute the ceiling of each element (i.e., the smallest integer greater than or equal to that&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;number)
&lt;code&gt;floor&lt;/code&gt; | Compute the floor of each element (i.e., the largest integer less than or equal to each element)
&lt;code&gt;rint&lt;/code&gt; | Round elements to the nearest integer, preserving the dtype
&lt;code&gt;modf&lt;/code&gt; | Return fractional and integral parts of array as a separate array
&lt;code&gt;isnan&lt;/code&gt; | Return boolean array indicating whether each value is NaN (Not a Number)
&lt;code&gt;isfinite, isinf&lt;/code&gt; | Return boolean array indicating whether each element is finite (non-inf, non-NaN) or infinite,
respectively
&lt;code&gt;cos&lt;/code&gt;, &lt;code&gt;cosh&lt;/code&gt;,&lt;code&gt;sin&lt;/code&gt;,&lt;code&gt;sinh&lt;/code&gt;,&lt;code&gt;tan&lt;/code&gt;,&lt;code&gt;tanh&lt;/code&gt; | Regular and hyperbolic trigonometric functions
&lt;code&gt;arccos&lt;/code&gt;, &lt;code&gt;arccosh&lt;/code&gt;, &lt;code&gt;arcsin&lt;/code&gt;, &lt;code&gt;arcsinh&lt;/code&gt;, &lt;code&gt;arctan&lt;/code&gt;, &lt;code&gt;arctanh&lt;/code&gt; | Inverse trigonometric functions logical_not Compute truth value of not x element-wise (equivalent to ~arr).&lt;/p&gt;
&lt;p&gt;常见的接受两个array的ufuncs:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;add&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Add corresponding elements in arrays&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;subtract&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subtract elements in second array from first array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;multiply&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply array elements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;divide&lt;/code&gt;, &lt;code&gt;floor_divide&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Divide or floor divide (truncating the remainder)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;power&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Raise elements in first array to powers indicated in second array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;maximum&lt;/code&gt;, &lt;code&gt;fmax&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Element-wise maximum; fmax ignores NaN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;minimum&lt;/code&gt;, &lt;code&gt;fmin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Element-wise minimum; fmin ignores NaN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;mod&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Element-wise modulus (remainder of division)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;copysign&lt;/code&gt; Copy sign of values in second argument to values in first argument
&lt;code&gt;greater&lt;/code&gt;, &lt;code&gt;greater_equal&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;less_equal&lt;/code&gt;, &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;not_equal&lt;/code&gt; | Perform element-wise comparison, yielding boolean array (equivalent to infix operators &amp;gt;, &amp;gt;=, &amp;lt;, &amp;lt;=, ==, !=)
&lt;code&gt;logical_and&lt;/code&gt;, &lt;code&gt;logical_or&lt;/code&gt;, &lt;code&gt;logical_xor&lt;/code&gt; | Compute element-wise truth value of logical operation (equivalent to infix operators &amp;amp; |, ^)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;面向数组的编程&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; 面向数组的编程&lt;/h2&gt;
&lt;p&gt;一般来说,使用向量化操作,会比loop循环至少快上一个数量级.&lt;/p&gt;
&lt;div id=&#34;expressing-conditional-logic-as-array-operations&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2.1&lt;/span&gt; Expressing Conditional Logic as Array Operations&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])
yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])
cond = np.array([True, False, True, True, False])
result = [(x if c else y) for x, y, c in zip(xarr, yarr, cond)]
result&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1.1, 2.2, 1.3, 1.4, 2.5]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种办法问题很多.我们可以使用&lt;code&gt;np.where()&lt;/code&gt;函数来做.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;result = np.where(cond, xarr, yarr)
result&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1.1, 2.2, 1.3, 1.4, 2.5])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr = np.random.randn(4, 4)
arr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[-0.30237513, -2.2244036 ,  0.72400636,  0.35900276],
##        [ 1.07612104,  0.19214083,  0.85292596,  0.01835718],
##        [ 0.42830357,  0.99627783, -0.49114966,  0.71267817],
##        [ 1.11334035, -2.15367459, -0.41611148, -1.07089699]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr &amp;gt; 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[False, False,  True,  True],
##        [ True,  True,  True,  True],
##        [ True,  True, False,  True],
##        [ True, False, False, False]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.where(arr &amp;gt; 2, 2, -2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[-2, -2, -2, -2],
##        [-2, -2, -2, -2],
##        [-2, -2, -2, -2],
##        [-2, -2, -2, -2]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.where(arr &amp;gt; 0, 2, arr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[-0.30237513, -2.2244036 ,  2.        ,  2.        ],
##        [ 2.        ,  2.        ,  2.        ,  2.        ],
##        [ 2.        ,  2.        , -0.49114966,  2.        ],
##        [ 2.        , -2.15367459, -0.41611148, -1.07089699]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;np.random.randn()&lt;/code&gt;函数用来随机产生二维的array.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;numpy中的数学和统计方法&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2.2&lt;/span&gt; Numpy中的数学和统计方法&lt;/h3&gt;
&lt;p&gt;随机产生正态分布数据.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr = np.random.randn(5, 4)
arr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 0.22113881, -1.12305712, -1.05075796,  1.01207905],
##        [ 1.54371643, -0.40211489,  0.8647491 , -0.22686923],
##        [ 0.81116027,  0.28779461, -0.53846816,  1.9084621 ],
##        [-0.475776  ,  1.44073112, -1.14907568,  0.80571455],
##        [ 1.75610703,  0.97297991, -1.55111911,  0.19114348]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.mean()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0.2649269161929305&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.mean(arr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0.2649269161929305&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.max()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1.9084621003056945&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.max(arr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1.9084621003056945&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.min()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -1.5511191116398637&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.min(arr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -1.5511191116398637&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.sum()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 5.298538323858611&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.sum(arr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 5.298538323858611&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于这些方法,都有一个参数,&lt;code&gt;axis&lt;/code&gt;,用来指示是否按行或者按列进行计算.0代表按行,1代表按列.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.mean(axis=0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([ 0.77126931,  0.23526673, -0.68493436,  0.73810599])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.mean(axis=1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([-0.2351493 ,  0.44487035,  0.61723721,  0.1553985 ,  0.34227783])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr = np.array([0, 1, 2, 3, 4, 5, 6, 7])
arr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([0, 1, 2, 3, 4, 5, 6, 7])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.cumsum()#累乘&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([ 0,  1,  3,  6, 10, 15, 21, 28], dtype=int32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])
arr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[0, 1, 2],
##        [3, 4, 5],
##        [6, 7, 8]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.cumsum(axis=0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 0,  1,  2],
##        [ 3,  5,  7],
##        [ 9, 12, 15]], dtype=int32)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.cumsum(axis=1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 0,  1,  3],
##        [ 3,  7, 12],
##        [ 6, 13, 21]], dtype=int32)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;array常用统计方法总结&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;46%&#34; /&gt;
&lt;col width=&#34;53%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sum of all the elements in the array or along an axis; zero-length arrays have sum 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;mean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Arithmetic mean; zero-length arrays have NaN mean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;std&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Standard deviation and variance, respectively, with optional degrees of freedom adjustment (default&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;denominator n)
&lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt; | Minimum and maximum
&lt;code&gt;argmin&lt;/code&gt;, &lt;code&gt;argmax&lt;/code&gt; | Indices of minimum and maximum elements, respectively
&lt;code&gt;cumsum&lt;/code&gt; | Cumulative sum of elements starting from 0
&lt;code&gt;cumprod&lt;/code&gt; | Cumulative product of elements starting from 1&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;排序sorting&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2.3&lt;/span&gt; 排序(sorting)&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;sort&lt;/code&gt;方法来对array进行排序.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr = np.random.randn(6)
arr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([ 1.60477607, -1.42002593, -2.44378268, -2.05633855, -0.99225755,
##         1.01128532])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.sort()
arr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([-2.44378268, -2.05633855, -1.42002593, -0.99225755,  1.01128532,
##         1.60477607])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr = np.random.randn(5, 3)
arr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 1.40044008, -0.65499168, -0.25579069],
##        [-0.71438561, -0.50083877,  0.05564534],
##        [-0.48896178, -0.37992245,  0.25973465],
##        [-1.68134864, -0.91679481, -0.1192241 ],
##        [-0.44627728, -2.14335544,  0.01003777]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr.sort(axis=0)
arr.sort(axis=1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;unique-and-other-set-logic&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2.4&lt;/span&gt; Unique and Other Set Logic&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;names = np.array([&amp;#39;Bob&amp;#39;, &amp;#39;Joe&amp;#39;, &amp;#39;Will&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Will&amp;#39;, &amp;#39;Joe&amp;#39;, &amp;#39;Joe&amp;#39;])
names&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([&amp;#39;Bob&amp;#39;, &amp;#39;Joe&amp;#39;, &amp;#39;Will&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Will&amp;#39;, &amp;#39;Joe&amp;#39;, &amp;#39;Joe&amp;#39;], dtype=&amp;#39;&amp;lt;U4&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.unique(names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([&amp;#39;Bob&amp;#39;, &amp;#39;Joe&amp;#39;, &amp;#39;Will&amp;#39;], dtype=&amp;#39;&amp;lt;U4&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sorted(names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;Bob&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Joe&amp;#39;, &amp;#39;Joe&amp;#39;, &amp;#39;Joe&amp;#39;, &amp;#39;Will&amp;#39;, &amp;#39;Will&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sorted(set(names))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;Bob&amp;#39;, &amp;#39;Joe&amp;#39;, &amp;#39;Will&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;55%&#34; /&gt;
&lt;col width=&#34;44%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Functions&lt;/th&gt;
&lt;th&gt;meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;unique(x)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compute the sorted, unique elements in x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;intersect1d(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compute the sorted, common elements in x and y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;union1d(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compute the sorted union of elements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;in1d(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Compute a boolean array indicating whether each element of x is contained in y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;setdiff1d(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Set difference, elements in x that are not in y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;setxor1d(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Set symmetric differences; elements that are in either of the arrays, but not both&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;array数据的输入和的输出&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2.5&lt;/span&gt; array数据的输入和的输出&lt;/h3&gt;
&lt;p&gt;跟R的&lt;code&gt;save&lt;/code&gt;和&lt;code&gt;load&lt;/code&gt;比较像.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;arr = np.arange(10)
arr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.save(file=&amp;#39;some_array&amp;#39;, arr=arr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认的后缀民为&lt;code&gt;.npy&lt;/code&gt;.然后可以使用&lt;code&gt;np.load()&lt;/code&gt;函数load.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;np.load(&amp;#39;some_array.npy&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python pandas包总结</title>
      <link>/post/2019-11-23-python-pandas-summary/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-23-python-pandas-summary/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装pandas&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;code&gt;pandas&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pandas数据结构介绍&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Pandas数据结构介绍&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#series&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dataframe数据框&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; DataFrame(数据框)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#数据框的索引和切片操作&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2.1&lt;/span&gt; 数据框的索引和切片操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#索引index对象&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; 索引(index)对象&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#index-as-immutable-array&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.1&lt;/span&gt; Index as immutable array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#index作为一个有顺序的set&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3.2&lt;/span&gt; index作为一个有顺序的set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#索引和选择&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; 索引和选择&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#series中的数据选择&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; Series中的数据选择&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#series作为字典&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1.1&lt;/span&gt; series作为字典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#series作为一维的array&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1.2&lt;/span&gt; series作为一维的array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#索引器indexerslociloc和ix&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1.3&lt;/span&gt; 索引器(indexers):&lt;code&gt;loc&lt;/code&gt;,&lt;code&gt;iloc&lt;/code&gt;和&lt;code&gt;ix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#数据框中的数据选择&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2&lt;/span&gt; 数据框中的数据选择&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#将数据库看作字典&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.1&lt;/span&gt; 将数据库看作字典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#将数据框作为二维的array&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.2&lt;/span&gt; 将数据框作为二维的array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pandas中的数据操作&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; Pandas中的数据操作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#index-alignment-in-series&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.1&lt;/span&gt; Index alignment in Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#index-alignment-in-dataframe&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2&lt;/span&gt; Index alignment in DataFrame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#数据框和series之间的操作&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.3&lt;/span&gt; 数据框和series之间的操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#导入数据&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; 导入数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;numpy和pandas是使用python进行数据分析的两个基本工具。numpy在线性代数中运用较多，而pandas则更多的用来分析表结构的数据。numpy与pandas都有一维和二维数据结构。&lt;/p&gt;
&lt;div id=&#34;安装pandas&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;code&gt;pandas&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;使用&lt;code&gt;pip&lt;/code&gt;可以快速的安装&lt;code&gt;pandas&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;在终端进行操作.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install pandas&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pandas as pd&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要同时安装&lt;code&gt;numpy&lt;/code&gt;包.&lt;/p&gt;
&lt;p&gt;而已查看每个包的版本.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;pd.__version__&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;0.24.2&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pandas数据结构介绍&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Pandas数据结构介绍&lt;/h1&gt;
&lt;div id=&#34;series&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; series&lt;/h2&gt;
&lt;p&gt;series是一维数组,类似于R中的向量.可以使用&lt;code&gt;Series()&lt;/code&gt;函数构建.可以将列表或者字典转变为series.在字典中,键是没有顺序的,但是转变为series之后,就是有顺序的了.不仅可以按照名字来索引,也可以按照顺序来索引了.这样跟R中的向量更加类似了.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data = pd.Series([1,2,3,4])
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0    1
## 1    2
## 2    3
## 3    4
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;population_dict = {&amp;#39;California&amp;#39;: 38332521,
&amp;#39;Texas&amp;#39;: 26448193,
&amp;#39;New York&amp;#39;: 19651127,
&amp;#39;Florida&amp;#39;: 19552860,
&amp;#39;Illinois&amp;#39;: 12882135}
data3 = pd.Series(population_dict)
data3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    38332521
## Texas         26448193
## New York      19651127
## Florida       19552860
## Illinois      12882135
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data3[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 38332521&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;他是自带索引的.第一“列”是索引,第二列是value.分别都是他的属性.因此可以访问.&lt;/p&gt;
&lt;p&gt;默认的索引是数字索引,从0开始,当然也可以自定义索引.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data2 = pd.Series([0,1,2,3], index=[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;])
data2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a    0
## b    1
## c    2
## d    3
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;index = data.index
value = data.values
index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## RangeIndex(start=0, stop=4, step=1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([1, 2, 3, 4], dtype=int64)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(index)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.indexes.range.RangeIndex&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;numpy.ndarray&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;跟R中的向量一样,可以通过中括号,来索引,切片series.对于索引为文字的,还支持文字连续索引.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1    2
## 2    3
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data2[&amp;#39;a&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data3[&amp;#39;California&amp;#39;:&amp;#39;Illinois&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    38332521
## Texas         26448193
## New York      19651127
## Florida       19552860
## Illinois      12882135
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dataframe数据框&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; DataFrame(数据框)&lt;/h2&gt;
&lt;p&gt;数据框就跟R中的数据框或者说matrix就更像了.是二维数据.&lt;/p&gt;
&lt;p&gt;创建数据框.可以从字典转变而来.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;area_dict = {&amp;#39;California&amp;#39;: 423967, &amp;#39;Texas&amp;#39;: 695662, &amp;#39;New York&amp;#39;: 141297,
&amp;#39;Florida&amp;#39;: 170312, &amp;#39;Illinois&amp;#39;: 149995}
area = pd.Series(area_dict)
area&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    423967
## Texas         695662
## New York      141297
## Florida       170312
## Illinois      149995
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    38332521
## Texas         26448193
## New York      19651127
## Florida       19552860
## Illinois      12882135
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;area&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    423967
## Texas         695662
## New York      141297
## Florida       170312
## Illinois      149995
## dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(data3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.series.Series&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(area)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.series.Series&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states = pd.DataFrame({&amp;#39;population&amp;#39;: data3,
&amp;#39;area&amp;#39;: area})

states&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             population    area
## California    38332521  423967
## Texas         26448193  695662
## New York      19651127  141297
## Florida       19552860  170312
## Illinois      12882135  149995&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是一个两列的数据框,其中列名就是原来字典的键.&lt;/p&gt;
&lt;p&gt;数据框也有index和value属性.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Index([&amp;#39;California&amp;#39;, &amp;#39;Texas&amp;#39;, &amp;#39;New York&amp;#39;, &amp;#39;Florida&amp;#39;, &amp;#39;Illinois&amp;#39;], dtype=&amp;#39;object&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.values&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[38332521,   423967],
##        [26448193,   695662],
##        [19651127,   141297],
##        [19552860,   170312],
##        [12882135,   149995]], dtype=int64)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.columns&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Index([&amp;#39;population&amp;#39;, &amp;#39;area&amp;#39;], dtype=&amp;#39;object&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;columns&lt;/code&gt;属性可以看作是数据框的列名,而&lt;code&gt;index&lt;/code&gt;属性可以看作是其行名.&lt;/p&gt;
&lt;div id=&#34;数据框的索引和切片操作&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2.1&lt;/span&gt; 数据框的索引和切片操作&lt;/h3&gt;
&lt;p&gt;如何对数据框进行索引和操作呢?&lt;/p&gt;
&lt;p&gt;取出数据框的行.&lt;/p&gt;
&lt;p&gt;直接用中括号然后用数字加冒号即可.和python其他部分一样,包括左半部分,不包括右半部分.取出行之后,还是一个数据框.不会存在降维.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states[0:1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             population    area
## California    38332521  423967&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states[0:2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             population    area
## California    38332521  423967
## Texas         26448193  695662&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(states[0:1])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;取出数据框的列.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states[&amp;quot;area&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    423967
## Texas         695662
## New York      141297
## Florida       170312
## Illinois      149995
## Name: area, dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(states[&amp;quot;area&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.series.Series&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果取出某一列,需要使用列名进行提取,并且提取之后,直接降维,变成了series.&lt;/p&gt;
&lt;p&gt;跟为复杂的切片操作,需要使用数据框的属性,&lt;code&gt;loc&lt;/code&gt;和&lt;code&gt;iloc&lt;/code&gt;.
&lt;code&gt;loc&lt;/code&gt;和&lt;code&gt;iloc&lt;/code&gt;的不同在于前者用列名和行名来进行切片和索引,而后者则使用index.
&lt;code&gt;loc&lt;/code&gt;后面需要跟着中括号,然后第一个参数用来描述.&lt;/p&gt;
&lt;p&gt;如果只选择一行或者一列,或者是连续的切片(中间用冒号),是可以不写为列表格式,但是如果是多个话,需要用列表形式.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.loc&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;pandas.core.indexing._LocIndexer object at 0x00000000521F5318&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.loc[&amp;quot;California&amp;quot;, [&amp;quot;area&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## area    423967
## Name: California, dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(states.loc[&amp;quot;California&amp;quot;, [&amp;quot;area&amp;quot;]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.series.Series&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.loc[&amp;quot;California&amp;quot;:&amp;quot;Texas&amp;quot;, [&amp;quot;area&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               area
## California  423967
## Texas       695662&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(states.loc[&amp;quot;California&amp;quot;:&amp;quot;Texas&amp;quot;, [&amp;quot;area&amp;quot;]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.iloc&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;pandas.core.indexing._iLocIndexer object at 0x00000000533D84A8&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.iloc[0,0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 38332521&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(states.iloc[0,0])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;numpy.int64&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.iloc[0:1,0:1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             population
## California    38332521&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;states.iloc[[0,2],[0,1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             population    area
## California    38332521  423967
## New York      19651127  141297&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(states.iloc[[0,2],[0,1]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;索引index对象&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; 索引(index)对象&lt;/h2&gt;
&lt;p&gt;series和数据框格式都有一个index对象,用来指示数据,对于数据框来说其实是行名.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;ind = pd.Index([2, 3, 5, 7, 11])
ind&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Int64Index([2, 3, 5, 7, 11], dtype=&amp;#39;int64&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(ind)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.indexes.numeric.Int64Index&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;index-as-immutable-array&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.1&lt;/span&gt; Index as immutable array&lt;/h3&gt;
&lt;p&gt;索引对象可以像一个array一样操作.比如索引和切片.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;ind&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Int64Index([2, 3, 5, 7, 11], dtype=&amp;#39;int64&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;ind[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;ind[:2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Int64Index([2, 3], dtype=&amp;#39;int64&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;index对象还有很多array的属性.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(ind.size, ind.shape, ind.ndim, ind.dtype)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 5 (5,) 1 int64&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中&lt;code&gt;ndim&lt;/code&gt;可以用来看数据框的行数和列数.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是index对象的值不能够改变.&lt;/strong&gt;这一点跟array是不同的.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;index作为一个有顺序的set&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3.2&lt;/span&gt; index作为一个有顺序的set&lt;/h3&gt;
&lt;p&gt;index对象很多时候跟python内置的&lt;code&gt;set&lt;/code&gt;对象很类似.可以做并集,交集以及查找不同等操作.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;indA = pd.Index([1, 3, 5, 7, 9])
indB = pd.Index([2, 3, 5, 7, 11])
indA &amp;amp; indB # 交集&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Int64Index([3, 5, 7], dtype=&amp;#39;int64&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;indA | indB # 并集&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Int64Index([1, 2, 3, 5, 7, 9, 11], dtype=&amp;#39;int64&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;indA ^ indB # 两个集合中互不相同的部分&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Int64Index([1, 2, 9, 11], dtype=&amp;#39;int64&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;索引和选择&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; 索引和选择&lt;/h1&gt;
&lt;p&gt;对pandas中的series和数据框数据做索引和选择.上面简单介绍一些,这里做详细的系统介绍.比如索引(indexing),切片(slcing),筛选(masking)等.&lt;/p&gt;
&lt;div id=&#34;series中的数据选择&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; Series中的数据选择&lt;/h2&gt;
&lt;p&gt;series跟python内置的字典非常的类似.也跟Numpy中的array非常像.&lt;/p&gt;
&lt;div id=&#34;series作为字典&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1.1&lt;/span&gt; series作为字典&lt;/h3&gt;
&lt;p&gt;可以使用&lt;code&gt;键&lt;/code&gt;进行选择.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pandas as pd
data = pd.Series([0.25, 0.5, 0.75, 1.0],
index=[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;])

data[&amp;quot;a&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0.25&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然其他的一些操作也可以用于series.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;a&amp;#39; in data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.keys()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Index([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;], dtype=&amp;#39;object&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(data.items())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [(&amp;#39;a&amp;#39;, 0.25), (&amp;#39;b&amp;#39;, 0.5), (&amp;#39;c&amp;#39;, 0.75), (&amp;#39;d&amp;#39;, 1.0)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[&amp;quot;e&amp;quot;] = 1.25
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a    0.25
## b    0.50
## c    0.75
## d    1.00
## e    1.25
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;series作为一维的array&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1.2&lt;/span&gt; series作为一维的array&lt;/h3&gt;
&lt;p&gt;可以按照array的办法对series进行切片.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[&amp;#39;a&amp;#39;:&amp;#39;c&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a    0.25
## b    0.50
## c    0.75
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[0:2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a    0.25
## b    0.50
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data &amp;gt; 0.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a    False
## b     True
## c     True
## d     True
## e     True
## dtype: bool&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data &amp;lt; 0.8&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a     True
## b     True
## c     True
## d    False
## e    False
## dtype: bool&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data + 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a    1.25
## b    1.50
## c    1.75
## d    2.00
## e    2.25
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[(data &amp;gt; 0.3) &amp;amp; (data &amp;lt; 0.8)]
##不连续切片&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## b    0.50
## c    0.75
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[[&amp;#39;a&amp;#39;, &amp;#39;e&amp;#39;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a    0.25
## e    1.25
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;需要注意的是,如果使用&lt;code&gt;键&lt;/code&gt;进行切片操作,最后一个是包括在最终结果中的,而如果使用数字位置进行切片,最后不包括在结果中&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;索引器indexerslociloc和ix&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1.3&lt;/span&gt; 索引器(indexers):&lt;code&gt;loc&lt;/code&gt;,&lt;code&gt;iloc&lt;/code&gt;和&lt;code&gt;ix&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;series中有一点需要注意的是,也是比较让人困惑的是,如果index是数字,那么索引的时候,给出数字,是按照index名字进行索引的,但是如果使用数字切片,则是按照位置进行的.举个例子:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data = pd.Series([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;], index=[1, 3, 5])
data
# explicit index when indexing&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1    a
## 3    b
## 5    c
## dtype: object&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;a&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3    b
## 5    c
## dtype: object&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了避免在选取数据时造成误差,所以series也提供了属性:索引器来进行切片.&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;loc&lt;/code&gt;属性,里面都是按照index名字来索引的,不是位置.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.loc[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;a&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.loc[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1    a
## 3    b
## dtype: object&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.loc[[1,3]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1    a
## 3    b
## dtype: object&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于&lt;code&gt;iloc&lt;/code&gt;属性,则里面都是按照位置来进行索引和切片的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.iloc[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;b&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.iloc[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3    b
## 5    c
## dtype: object&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第三个属性,&lt;code&gt;ix&lt;/code&gt;,他是上面两种属性的混合,对于series对象来说,&lt;code&gt;idx&lt;/code&gt;属性是和&lt;code&gt;iloc&lt;/code&gt;一样的,他主要是用于数据框对象的.&lt;/p&gt;
&lt;p&gt;python推荐大家还是使用名字进行索引和切片(explicit is better than implicit).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;数据框中的数据选择&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; 数据框中的数据选择&lt;/h2&gt;
&lt;p&gt;大多数情况下,数据框更像是一个二维的array,有时候也可以看作是字典.&lt;/p&gt;
&lt;div id=&#34;将数据库看作字典&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.1&lt;/span&gt; 将数据库看作字典&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;area = pd.Series({&amp;#39;California&amp;#39;: 423967, &amp;#39;Texas&amp;#39;: 695662,
&amp;#39;New York&amp;#39;: 141297, &amp;#39;Florida&amp;#39;: 170312,
&amp;#39;Illinois&amp;#39;: 149995})
pop = pd.Series({&amp;#39;California&amp;#39;: 38332521, &amp;#39;Texas&amp;#39;: 26448193,
&amp;#39;New York&amp;#39;: 19651127, &amp;#39;Florida&amp;#39;: 19552860,
&amp;#39;Illinois&amp;#39;: 12882135})
data = pd.DataFrame({&amp;#39;area&amp;#39;:area, &amp;#39;pop&amp;#39;:pop})
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               area       pop
## California  423967  38332521
## Texas       695662  26448193
## New York    141297  19651127
## Florida     170312  19552860
## Illinois    149995  12882135&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.ndim&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.columns&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Index([&amp;#39;area&amp;#39;, &amp;#39;pop&amp;#39;], dtype=&amp;#39;object&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Index([&amp;#39;California&amp;#39;, &amp;#39;Texas&amp;#39;, &amp;#39;New York&amp;#39;, &amp;#39;Florida&amp;#39;, &amp;#39;Illinois&amp;#39;], dtype=&amp;#39;object&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以直接使用列名来获得某一列.得到的是series对象.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[&amp;#39;area&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    423967
## Texas         695662
## New York      141297
## Florida       170312
## Illinois      149995
## Name: area, dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(data[&amp;#39;area&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.series.Series&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可以使用属性格式(attribute-style)格式来获得某列.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.area&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    423967
## Texas         695662
## New York      141297
## Florida       170312
## Illinois      149995
## Name: area, dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(data.area)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.series.Series&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到的也是series对象.&lt;/p&gt;
&lt;p&gt;两者得到的是完全一样的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.area is data[&amp;#39;area&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是这种方法还是不太好,比如:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;列名不是string,而是数字.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;列名和数据框自带方法或者属性重名.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果列名和方法有冲突,那么使用&lt;code&gt;.&lt;/code&gt;得到的就是方法而不是列.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.pop is data[&amp;#39;pop&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[&amp;#39;density&amp;#39;] = data[&amp;#39;pop&amp;#39;] / data[&amp;#39;area&amp;#39;]
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               area       pop     density
## California  423967  38332521   90.413926
## Texas       695662  26448193   38.018740
## New York    141297  19651127  139.076746
## Florida     170312  19552860  114.806121
## Illinois    149995  12882135   85.883763&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;将数据框作为二维的array&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.2&lt;/span&gt; 将数据框作为二维的array&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.values&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[4.23967000e+05, 3.83325210e+07, 9.04139261e+01],
##        [6.95662000e+05, 2.64481930e+07, 3.80187404e+01],
##        [1.41297000e+05, 1.96511270e+07, 1.39076746e+02],
##        [1.70312000e+05, 1.95528600e+07, 1.14806121e+02],
##        [1.49995000e+05, 1.28821350e+07, 8.58837628e+01]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以对数据框进行类似于array的操作,比如倒置:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.T&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            California         Texas      New York       Florida      Illinois
## area     4.239670e+05  6.956620e+05  1.412970e+05  1.703120e+05  1.499950e+05
## pop      3.833252e+07  2.644819e+07  1.965113e+07  1.955286e+07  1.288214e+07
## density  9.041393e+01  3.801874e+01  1.390767e+02  1.148061e+02  8.588376e+01&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;T&lt;/code&gt;是一个属性,而不是方法,所以后面不需要使用括号.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.values[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([4.23967000e+05, 3.83325210e+07, 9.04139261e+01])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(data.values[0])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;numpy.ndarray&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data[&amp;#39;area&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    423967
## Texas         695662
## New York      141297
## Florida       170312
## Illinois      149995
## Name: area, dtype: int64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(data[&amp;#39;area&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;pandas.core.series.Series&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还是使用&lt;code&gt;loc&lt;/code&gt;,&lt;code&gt;iloc&lt;/code&gt;和&lt;code&gt;ix&lt;/code&gt;属性进行选择更加高校.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.iloc[:3, :2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               area       pop
## California  423967  38332521
## Texas       695662  26448193
## New York    141297  19651127&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.loc[:&amp;#39;Illinois&amp;#39;, :&amp;#39;pop&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               area       pop
## California  423967  38332521
## Texas       695662  26448193
## New York    141297  19651127
## Florida     170312  19552860
## Illinois    149995  12882135&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ix&lt;/code&gt;属性允许进行混合切片,也就是列和行分别使用数字位置和名字进行切片.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.ix[:3, :&amp;#39;pop&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               area       pop
## California  423967  38332521
## Texas       695662  26448193
## New York    141297  19651127
## 
## D:\software\python\python.exe:1: DeprecationWarning: 
## .ix is deprecated. Please use
## .loc for label based indexing or
## .iloc for positional indexing
## 
## See the documentation here:
## http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.density&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California     90.413926
## Texas          38.018740
## New York      139.076746
## Florida       114.806121
## Illinois       85.883763
## Name: density, dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.density &amp;gt; 100&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## California    False
## Texas         False
## New York       True
## Florida        True
## Illinois      False
## Name: density, dtype: bool&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.loc[data.density &amp;gt; 100, [&amp;#39;pop&amp;#39;, &amp;#39;density&amp;#39;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                pop     density
## New York  19651127  139.076746
## Florida   19552860  114.806121&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以修改数据框.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data.iloc[0, 2] = 90
data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               area       pop     density
## California  423967  38332521   90.000000
## Texas       695662  26448193   38.018740
## New York    141297  19651127  139.076746
## Florida     170312  19552860  114.806121
## Illinois    149995  12882135   85.883763&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;pandas中的数据操作&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; Pandas中的数据操作&lt;/h1&gt;
&lt;div id=&#34;index-alignment-in-series&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; Index alignment in Series&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
import pandas as pd
area = pd.Series({&amp;#39;Alaska&amp;#39;: 1723337, &amp;#39;Texas&amp;#39;: 695662,
&amp;#39;California&amp;#39;: 423967}, name=&amp;#39;area&amp;#39;)
population = pd.Series({&amp;#39;California&amp;#39;: 38332521, &amp;#39;Texas&amp;#39;: 26448193,
&amp;#39;New York&amp;#39;: 19651127}, name=&amp;#39;population&amp;#39;)
population / area&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Alaska              NaN
## California    90.413926
## New York            NaN
## Texas         38.018740
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;area.index | population.index&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Index([&amp;#39;Alaska&amp;#39;, &amp;#39;California&amp;#39;, &amp;#39;New York&amp;#39;, &amp;#39;Texas&amp;#39;], dtype=&amp;#39;object&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;series还可以相加.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = pd.Series([2, 4, 6], index=[0, 1, 2])
B = pd.Series([1, 3, 5], index=[1, 2, 3])
A + B&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0    NaN
## 1    5.0
## 2    9.0
## 3    NaN
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相加的时候,按照名字相同的进行加法运算,如果只有其中一方有,那么会返回0值.&lt;/p&gt;
&lt;p&gt;还可以使用方法来代替运算符.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A.add(B, fill_value=0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0    2.0
## 1    5.0
## 2    9.0
## 3    5.0
## dtype: float64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;index-alignment-in-dataframe&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; Index alignment in DataFrame&lt;/h2&gt;
&lt;p&gt;同样的,数据框也可以相加,按照行名和列名.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;rng = np.random.RandomState(42)
ser = pd.Series(rng.randint(0, 10, 4))
A = pd.DataFrame(rng.randint(0, 20, (2, 2)),
columns=list(&amp;#39;AB&amp;#39;))
A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     A   B
## 0   6  18
## 1  10  10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;B = pd.DataFrame(rng.randint(0, 10, (3, 3)),
columns=list(&amp;#39;BAC&amp;#39;))
B&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    B  A  C
## 0  7  4  3
## 1  7  7  2
## 2  5  4  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A + B&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       A     B   C
## 0  10.0  25.0 NaN
## 1  17.0  17.0 NaN
## 2   NaN   NaN NaN&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同样可以使用&lt;code&gt;add&lt;/code&gt;方法.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A.stack()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0  A     6
##    B    18
## 1  A    10
##    B    10
## dtype: int32&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     A   B
## 0   6  18
## 1  10  10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;fill = A.stack().mean()
fill&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 11.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A.add(B, fill_value=fill)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       A     B     C
## 0  10.0  25.0  14.0
## 1  17.0  17.0  13.0
## 2  15.0  16.0  12.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;lists Python operators and their equivalent Pandas object methods&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Python operator&lt;/th&gt;
&lt;th&gt;Pandas method(s)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;add()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;sub(), subtract()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;mul(), multiply()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;truediv(), div(), divide()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;floordiv()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;mod()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;pow()&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;数据框和series之间的操作&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.3&lt;/span&gt; 数据框和series之间的操作&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A = rng.randint(10, size=(3, 4))
A&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[7, 5, 1, 4],
##        [0, 9, 5, 8],
##        [0, 9, 2, 6]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(A)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;numpy.ndarray&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([7, 5, 1, 4])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;A - A[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## array([[ 0,  0,  0,  0],
##        [-7,  4,  4,  4],
##        [-7,  4,  1,  2]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;df = pd.DataFrame(A, columns=list(&amp;#39;QRST&amp;#39;))
df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Q  R  S  T
## 0  7  5  1  4
## 1  0  9  5  8
## 2  0  9  2  6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;df.iloc[0]##第一行&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Q    7
## R    5
## S    1
## T    4
## Name: 0, dtype: int32&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;df - df.iloc[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Q  R  S  T
## 0  0  0  0  0
## 1 -7  4  4  4
## 2 -7  4  1  2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;导入数据&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; 导入数据&lt;/h1&gt;
&lt;p&gt;和R类似,可以使用pandas读取不同格式的本地的数据.函数总结如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;read_csv()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从CSV文件导入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;pd.read_table(filename)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从限定分隔符的文本文件导入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;pd.read_excel(filename)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从Excel文件导入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;pd.read_sql(query, connection_object)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从SQL表/库导入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;pd.read_json(json_string)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从JSON格式的字符串导入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;pd.read_html(url)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;解析URL、字符串或者HTML文件，抽取其中的tables表格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;pd.read_clipboard()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从你的粘贴板获取内容，并传给read_table()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;pd.DataFrame(dict)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从字典对象导入数据，Key是列名，Value是数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;和R中函数一样,如果想要知道每个函数的所有参数及含义,可以使用&lt;code&gt;help()&lt;/code&gt;函数来获得.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import os as os
os.getcwd()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;D:\\my github\\shen\\content\\en\\post\\2019-11-23-python-pandas-summary&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = {&amp;quot;a&amp;quot;:1, &amp;quot;b&amp;quot;:2}
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test2 = pd.DataFrame(test, index = [1,2])
# help(pd.DataFrame)
test2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    a  b
## 1  1  2
## 2  1  2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python中如何创建自定义对象</title>
      <link>/post/2019-11-23-python-object/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-23-python-object/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#对象&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 对象&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#多态polymorphism&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 多态(polymorphism)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#多态和方法&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; 多态和方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#封装encapsulation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; 封装(encapsulation)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#继承&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4&lt;/span&gt; 继承&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#类&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#类到底是什么&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; 类到底是什么?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建自定义类&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; 创建自定义类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#属性函数和方法&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; 属性,函数和方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#隐藏&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4&lt;/span&gt; 隐藏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#类的命名空间&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.5&lt;/span&gt; 类的命名空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#指定超类&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.6&lt;/span&gt; 指定超类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#深入探讨继承&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.7&lt;/span&gt; 深入探讨继承&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;在本文中，学习如何创建对象，还将学习多态、封装、方法、属性、超类和继承。&lt;/p&gt;
&lt;div id=&#34;对象&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 对象&lt;/h1&gt;
&lt;p&gt;对象大致意味着一系列数据（属性）以及一套访问和操作这些数据的方法。使用对象而非全局变量和函数的原因有多个，下面列出了使用对象的最重要的好处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;多态&lt;/strong&gt;:可对不同类型的对象执行相同的操作，而这些操作就像“被施了魔法”一样能够正常运行。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;封装&lt;/strong&gt;:对外部隐藏有关对象工作原理的细节。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;继承&lt;/strong&gt;:可基于通用类创建出专用类。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;多态polymorphism&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 多态(polymorphism)&lt;/h2&gt;
&lt;p&gt;这大致意味着即便你不知道变量指向的是哪种对象，也能够对其执行操作，且操作的行为将随对象所属的类型（类）而异。这跟R中的对象是一致的,比如通用函数&lt;code&gt;plot()&lt;/code&gt;可以对多种不同种类的对象进行操作.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;多态和方法&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; 多态和方法&lt;/h2&gt;
&lt;p&gt;与对象属性相关联的函数称为方法.比如对于字符串,列表和字典都有很多饭囊发.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;abc&amp;#39;.count(&amp;#39;a&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[1, 2, &amp;#39;a&amp;#39;].count(&amp;#39;a&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方法&lt;code&gt;count&lt;/code&gt;既可以用用于字符串对象,也可以用于列表对象.&lt;/p&gt;
&lt;p&gt;同样的,如果我们创建了一个包含&lt;code&gt;count&lt;/code&gt;方法的对象,我们也可以像字符串和列表一样使用&lt;code&gt;count&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;还有,比如运算符&lt;code&gt;+&lt;/code&gt;,既可以用于整数也可以用于字符串.另外像函数&lt;code&gt;len()&lt;/code&gt;,也都可以用于不同的对象.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新的函数: &lt;code&gt;repr&lt;/code&gt;: 将对象转换为供解释器读取的形式.参考下面连接:&lt;a href=&#34;https://www.runoob.com/python/python-func-repr.html&#34; class=&#34;uri&#34;&gt;https://www.runoob.com/python/python-func-repr.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;封装encapsulation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; 封装(encapsulation)&lt;/h2&gt;
&lt;p&gt;封装（encapsulation）指的是向外部隐藏不必要的细节。&lt;/p&gt;
&lt;p&gt;一个简单的例子:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;o = OpenObject() # 对象就是这样创建的
o.set_name(&amp;#39;Sir Lancelot&amp;#39;)
o.get_name()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如何将名称“封装”在对象中呢？没问题，将其作为一个属性即可。属性是归属于对象的变量，就像方法一样。实际上，方法差不多就是与函数相关联的属性.&lt;/p&gt;
&lt;p&gt;对象的方法可能修改这些属性，因此对象将一系列函数（方法）组合起来，并赋予它们访问一些变量（属性）的权限，而属性可用于在两次函数调用之间存储值。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;继承&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; 继承&lt;/h2&gt;
&lt;p&gt;如果你已经有了一个类，并要创建一个与之很像的类（可能只是新增了几个方法），该如何办呢？创建这个新类时，你不想复制旧类的代码，将其粘贴到新类中。&lt;/p&gt;
&lt;p&gt;例如，你可能已经有了一个名为Shape的类，它知道如何将自己绘制到屏幕上。现在你想创建一个名为Rectangle的类，但它不仅知道如何将自己绘制到屏幕上，而且还知道如何计算其面积。你不想重新编写方法draw，因为Shape已经有一个这样的方法，且效果很好。那么该如何办呢？让Rectangle继承Shape的方法，使得对Rectangle对象调用方法draw时，将自动调用Shape类的这个方法.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;类&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 类&lt;/h1&gt;
&lt;div id=&#34;类到底是什么&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; 类到底是什么?&lt;/h2&gt;
&lt;p&gt;本书前面反复提到了类，并将其用作类型的同义词。从很多方面来说，这正是类的定义–一种对象。每个对象都属于特定的类，并被称为该类的实例。&lt;/p&gt;
&lt;p&gt;例如，如果你在窗外看到一只鸟，这只鸟就是“鸟类”的一个实例。鸟类是一个非常通用（抽象）的类，它有多个子类：你看到的那只鸟可能属于子类“云雀”。你可将“鸟类”视为由所有鸟组成的集合，而“云雀”是其一个子集。一个类的对象为另一个类的对象的子集时，前者就是后者的子类。因此“云雀”为“鸟类”的子类，而“鸟类”为“云雀”的超类。&lt;/p&gt;
&lt;p&gt;通过这样的陈述，子类和超类就很容易理解。但在面向对象编程中，子类关系意味深长，因为类是由其支持的方法定义的。类的所有实例都有该类的所有方法，因此子类的所有实例都有超类的所有方法。有鉴于此，要定义子类，只需定义多出来的方法（还可能重写一些既有的方法）。
例如，Bird类可能提供方法fly，而Penguin类（Bird的一个子类）可能新增方法eat_fish。创建Penguin类时，你还可能想重写超类的方法，即方法fly。鉴于企鹅不能飞，因此在Penguin的实例中，方法fly应什么都不做或引发异常（参见第8章）。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;创建自定义类&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; 创建自定义类&lt;/h2&gt;
&lt;p&gt;一个简单的例子.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;__metaclass__ = type # 如果你使用的是Python 2，请包含这行代码
class Person:
  def set_name(self, name):
    self.name = name
  def get_name(self):
    return self.name
  def greet(self):
    print(&amp;quot;Hello, world! I&amp;#39;m {}.&amp;quot;.format(self.name))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个示例包含三个方法定义，它们类似于函数定义，但位于class语句内。Person当然是类的名称.使用&lt;code&gt;class&lt;/code&gt;语句来创建自定义类,并且创建了独立的命名空间,用于在其中定义函数.&lt;/p&gt;
&lt;p&gt;那么参数&lt;code&gt;self&lt;/code&gt;是什么呢?他指向对象本身.那么那个是对象呢?&lt;/p&gt;
&lt;p&gt;下面通过创建两个实例来说明这一点.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;foo = Person()
bar = Person()
foo.set_name(&amp;#39;Luke Skywalker&amp;#39;)
bar.set_name(&amp;#39;Anakin Skywalker&amp;#39;)
foo.greet()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Hello, world! I&amp;#39;m Luke Skywalker.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;bar.greet()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Hello, world! I&amp;#39;m Anakin Skywalker.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对foo调用set_name和greet时，foo都会作为第一个参数自动传递给它们。我将这个参数命名为self，这非常贴切。实际上，可以随便给这个
参数命名，但鉴于它总是指向对象本身，因此习惯上将其命名为self。&lt;/p&gt;
&lt;p&gt;显然，self很有用，甚至必不可少。如果没有它，所有的方法都无法访问对象本身——要操作的属性所属的对象。与以前一样，也可以从外部访问这些属性。&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;foo.name&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Luke Skywalker&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;bar.name&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Anakin Skywalker&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;属性函数和方法&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; 属性,函数和方法&lt;/h2&gt;
&lt;p&gt;实际上，&lt;strong&gt;方法和函数的区别表现在前一节提到的参数self上&lt;/strong&gt;。方法（更准确地说是关联的方法）将其第一个参数关联到它所属的实例，因此无需提供这个参数。无疑可以将属性关联到一个普通函数，但这样就没有特殊的self参数了。&lt;/p&gt;
&lt;p&gt;我们再看一个简单的例子:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;class Class:
  def method(self):
    print(&amp;#39;I have a self!&amp;#39;)

def function():
  print(&amp;quot;I don&amp;#39;t...&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们首先创建了一个叫做&lt;code&gt;Class&lt;/code&gt;的类,然后给其创建了一个叫做&lt;code&gt;method&lt;/code&gt;的方法.另外,我们还创建了一个函数,叫做&lt;code&gt;function&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;instance = Class()
instance.method()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## I have a self!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后创建一个该类的实例,然后调用&lt;code&gt;method&lt;/code&gt;方法.&lt;/p&gt;
&lt;p&gt;我们还可以把该实例的方法修改为另外的方法.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;instance.method = function
instance.method()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## I don&amp;#39;t...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;隐藏&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4&lt;/span&gt; 隐藏&lt;/h2&gt;
&lt;p&gt;默认情况下，可从外部访问对象的属性.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;class Bird:
  name = &amp;#39;Bird&amp;#39;
  song = &amp;#39;Squaawk!&amp;#39;
  def sing(self):
    print(self.song)


test = Bird()    
test.name&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Bird&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test.song&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Squaawk!&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,在class下面,可以通过上面的方式来定义类的属性.那么如何将类的属性定义为&lt;strong&gt;私有&lt;/strong&gt;,从而在外部无法访问呢?私有属性不能从对象外部访问，而只能通过存取器方法（如get_name和set_name）来访问。&lt;/p&gt;
&lt;p&gt;要让方法或属性成为私有的（不能从外部访问），只需让其名称以两个下划线打头即可。&lt;/p&gt;
&lt;p&gt;举个简单例子:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;class Secretive:
  def __inaccessible(self):
    print(&amp;quot;Bet you can&amp;#39;t see me ...&amp;quot;)
  def accessible(self):
    print(&amp;quot;The secret message is:&amp;quot;)
    self.__inaccessible()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在从外部不能访问&lt;code&gt;__inaccessible&lt;/code&gt;，但在类中（如&lt;code&gt;accessible&lt;/code&gt;中）依然可以使用它。&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;s = Secretive()
s.accessible()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The secret message is:
## Bet you can&amp;#39;t see me ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;s._Secretive__inaccessible()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Bet you can&amp;#39;t see me ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总之，你无法禁止别人访问对象的私有方法和属性，但这种名称修改方式发出了强烈的信号，让他们不要这样做。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;类的命名空间&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.5&lt;/span&gt; 类的命名空间&lt;/h2&gt;
&lt;p&gt;下面两条语句大致等价：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def foo(x): return x * x
foo = lambda x: x * x&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;它们都创建一个返回参数平方的函数，并将这个函数关联到变量foo。可以在全局（模块）作用域内定义名称foo，也可以在函数或方法内定义。定义类时情况亦如此：在class语句中定义的代码都是在一个特殊的命名空间（类的命名空间）内执行的，而类的所有成员都可访问这个命
名空间。类定义其实就是要执行的代码段，并非所有的Python程序员都知道这一点，但知道这一点很有帮助。&lt;/p&gt;
&lt;p&gt;每个实例都可访问这个类作用域内的变量，就像方法一样。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;指定超类&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.6&lt;/span&gt; 指定超类&lt;/h2&gt;
&lt;p&gt;本章前面讨论过，子类扩展了超类的定义。要指定超类，可在class语句中的类名后加上超类名，并将其用圆括号括起。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Filter:
  def init(self):
    self.blocked = []
  def filter(self, sequence):
    return [x for x in sequence if x not in self.blocked]

class SPAMFilter(Filter): # SPAMFilter是Filter的子类
  def init(self): # 重写超类Filter的方法init
    self.blocked = [&amp;#39;SPAM&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;深入探讨继承&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.7&lt;/span&gt; 深入探讨继承&lt;/h2&gt;
&lt;p&gt;要确定一个类是否是另一个类的子类，可使用内置函数&lt;code&gt;issubclass&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你有一个类，并想知道它的基类，可访问其特殊属性&lt;code&gt;__bases__&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同样，要确定对象是否是特定类的实例，可使用&lt;code&gt;isinstance&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你要获悉对象属于哪个类，可使用属性&lt;code&gt;__class__&lt;/code&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python中如何创建函数</title>
      <link>/post/2019-11-22-python-function/</link>
      <pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-22-python-function/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#自定义函数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 自定义函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#给函数编写文档&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 给函数编写文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#作用域&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; 作用域&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#关键字参数和默认值&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; 关键字参数和默认值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#收集参数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4&lt;/span&gt; 收集参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#分配参数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.5&lt;/span&gt; 分配参数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#作用域-1&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 作用域&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#函数式编程&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; 函数式编程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#lambda表达式&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; lambda表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#redunce函数会对参数序列中元素进行累积&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2&lt;/span&gt; &lt;code&gt;redunce()&lt;/code&gt;函数会对参数序列中元素进行累积。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#总结&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; 总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;自定义函数&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 自定义函数&lt;/h1&gt;
&lt;p&gt;Python中使用&lt;code&gt;def&lt;/code&gt;语句来创建自定义函数.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def hello(name):
  print(&amp;quot;hello&amp;quot;, name)
#hello()  
hello(&amp;quot;shenxiaotao&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## hello shenxiaotao&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;和R一样,可以给参数默认值.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def hello(name = &amp;quot;xiaotao&amp;quot;):
  print(&amp;quot;hello&amp;quot;, name)
#hello()  
hello()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## hello xiaotao&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;给函数编写文档&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 给函数编写文档&lt;/h2&gt;
&lt;p&gt;在&lt;code&gt;def&lt;/code&gt;语句后面,就可以添加该函数的文档说明.称之为&lt;strong&gt;文档字符串&lt;/strong&gt;(docstring).&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def square(x):
  &amp;#39;Calculates the square of the number x.&amp;#39;
  return x * x&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文档字符串如果只有一行,可以使用引号括起来,如果有多行,需要使用三引号括起来.&lt;/p&gt;
&lt;p&gt;通过下列语句访问文档字符串.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;square.__doc__&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Calculates the square of the number x.&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;_doc_&lt;/code&gt;其实时函数一个方法.双下划线代表他是函数的一个特殊属性.&lt;/p&gt;
&lt;p&gt;也可以使用&lt;code&gt;help()&lt;/code&gt;函数获得信息.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;help(square)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Help on function square in module __main__:
## 
## square(x)
##     Calculates the square of the number x.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一个特殊的语句,&lt;code&gt;return&lt;/code&gt;跟R中一样,也是可以提前结束函数的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def test():
  print(&amp;quot;test&amp;quot;)
  return
  print(&amp;quot;test2&amp;quot;)
  
test()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## test&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;在def语句中，位于函数名后面的变量通常称为形参，而调用函数时提供的值称为实参，但本书基本不对此做严格的区分。在很重要的情况下，我会将实参称为值，以便将其与类似于变量的形参区分开来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;作用域&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; 作用域&lt;/h2&gt;
&lt;p&gt;跟R一样,python中也是存在局部和全局作用域,在函数内部对变量进行操作都是在该函数的局部作用域进行操作的,不会对函数外部的其他局部作用域以及全局作用域造成影响.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用切片可以对列表等创建符本,这样可以避免在修改某一个变量时,对该变量关联的列表也发生了变化.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;函数内的局部名称（包括参数）会与函数外的名称（即全局名称）冲突吗？答案是不会。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;关键字参数和默认值&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; 关键字参数和默认值&lt;/h2&gt;
&lt;p&gt;使用名称指定的参数称为关键字参数，主要优点是有助于澄清各个参数的作用。关键字参数最大的优点在于，可以指定默认值。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;收集参数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; 收集参数&lt;/h2&gt;
&lt;p&gt;在R中,我们知道,有时候需要用户提供长度不同的参数,这在R中,是通过使用&lt;code&gt;...&lt;/code&gt;来实现的,那再python中呢?是通过在参数名字前加一个&lt;code&gt;*&lt;/code&gt;实现的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def print_params(*params):
  print(params)

print_params(&amp;quot;shen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (&amp;#39;shen&amp;#39;,)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print_params(&amp;quot;shen&amp;quot;, &amp;quot;wang&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (&amp;#39;shen&amp;#39;, &amp;#39;wang&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print_params(1, 2, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (1, 2, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果某个参数前面加了星号,那么该参数下的所有实参,会被放在一个元组中.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def print_params_2(title, *params):
  print(title)
  print(params)
  
print_params_2(&amp;#39;Params:&amp;#39;, 1, 2, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Params:
## (1, 2, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;带星号的参数将会收集之后的所有输入的参数.&lt;/p&gt;
&lt;p&gt;如果需要将带星号参数放在中间,那么其后面的参数在调用时,必须指明形参.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def in_the_middle(x, *y, z):
  print(x, y, z)

in_the_middle(1,2,3, z = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1 (2, 3) 4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;型号时不会收集关键字参数的,如果要收集,可以使用两个星号.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def print_params_3(**params):
  print(params)
  
print_params_3(x = 1, y = 2, z = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;x&amp;#39;: 1, &amp;#39;y&amp;#39;: 2, &amp;#39;z&amp;#39;: 3}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,这时候将其作为字典使用.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;分配参数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5&lt;/span&gt; 分配参数&lt;/h2&gt;
&lt;p&gt;前面介绍了如何将参数收集到元组和字典中，但用同样的两个运算符（&lt;code&gt;*和**&lt;/code&gt;）也可执行相反的操作。&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def add(x, y):
  return x + y
  
params = (1, 2)

add(*params)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;作用域-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 作用域&lt;/h1&gt;
&lt;p&gt;变量到底是什么呢？可将其视为指向值的名称。因此，执行赋值语句x=1后，名称x指向值1。这几乎与使用字典时一样（字典中的键指向值），只是你使用的是“看不见”的字典。&lt;/p&gt;
&lt;p&gt;这种“看不见的字典”称为命名空间或作用域。那么有多少个命名空间呢？除全局作用域外，每个函数调用都将创建一个。&lt;/p&gt;
&lt;p&gt;在函数内使用的变量称为局部变量（与之相对的是全局变量）。参数类似于局部变量，因此参数与全局变量同名不会有任何问题。&lt;/p&gt;
&lt;p&gt;到目前为止一切顺利。但如果要在函数中访问全局变量呢？如果只是想读取这种变量的值（不重新关联它），通常不会有任何问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但是,在函数中访问全局变量是众多bug的根源。务必慎用全局变量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;读取全局变量的值通常不会有问题，但还是存在出现问题的可能性。如果有一个局部变量或参数与你要访问的全局变量同名，就无法直接访问全局变量，因为它被局部变量遮住了。&lt;/p&gt;
&lt;p&gt;如果需要，可使用函数&lt;code&gt;globals&lt;/code&gt;来访问全局变量。这个函数类似于&lt;code&gt;vars&lt;/code&gt;，返回一个包含全局变量的字典。（&lt;code&gt;locals&lt;/code&gt;返回一个包含局部变量的字典。）&lt;/p&gt;
&lt;p&gt;重新关联全局变量（使其指向新值）是另一码事。在函数内部给变量赋值时，该变量默认为局部变量，除非你明确地告诉Python它是全局变量。那么如何将这一点告知Python呢？&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = 1
def change_global():
  global x
  x = x + 1

change_global()
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,需要使用&lt;code&gt;global&lt;/code&gt;语句来申明,从而改变全局变量.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;函数式编程&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; 函数式编程&lt;/h1&gt;
&lt;p&gt;至此，你可能习惯了像使用其他对象（字符串、数、序列等）一样使用函数：将其赋给变量，将其作为参数进行传递，以及从函数返回它们。在有些语言（如scheme和Lisp）中，几乎所有的任务都是以这种方式使用函数来完成的。在Python 中，通常不会如此倚重函数（而是创建自定义对象，这将在下一章详细介绍），但完全可以这样做。Python提供了一些有助于进行这种函数式编程的函数：&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;filter&lt;/code&gt;和&lt;code&gt;reduce&lt;/code&gt;。在较新的Python版本中，函数map和filter的用途并不大，应该使用列表推导来替代它们。你可使用map将序列的所有元素传递给函数。&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;map()&lt;/code&gt;函数和R中的&lt;code&gt;apply&lt;/code&gt;家族或者&lt;code&gt;purrr&lt;/code&gt;的&lt;code&gt;map()&lt;/code&gt;家族函数非常像,有点是向量化处理的感觉.&lt;/p&gt;
&lt;p&gt;举个例子.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[str(i) for i in range(10)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;6&amp;#39;, &amp;#39;7&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;9&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可以写作:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;map(str, range(10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;map object at 0x00000000525EBF08&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(map(str, range(10)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;, &amp;#39;6&amp;#39;, &amp;#39;7&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;9&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;函数直接返回的是一个迭代器,因此需要使用&lt;code&gt;list()&lt;/code&gt;函数将他转变为list.使用R可以这么写.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sapply(c(0:9), as.character)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;0&amp;quot; &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot; &amp;quot;5&amp;quot; &amp;quot;6&amp;quot; &amp;quot;7&amp;quot; &amp;quot;8&amp;quot; &amp;quot;9&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;unlist(purrr::map(c(0:9), as.character))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;0&amp;quot; &amp;quot;1&amp;quot; &amp;quot;2&amp;quot; &amp;quot;3&amp;quot; &amp;quot;4&amp;quot; &amp;quot;5&amp;quot; &amp;quot;6&amp;quot; &amp;quot;7&amp;quot; &amp;quot;8&amp;quot; &amp;quot;9&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt;函数非常好用,是一个用来筛选的函数.用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。&lt;/p&gt;
&lt;p&gt;使用方法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filter(function, iterable)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;function&lt;/strong&gt;:函数.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iterable&lt;/strong&gt;:可迭代的对象.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;举个例子:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;def biggerThan10(x):
  if x &amp;gt; 10:
    return(True)
  else:
    return(False)
  
biggerThan10(10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;filter(biggerThan10, range(0,15,1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;filter object at 0x00000000525F1508&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(filter(biggerThan10, range(0,15,1)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [11, 12, 13, 14]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt;返回的也是一个迭代器,需要将其转变为list.&lt;/p&gt;
&lt;p&gt;当然,也可以使用列表推导,这样就不要自定义函数了.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[x for x in range(0,15,1) if x &amp;gt;10]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [11, 12, 13, 14]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码看起来更为简洁,并且也更加清晰.&lt;/p&gt;
&lt;div id=&#34;lambda表达式&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; lambda表达式&lt;/h2&gt;
&lt;p&gt;Python提供了一种名为lambda表达式的功能，让你能够创建内嵌的简单函数（主要供map、filter和reduce使用）。&lt;/p&gt;
&lt;p&gt;比如上面的&lt;code&gt;map()&lt;/code&gt;和&lt;code&gt;filter()&lt;/code&gt;函数的例子就可以改为下面:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(filter(lambda x: x &amp;gt; 10, range(0, 15,1)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [11, 12, 13, 14]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到使用lambda表达式,其实是创建了一个简单的匿名函数,起到的作用和匿名函数是相同的,只不过更加简洁易读而已.&lt;/p&gt;
&lt;p&gt;当然,其实大部分情况下,使用列表推导也非常简洁,所以很多情况下可以使用列表推导就可以了.但是特殊例子在函数&lt;code&gt;reduce()&lt;/code&gt;中.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;redunce函数会对参数序列中元素进行累积&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; &lt;code&gt;redunce()&lt;/code&gt;函数会对参数序列中元素进行累积。&lt;/h2&gt;
&lt;p&gt;函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2个元素进行操作，得到的结果再与第三个数据用function 函数运算，最后得到一个结果。&lt;/p&gt;
&lt;p&gt;使用方法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reduce(function, iterable[, initializer])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;function&lt;/strong&gt;: 函数.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iterable&lt;/strong&gt;: 可迭代对象.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;initializer&lt;/strong&gt;: 可选,初始参数.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;numbers = [72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33]
from functools import reduce
reduce(lambda x, y: x + y, numbers)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1161&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;总结&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; 总结&lt;/h1&gt;
&lt;p&gt;新的函数:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;53%&#34; /&gt;
&lt;col width=&#34;46%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;map(func, seq[, seq, ...])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对序列中的所有元素执行函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;filter(func, seq)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个列表，其中包含对其执行函数时结果为真的所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;reduce(func, seq[, initial])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于func(func(func(seq[0], seq[1]), seq[2]), …)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;sum(seq)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回seq 中所有元素的和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;apply(func[, args[, kwargs]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调用函数（还提供要传递给函数的参数）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python for genomics class day04</title>
      <link>/post/2019-11-21-python-for-genomics-class-day04/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-21-python-for-genomics-class-day04/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#条件循环及其他语句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 条件,循环及其他语句&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#print和import函数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; &lt;code&gt;print&lt;/code&gt;和&lt;code&gt;import&lt;/code&gt;函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#打印多个字符串&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.1&lt;/span&gt; 打印多个字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用import导入模块&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.2&lt;/span&gt; 使用&lt;code&gt;import&lt;/code&gt;导入模块&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#python中的赋值&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; Python中的赋值&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#序列解包&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.1&lt;/span&gt; 序列解包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#链式赋值&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.2&lt;/span&gt; 链式赋值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#增强赋值&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.3&lt;/span&gt; 增强赋值&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#条件和条件语句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; 条件和条件语句&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#if语句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.1&lt;/span&gt; If语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#else子句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.2&lt;/span&gt; else子句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#elif子句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.3&lt;/span&gt; elif子句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#更复杂的条件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.4&lt;/span&gt; 更复杂的条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#断点用于debug&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3.5&lt;/span&gt; 断点用于debug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#循环&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4&lt;/span&gt; 循环&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#while循环&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4.1&lt;/span&gt; &lt;code&gt;while&lt;/code&gt;循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#for循环&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4.2&lt;/span&gt; &lt;code&gt;for&lt;/code&gt;循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#迭代字典&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4.3&lt;/span&gt; 迭代字典&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#一些迭代工具&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4.4&lt;/span&gt; 一些迭代工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#简单推导&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.5&lt;/span&gt; 简单推导&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#三条有用的语句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.5.1&lt;/span&gt; 三条有用的语句&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#总结&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 总结&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#新的函数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; 新的函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#课堂的示例代码&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; 课堂的示例代码&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#zip函数的例子&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; &lt;code&gt;zip()&lt;/code&gt;函数的例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#给本地写文件的例子&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2&lt;/span&gt; 给本地写文件的例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#循环语句例子&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.3&lt;/span&gt; 循环语句例子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;条件循环及其他语句&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 条件,循环及其他语句&lt;/h1&gt;
&lt;div id=&#34;print和import函数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; &lt;code&gt;print&lt;/code&gt;和&lt;code&gt;import&lt;/code&gt;函数&lt;/h2&gt;
&lt;div id=&#34;打印多个字符串&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.1&lt;/span&gt; 打印多个字符串&lt;/h3&gt;
&lt;p&gt;需要将多个要打印的字符串用逗号隔开.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;Age:&amp;#39;, 42)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Age: 42&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;默认字符串之间的分隔符为空格.可以使用&lt;code&gt;sep&lt;/code&gt;参数自定义.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;I&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;Xiaotao Shen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## I am Xiaotao Shen&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;I&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;Xiaotao Shen&amp;quot;, sep = &amp;quot;,&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## I,am,Xiaotao Shen&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;使用import导入模块&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.2&lt;/span&gt; 使用&lt;code&gt;import&lt;/code&gt;导入模块&lt;/h3&gt;
&lt;p&gt;导入模块一般使用如下语句:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import somemodule
from somemodule import somefunction
from somemodule import somefunction, anotherfunction, yetanotherfunction
from somemodule import *&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后一种是导入该模块的所有函数.&lt;/p&gt;
&lt;p&gt;如果某个函数名在两个模块种都有,那么使用第一种方式导入模块之后,使用下面方法进行调用:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module1.function(...)
module2.function(...)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外一种方法就是在句尾添加as并指定别名.可以将模块或者函数命名为其他名字.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import math as foobar
foobar.sqrt(4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from math import sqrt as foobar
foobar(4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;from module1 import open as open1
from module2 import open as open2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;python中的赋值&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; Python中的赋值&lt;/h2&gt;
&lt;div id=&#34;序列解包&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1&lt;/span&gt; 序列解包&lt;/h3&gt;
&lt;p&gt;同时给多个变量赋值:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x, y, z = 1, 2, 3
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;z&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;最大的用处在于可以同时交换多个变量的值:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x, y = y, x
print(x, y, z)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2 1 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实际上,这里执行的操作称为序列解包(或可迭代对象解包)：将一个序列(或任何可迭代对象)解包,并将得到的值存储到一系列变量中.下面用例子进行解释.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;values = 1, 2, 3
x, y, z = values
print(x, y, z)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只要是可以用于迭代的对象,比如元组,列表,字典等等,都可以用这种方法.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;##字典
scoundrel = {&amp;#39;name&amp;#39;: &amp;#39;Robin&amp;#39;, &amp;#39;girlfriend&amp;#39;: &amp;#39;Marion&amp;#39;}
scoundrel.popitem()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (&amp;#39;girlfriend&amp;#39;, &amp;#39;Marion&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;key, value = scoundrel.popitem()
key&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;name&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;value

##列表&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Robin&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = [&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;]
x, y, z = test
print(x, y, z)

##字符串&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a b c&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x,y,z,w = &amp;quot;shen&amp;quot;
print(x,y,z,w)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## s h e n&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要解包的序列包含的元素个数必须与你在等号左边列出的目标个数相同,否则Python将引发异常.&lt;/p&gt;
&lt;p&gt;如果在左边的某个变量名前面加上型号(*),那么该变量会最终变为一个列表.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a, *b, c = &amp;quot;abc&amp;quot;
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;a&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;b&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;c&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;c&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;链式赋值&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2&lt;/span&gt; 链式赋值&lt;/h3&gt;
&lt;p&gt;链式赋值是一种快捷方式,用于将多个变量关联到同一个值.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = y = somefunction()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等价于:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = somefunction()
y = somefunction()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;增强赋值&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.3&lt;/span&gt; 增强赋值&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = 1
x = x + 1
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等价于下列代码:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = 1
x += x
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种写法在循环中见的会比较多.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;条件和条件语句&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; 条件和条件语句&lt;/h2&gt;
&lt;p&gt;在python中被视为&lt;code&gt;False&lt;/code&gt;的内容:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;False None 0 &amp;quot;&amp;quot; () [] {}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;换而言之,标准值&lt;strong&gt;False和None、各种类型(包括浮点数、复数等)的数值0、空序列(如空字符串、空元组和空列表)以及空映射(如空字典)&lt;/strong&gt;都被视为假,而其他各种值都被视为真,包括特殊值True.&lt;/p&gt;
&lt;p&gt;布尔值&lt;code&gt;True&lt;/code&gt;和&lt;code&gt;False&lt;/code&gt;属于类型&lt;code&gt;bool&lt;/code&gt;,而&lt;code&gt;bool&lt;/code&gt;与&lt;code&gt;list&lt;/code&gt;、&lt;code&gt;str&lt;/code&gt;和&lt;code&gt;tuple&lt;/code&gt;一样,都是函数,可用来转换其他的值.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;bool(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;bool(0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = &amp;quot;a&amp;quot;
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;a&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = &amp;quot;xiaotao&amp;quot;
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;xiaotao&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;if语句&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.1&lt;/span&gt; If语句&lt;/h3&gt;
&lt;p&gt;这意味着如果条件(if和冒号之间的表达式)为前面定义的真,就执行后续代码块(这里是一条print语句)；如果条件为假.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = &amp;quot;xiaotao&amp;quot;
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;xiaotao&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test.endswith(&amp;quot;shen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test.endswith(&amp;quot;tao&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;if test.endswith(&amp;quot;tao&amp;quot;):
   print(&amp;quot;Yes&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Yes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;else子句&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.2&lt;/span&gt; else子句&lt;/h3&gt;
&lt;p&gt;如果if语句不成立,可以执行else子句的内容.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;name = &amp;quot;xiaotao&amp;quot;
name&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;xiaotao&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;if name == &amp;quot;xiaotao&amp;quot;:
   print(&amp;quot;Welcome, Xiaotao&amp;quot;)
else:
   print(&amp;quot;Hello, stranger&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Welcome, Xiaotao&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;elif子句&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.3&lt;/span&gt; elif子句&lt;/h3&gt;
&lt;p&gt;要检查多个条件,可使用&lt;code&gt;elif&lt;/code&gt;.&lt;code&gt;elif&lt;/code&gt;是&lt;code&gt;else if&lt;/code&gt;的缩写,由一个&lt;code&gt;if&lt;/code&gt;子句和一个&lt;code&gt;else&lt;/code&gt;子句组合而成,也就是包含条件的&lt;code&gt;else&lt;/code&gt;子句.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;name = &amp;quot;shen&amp;quot;

if name == &amp;quot;wang&amp;quot;:
   print(&amp;quot;Welcome, wang&amp;quot;)
elif name == &amp;quot;shen&amp;quot;:
   print(&amp;quot;Welcome, Xiaotao&amp;quot;)
else:
  print(&amp;quot;Hello, stranger.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Welcome, Xiaotao&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;更复杂的条件&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.4&lt;/span&gt; 更复杂的条件&lt;/h3&gt;
&lt;p&gt;下面重点说说条件本身.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;比较运算符.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在条件表达式中,最基本的运算符可能是比较运算符,它们用于执行比较.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Equation&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;x == y&lt;/td&gt;
&lt;td&gt;x等于y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;x &amp;lt; y&lt;/td&gt;
&lt;td&gt;x小于y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;x &amp;gt; y&lt;/td&gt;
&lt;td&gt;x大于y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;x &amp;gt;= y&lt;/td&gt;
&lt;td&gt;x大于或等于y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;x &amp;lt;= y&lt;/td&gt;
&lt;td&gt;x小于或等于y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;x != y&lt;/td&gt;
&lt;td&gt;x不等于y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;x is y&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;x和y是同一个对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;x is not y&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;x和y是不同的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;strong&gt;x in y&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;x是容器(如序列)y的成员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;strong&gt;x not in y&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;x不是容器(如序列)y的成员&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与赋值一样,Python也支持链式比较：可同时使用多个比较运算符,如&lt;code&gt;0 &amp;lt; age &amp;lt; 100&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;is&lt;/code&gt;:相同运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他和&lt;code&gt;==&lt;/code&gt;还是有区别的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = y = [1, 2, 3]
z = [1, 2, 3]
x == y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x == z&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x is y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y is x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x is z&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;z is y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;x和z相等,但&lt;code&gt;x is z&lt;/code&gt;的结果却为False.为何会这样呢?因为is检查两个对象是否相同(而不是相等).变量x和y指向同一个列表,而z指向另一个列表(其中包含的值以及这些值的排列顺序都与前一个列表相同).这两个列表虽然相等,但并非同一个对象.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;in&lt;/code&gt;:成员资格运算符&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串和序列的比较&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;字符串是根据字符的字母排列顺序进行比较的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;quot;alpha&amp;quot; &amp;lt; &amp;quot;beta&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;布尔运算符&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;还有&lt;code&gt;not&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;断点用于debug&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3.5&lt;/span&gt; 断点用于debug&lt;/h3&gt;
&lt;p&gt;Python中如何进行诊断和debug.&lt;/p&gt;
&lt;p&gt;可以使用关键字&lt;code&gt;assert&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;age = 10
assert 0 &amp;lt; age &amp;lt; 100
age = -1
assert 0 &amp;lt; age &amp;lt; 100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果知道必须满足特定条件,程序才能正确地运行,可在程序中添加&lt;code&gt;assert&lt;/code&gt;语句充当检查点,这很有帮助.&lt;/p&gt;
&lt;p&gt;这里类似与R中的&lt;code&gt;stop()&lt;/code&gt;函数.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;age = -1
assert 0 &amp;lt; age &amp;lt; 100, &amp;#39;The age must be realistic&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;循环&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; 循环&lt;/h2&gt;
&lt;div id=&#34;while循环&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.1&lt;/span&gt; &lt;code&gt;while&lt;/code&gt;循环&lt;/h3&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = 1
while x &amp;lt;= 10:
  print(x)
  x += 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1
## 2
## 3
## 4
## 5
## 6
## 7
## 8
## 9
## 10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;for循环&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.2&lt;/span&gt; &lt;code&gt;for&lt;/code&gt;循环&lt;/h3&gt;
&lt;p&gt;为序列(或其他可迭代对象)中每个元素执行代码块,这时候使用&lt;code&gt;for&lt;/code&gt;循环更加合适.&lt;/p&gt;
&lt;p&gt;鉴于迭代(也就是遍历)特定范围内的数是一种常见的任务,Python提供了一个创建范围的内置函数&lt;code&gt;range&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;range(0,10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## range(0, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(range(0,10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;范围类似于切片.它们包含起始位置(这里为0),但不包含结束位置(这里为10).在很多情况下,你都希望范围的起始位置为0.实际上,如果只提供了一个位置,将把这个位置视为结束位置,并假定起始位置为0.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;range()&lt;/code&gt;函数的使用语法如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;range(start, stop[, step])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一共有三个参数,分别是起始,终止和步长.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(range(10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(range(0,10))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(range(0,10,1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;迭代字典&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.3&lt;/span&gt; 迭代字典&lt;/h3&gt;
&lt;p&gt;要遍历字典的所有关键字,可像遍历序列那样使用普通的&lt;code&gt;for&lt;/code&gt;语句.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = {&amp;#39;x&amp;#39;: 1, &amp;#39;y&amp;#39;: 2, &amp;#39;z&amp;#39;: 3}
for key in d:
  print(key, &amp;#39;corresponds to&amp;#39;, d[key])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## x corresponds to 1
## y corresponds to 2
## z corresponds to 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可使用&lt;code&gt;keys&lt;/code&gt;等字典方法来获取所有的键.如果只对值感兴趣,可使用&lt;code&gt;d.values&lt;/code&gt;.你可能还记得,&lt;code&gt;d.items&lt;/code&gt;以元组的方式返回键-值对.&lt;code&gt;for&lt;/code&gt;循环的优点之一是,可在其中使用序列解包.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d.items()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dict_items([(&amp;#39;x&amp;#39;, 1), (&amp;#39;y&amp;#39;, 2), (&amp;#39;z&amp;#39;, 3)])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;for key, value in d.items():
  print(key, &amp;#39;corresponds to&amp;#39;, value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## x corresponds to 1
## y corresponds to 2
## z corresponds to 3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;一些迭代工具&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.4&lt;/span&gt; 一些迭代工具&lt;/h3&gt;
&lt;div id=&#34;并行迭代&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.4.1&lt;/span&gt; 并行迭代&lt;/h4&gt;
&lt;p&gt;有时候,你可能想同时迭代两个序列.假设有下面两个列表：&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;names = [&amp;#39;anne&amp;#39;, &amp;#39;beth&amp;#39;, &amp;#39;george&amp;#39;, &amp;#39;damon&amp;#39;]
ages = [12, 45, 32, 102]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一个很有用的并行迭代工具是内置函数&lt;code&gt;zip&lt;/code&gt;,它将两个序列“缝合”起来,并返回一个由元组组成的序列.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = zip(names, ages)
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;zip object at 0x0000000053DE8D88&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(test)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;zip&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test2 = list(test)
test2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [(&amp;#39;anne&amp;#39;, 12), (&amp;#39;beth&amp;#39;, 45), (&amp;#39;george&amp;#39;, 32), (&amp;#39;damon&amp;#39;, 102)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(test2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;zip()&lt;/code&gt;函数用于将可迭代的对象作为参数,将对象中对应的元素打包成一个个元组,然后返回由这些元组组成的列表.如果各个迭代器的元素个数不一致,则返回列表长度与最短的对象相同,利用&lt;code&gt;*&lt;/code&gt;号操作符,可以将元组解压为列表.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zip()&lt;/code&gt;函数的使用方法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;zip([iterable, ...])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;iterabl&lt;/code&gt;:一个或多个迭代器.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;for name, age in zip(names, ages):
  print(name, &amp;#39;is&amp;#39;, age, &amp;#39;years old&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## anne is 12 years old
## beth is 45 years old
## george is 32 years old
## damon is 102 years old&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;迭代时获取索引&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.4.2&lt;/span&gt; 迭代时获取索引&lt;/h4&gt;
&lt;p&gt;在有些情况下,你需要在迭代对象序列的同时获取当前对象的索引.例如,你可能想替换一个字符串列表中所有包含子串’xxx’的字符串.&lt;/p&gt;
&lt;p&gt;这时候可以使用内置函数&lt;code&gt;enumerate()&lt;/code&gt;.这个函数让你能够迭代索引-值对,其中的索引是自动提供的.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;enumerate()&lt;/code&gt;函数使用方法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enumerate(sequence, [start=0])&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sequence&lt;/strong&gt;: 一个序列、迭代器或其他支持迭代对象.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;start&lt;/strong&gt;: 下标起始位置.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回 enumerate(枚举) 对象.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;seasons = [&amp;#39;Spring&amp;#39;, &amp;#39;Summer&amp;#39;, &amp;#39;Fall&amp;#39;, &amp;#39;Winter&amp;#39;]
list(enumerate(seasons))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [(0, &amp;#39;Spring&amp;#39;), (1, &amp;#39;Summer&amp;#39;), (2, &amp;#39;Fall&amp;#39;), (3, &amp;#39;Winter&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(enumerate(seasons, start=1))       # 下标从 1 开始&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [(1, &amp;#39;Spring&amp;#39;), (2, &amp;#39;Summer&amp;#39;), (3, &amp;#39;Fall&amp;#39;), (4, &amp;#39;Winter&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;反向迭代和排序后再迭代&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.4.3&lt;/span&gt; 反向迭代和排序后再迭代&lt;/h4&gt;
&lt;p&gt;来看另外两个很有用的函数：&lt;code&gt;reversed()&lt;/code&gt;和&lt;code&gt;sorted()&lt;/code&gt;.它们类似于列表方法&lt;code&gt;reverse&lt;/code&gt;和&lt;code&gt;sort&lt;/code&gt;(&lt;code&gt;sorted&lt;/code&gt;接受的参数也与&lt;code&gt;sort&lt;/code&gt;类似),但可用于任何序列或可迭代的对象,且不就地修改对象,而是返回反转和排序后的版本.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sorted([4, 3, 6, 8, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [3, 3, 4, 6, 8]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sorted(&amp;#39;Hello, world!&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39; &amp;#39;, &amp;#39;!&amp;#39;, &amp;#39;,&amp;#39;, &amp;#39;H&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;w&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(reversed(&amp;#39;Hello, world!&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;!&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;r&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;w&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;,&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;H&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;&amp;#39;.join(reversed(&amp;#39;Hello, world!&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;!dlrow ,olleH&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请注意,&lt;code&gt;sorted&lt;/code&gt;返回一个列表,而&lt;code&gt;reversed&lt;/code&gt;像&lt;code&gt;zip&lt;/code&gt;那样返回一个更神秘的可迭代对象.你无需关心这到底意味着什么,只管在&lt;code&gt;for&lt;/code&gt;循环或&lt;code&gt;join&lt;/code&gt;等方法中使用它,不会有任何问题.只是你不能对它执行索引或切片操作,也不能直接对它调用列表的方法.要执行这些操作,可先使用&lt;code&gt;list&lt;/code&gt;对返回的对象进行转换.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;跳出循环&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.4.4&lt;/span&gt; 跳出循环&lt;/h4&gt;
&lt;div id=&#34;break语句&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.4.4.1&lt;/span&gt; &lt;code&gt;break&lt;/code&gt;语句&lt;/h5&gt;
&lt;p&gt;要结束(跳出)循环,可使用break.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from math import sqrt
for n in range(99, 0, -1):
  root = sqrt(n)
  if root == int(root):
    print(n)
    break&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 81&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;continute语句&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.4.4.2&lt;/span&gt; &lt;code&gt;continute&lt;/code&gt;语句&lt;/h5&gt;
&lt;p&gt;语句&lt;code&gt;continue&lt;/code&gt;没有&lt;code&gt;break&lt;/code&gt;用得多.它结束当前迭代,并跳到下一次迭代开头.因此常用于当某次迭代如果符合一定要求,不在进行后续的代码,而开始新的下一次迭代.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for x in seq:
  if condition1: continue
  if condition2: continue
  if condition3: continue
  do_something()
  do_something_else()
  do_another_thing()
  etc()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;简单推导&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5&lt;/span&gt; 简单推导&lt;/h2&gt;
&lt;p&gt;列表推导是一种从其他列表创建列表的方式,类似于数学中的集合推导.列表推导的工作原理非常简单,有点类似于&lt;code&gt;for&lt;/code&gt;循环.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[x * x for x in range(10)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = [x * x for x in range(10)]
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个列表由&lt;code&gt;range(10)&lt;/code&gt;内每个值的平方组成.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[x*x for x in range(10) if x % 3 == 0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 9, 36, 81]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可添加更多的for部分.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[(x, y) for x in range(3) for y in range(3)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;girls = [&amp;#39;alice&amp;#39;, &amp;#39;bernice&amp;#39;, &amp;#39;clarice&amp;#39;]
boys = [&amp;#39;chris&amp;#39;, &amp;#39;arnold&amp;#39;, &amp;#39;bob&amp;#39;]
[b+&amp;#39;+&amp;#39;+g for b in boys for g in girls if b[0] == g[0]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;chris+clarice&amp;#39;, &amp;#39;arnold+alice&amp;#39;, &amp;#39;bob+bernice&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这些代码将名字的首字母相同的男孩和女孩配对.&lt;/p&gt;
&lt;div id=&#34;三条有用的语句&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5.1&lt;/span&gt; 三条有用的语句&lt;/h3&gt;
&lt;div id=&#34;pass&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5.1.1&lt;/span&gt; &lt;code&gt;pass&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;那么为何需要一条什么都不做的语句呢?在你编写代码时,可将其用作占位符.例如,你可能编写了一条if语句并想尝试运行它,但其中缺少一个代码块,&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;使用del语句删除&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5.1.2&lt;/span&gt; 使用&lt;code&gt;del&lt;/code&gt;语句删除&lt;/h4&gt;
&lt;p&gt;对于你不再使用的对象,Python通常会将其删除(因为没有任何变量或数据结构成员指向它).&lt;/p&gt;
&lt;p&gt;使用方法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;del object&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;总结&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 总结&lt;/h1&gt;
&lt;div id=&#34;新的函数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; 新的函数&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;enumerate(seq)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;生成可迭代的索引-值对&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;range([start,] stop[, step])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个由整数组成的列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;reversed(seq)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按相反的顺序返回&lt;code&gt;seq&lt;/code&gt;中的值,以便用于迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;sorted(seq[,cmp][,key][,reverse])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个列表,其中包含seq中的所有值且这些值是经过排序的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;xrange([start,] stop[, step])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个用于迭代的xrange对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;zip(seq1, seq2,...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个适合用于并行迭代的新序列&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;课堂的示例代码&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; 课堂的示例代码&lt;/h1&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# using set to find the unique letters in a string
# create a new empty dictionary
nt_count = {}
# get a set of unique characters in our DNA string
dna = &amp;#39;GTACCNTTGATTTCGTATTCTGAGAGGCTGCTGCTTAGCGGTAGCCCCTTGGTTTCCGTGGCAACGGAAAA&amp;#39;
unique = set(dna)
print(&amp;#39;unique nt: &amp;#39;, unique) ## {&amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;G&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;N&amp;#39;}
# iterate through each unique nucleotide&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## unique nt:  {&amp;#39;N&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;G&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;for nt in unique:
  # count the number of this unique nt in dna
  count = dna.count(nt)
  # add our count to our dict
  nt_count[nt] = count
print(&amp;#39;nt count:&amp;#39;, nt_count)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## nt count: {&amp;#39;N&amp;#39;: 1, &amp;#39;T&amp;#39;: 21, &amp;#39;A&amp;#39;: 13, &amp;#39;C&amp;#39;: 16, &amp;#39;G&amp;#39;: 20}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;zip函数的例子&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; &lt;code&gt;zip()&lt;/code&gt;函数的例子&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# zip two lists together to make a dictionary or array of tuples
numbers = [1, 2, 3]
letters = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]
new_d = dict(zip(numbers, letters))
print(&amp;#39;new_d&amp;#39;, new_d)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## new_d {1: &amp;#39;a&amp;#39;, 2: &amp;#39;b&amp;#39;, 3: &amp;#39;c&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;new_l = list(zip(numbers, letters))
print(&amp;#39;new_l&amp;#39;, new_l)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## new_l [(1, &amp;#39;a&amp;#39;), (2, &amp;#39;b&amp;#39;), (3, &amp;#39;c&amp;#39;)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,&lt;code&gt;zip()&lt;/code&gt;函数得到的是一个特殊的对象,可以用于迭代,当然也可以使用&lt;code&gt;dict()&lt;/code&gt;和&lt;code&gt;list()&lt;/code&gt;函数将其转变为字典或者列表对象.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;给本地写文件的例子&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; 给本地写文件的例子&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# writing a file with FizzBuzz results
with open(&amp;#39;test_file.txt&amp;#39;, mode=&amp;#39;w&amp;#39;) as test_fh:
    for x in range(1, 101):
        if (x % 3 == 0) and (x % 5 == 0):
            test_fh.write(&amp;#39;{0:3d}\t{1:s}\n&amp;#39;.format(x, &amp;#39;FizzBuzz&amp;#39;))
        elif x % 3 == 0:
            test_fh.write(&amp;#39;{0:3d}\t{1:s}\n&amp;#39;.format(x, &amp;#39;Fizz&amp;#39;))
        elif x % 5 == 0:
            test_fh.write(&amp;#39;{0:3d}\t{1:s}\n&amp;#39;.format(x, &amp;#39;Buzz&amp;#39;))
        else:
            test_fh.write(&amp;#39;{0:3d}\n&amp;#39;.format(x))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后得到的文件如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;test_file.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;open&lt;/code&gt;命令可以打开一个文件,并将其命名为&lt;code&gt;test_fh&lt;/code&gt;,&lt;code&gt;mode&lt;/code&gt;设置为’w’,表明其是写入格式.该文件使用其&lt;code&gt;write&lt;/code&gt;方法进行写入.如果是读入的文件,可以将mode设置为’r’,然后使用&lt;code&gt;read&lt;/code&gt;方法获得内容.&lt;/p&gt;
&lt;p&gt;可以看到,其中大括号内部的第一个数字代表占位符,冒号之后代表替换的对象类型,比如&lt;code&gt;d&lt;/code&gt;为数字,&lt;code&gt;s&lt;/code&gt;为字符型.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;循环语句例子&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.3&lt;/span&gt; 循环语句例子&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# continue &amp;amp; break
count = -1
while True:
    count+=1
    print(&amp;quot;count:&amp;quot; , count)
    if count == 3:
        continue
    if count == 6:
        break
    print(&amp;quot;line after our continue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## count: 0
## line after our continue
## count: 1
## line after our continue
## count: 2
## line after our continue
## count: 3
## count: 4
## line after our continue
## count: 5
## line after our continue
## count: 6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;Done&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Done&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = 2 # 3, 2, 2
b = 5 # 4, 3, 5 
c = True
d = False

while a == 2:
    print(&amp;#39;\n0: begining\t&amp;#39;, a, b, c, d)
    if b &amp;gt; 4:
        print(&amp;#39;1: break\t&amp;#39;, a, b, c, d)
        break
    if c:
        print(&amp;#39;2: Truth\t&amp;#39;, a, b, c, d)
        c = False
        continue
    elif not d:
        print(&amp;#39;3: elif\t\t&amp;#39;, a, b, c, d)
        c = True
        d = True
    else:
        b += 1
        a += 1
    print (&amp;#39;4: after if\t&amp;#39;, a, b, c, d)
else:
    print(&amp;#39;\n5: exiting\t&amp;#39;, a, b, c, d)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## 0: begining   2 5 True False
## 1: break  2 5 True False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Iterating over a dictionary
myDict = {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;:2, &amp;#39;c&amp;#39;:3, &amp;#39;d&amp;#39;:4}
# Option 1
for key, value in myDict.items():
    print(key, value, value*5)
    &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a 1 5
## b 2 10
## c 3 15
## d 4 20&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print()

# Option 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;for key in myDict:
    value = myDict[key]
    print(key, value, value*5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a 1 5
## b 2 10
## c 3 15
## d 4 20&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>blogdown创建post模板文件夹</title>
      <link>/post/2019-11-20-blogdown-creat-post/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-20-blogdown-creat-post/</guid>
      <description>


&lt;p&gt;&lt;code&gt;blogdown&lt;/code&gt;好像并没有自动创建post模板文件夹的函数,要达到的目的是,自动在&lt;code&gt;content/en/post&lt;/code&gt;中创建文件夹,然后文件夹中有一个&lt;code&gt;index.Rmd&lt;/code&gt;文件.代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new_post &amp;lt;- 
  function(
  post.name = &amp;quot;python for genomics class day03&amp;quot;,
  date = Sys.Date(),
  post.title = &amp;quot;Python for genomics class day03&amp;quot;,
  author = &amp;quot;Xiaotao Shen&amp;quot;,
  categories = c(&amp;quot;Python&amp;quot;),
  tags = c(&amp;quot;Blog&amp;quot;, &amp;quot;Chinese&amp;quot;),
  path = &amp;quot;D:/my github/shen/content/en/post&amp;quot;){
  post.name &amp;lt;- stringr::str_replace_all(post.name, &amp;quot; &amp;quot;, &amp;quot;-&amp;quot;)
  file.name &amp;lt;- paste(date, post.name, sep = &amp;quot;-&amp;quot;)
 
  dir.create(file.path(path, file.name))
  
  file &amp;lt;- &amp;quot;---&amp;quot;
  write.table(file, 
              file.path(path, file.name, &amp;quot;index.txt&amp;quot;), 
              row.names = FALSE, col.names = FALSE, 
              quote = FALSE, append = FALSE)
  
  write.table(paste(&amp;quot;title:&amp;quot;, post.title),
    file.path(path, file.name, &amp;quot;index.txt&amp;quot;), 
  row.names = FALSE, col.names = FALSE, 
  quote = FALSE, append = TRUE
  )
  
  write.table(paste(&amp;quot;author:&amp;quot;, author),
              file.path(path, file.name, &amp;quot;index.txt&amp;quot;), 
              row.names = FALSE, col.names = FALSE, 
              quote = FALSE, append = TRUE
  )
  
  write.table(paste(&amp;quot;date:&amp;quot;, date),
              file.path(path, file.name, &amp;quot;index.txt&amp;quot;), 
              row.names = FALSE, col.names = FALSE, 
              quote = FALSE, append = TRUE
  )
  
  write.table(&amp;quot;slug: &amp;#39;&amp;#39;&amp;quot;,
              file.path(path, file.name, &amp;quot;index.txt&amp;quot;), 
              row.names = FALSE, col.names = FALSE, 
              quote = FALSE, append = TRUE
  )
  
  write.table(&amp;quot;categories:&amp;quot;,
              file.path(path, file.name, &amp;quot;index.txt&amp;quot;), 
              row.names = FALSE, col.names = FALSE, 
              quote = FALSE, append = TRUE
  )
  
  for(i in 1:length(categories)){
    write.table(paste(&amp;quot; - &amp;quot;, categories[i]),
                file.path(path, file.name, &amp;quot;index.txt&amp;quot;), 
                row.names = FALSE, col.names = FALSE, 
                quote = FALSE, append = TRUE
    )
  }
    
    write.table(&amp;quot;tags:&amp;quot;,
                file.path(path, file.name, &amp;quot;index.txt&amp;quot;), 
                row.names = FALSE, col.names = FALSE, 
                quote = FALSE, append = TRUE
    )
    
    for(i in 1:length(tags)){
      write.table(paste(&amp;quot; - &amp;quot;, tags[i]),
                  file.path(path, file.name, &amp;quot;index.txt&amp;quot;), 
                  row.names = FALSE, col.names = FALSE, 
                  quote = FALSE, append = TRUE
      )
    }
      
      end &amp;lt;- 
&amp;quot;image:
  caption: &amp;#39;&amp;#39;
  focal_point: &amp;#39;&amp;#39;
output:
  blogdown::html_page:
    toc: true
    number_sections: true
---&amp;quot;
      write.table(
        end,
        file.path(path, file.name, &amp;quot;index.txt&amp;quot;),
        row.names = FALSE,
        col.names = FALSE,
        quote = FALSE,
        append = TRUE
      )
      
 file.rename(from = file.path(path, file.name, &amp;quot;index.txt&amp;quot;),
             to = file.path(path, file.name, &amp;quot;index.Rmd&amp;quot;))
 
  }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python for genomics class day03</title>
      <link>/post/2019-11-20-python-for-genomics-class-day03/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-20-python-for-genomics-class-day03/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#数据类型&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 数据类型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#列表list和元组tuple&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 列表(list)和元组(tuple)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#创建列表&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.1&lt;/span&gt; 创建列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#列表通用的操作&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.2&lt;/span&gt; 列表通用的操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#列表python的主力&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.3&lt;/span&gt; 列表,Python的主力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#总结&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.4&lt;/span&gt; 总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#字符串&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; 字符串&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#字符串的基本操作&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.1&lt;/span&gt; 字符串的基本操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#字典&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.2&lt;/span&gt; 字典&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#条件循环及其他语句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 条件,循环及其他语句&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#条件和条件语句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; 条件和条件语句&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#day03作业&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Day03作业&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#fasta文件的格式&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; &lt;code&gt;fasta&lt;/code&gt;文件的格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#read_fasta函数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2&lt;/span&gt; &lt;code&gt;read_fasta&lt;/code&gt;函数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#open函数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.1&lt;/span&gt; &lt;code&gt;open&lt;/code&gt;函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#with语句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.2.2&lt;/span&gt; &lt;code&gt;with&lt;/code&gt;语句&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;数据类型&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 数据类型&lt;/h1&gt;
&lt;p&gt;Data types and manipulations:dictionary, set&lt;/p&gt;
&lt;p&gt;Conditional statements:if, elif, else, break, continue&lt;/p&gt;
&lt;p&gt;Comments and style:[&lt;a href=&#34;https://realpython.com/python-pep8/&#34; class=&#34;uri&#34;&gt;https://realpython.com/python-pep8/&lt;/a&gt;]&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;
# Python style
#
# PEP8
# https://realpython.com/python-pep8/
# https://www.python.org/dev/peps/pep-0008/
#
# Python history
#
# Guido van Rossum, creator in 1989. He retired last month. Final job was with Dropbox.
# https://en.wikipedia.org/wiki/Python_(programming_language)

a = 1
b = 1.0
c = &amp;#39;1&amp;#39;
d = [1, 2]
e = (1, 2)
f = { &amp;#39;x&amp;#39;:1, &amp;#39;y&amp;#39;:2}
g = {1, 2}

#a是int整数型
print(&amp;#39;a =&amp;#39;, type(a))
#b是浮点型(float)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## a = &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;b =&amp;#39;, type(b))
#c是字符串型(str)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## b = &amp;lt;class &amp;#39;float&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;c =&amp;#39;, type(c))
#d是列表,可以看到列表使用中括号创建&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## c = &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;d =&amp;#39;, type(d))
#e是元组(tuple),使用小括号创建&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## d = &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;e =&amp;#39;, type(e))
#f是字典类型(dict),使用大括号创建&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## e = &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;f =&amp;#39;, type(f))
#g是集合类型,也是使用大括号创建,但是没有key&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## f = &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;#39;g =&amp;#39;, type(g))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## g = &amp;lt;class &amp;#39;set&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对几个重要的类型做一个详细解释.具体内容参考&lt;code&gt;Python基础教程这本书&lt;/code&gt;&lt;/p&gt;
&lt;div id=&#34;列表list和元组tuple&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 列表(list)和元组(tuple)&lt;/h2&gt;
&lt;p&gt;列表和元组是非常类似的,不同点在于&lt;code&gt;列表可以修改而元组不可以&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;创建列表&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.1&lt;/span&gt; 创建列表&lt;/h3&gt;
&lt;p&gt;可以使用中括号&lt;code&gt;[]&lt;/code&gt;来创建列表&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;edward = [&amp;#39;Edward Gumby&amp;#39;, 42]
john = [&amp;#39;John Smith&amp;#39;, 50]
database = [edward, john]
database&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[&amp;#39;Edward Gumby&amp;#39;, 42], [&amp;#39;John Smith&amp;#39;, 50]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同样的,列表中的元素也可以是列表,就像上面的例子所展示的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = [&amp;quot;shen&amp;quot;]
type(test)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;shen&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;列表通用的操作&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.2&lt;/span&gt; 列表通用的操作&lt;/h3&gt;
&lt;p&gt;有几种操作适用于所有序列,包括索引,切片,相加,相乘和成员资格检查.另外,Python还提供了一些内置函数,可用于确定序列的长度以及找出序列中最大和最小的元素.&lt;/p&gt;
&lt;div id=&#34;索引index&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.2.1&lt;/span&gt; 索引(index)&lt;/h4&gt;
&lt;p&gt;与R类型,列表都有序号,但是需要注意的是,python中的序号都是从0开始的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;greeting = &amp;#39;Hello&amp;#39;
greeting[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;H&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;greeting[1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;e&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意上面例子中&lt;code&gt;greeting&lt;/code&gt;的类型是&lt;code&gt;str&lt;/code&gt;,也就是说python中的str也可以通过序号进行提取某个字符.&lt;/p&gt;
&lt;p&gt;这就称之为索引,其中使用&lt;code&gt;-1&lt;/code&gt;代表最后一个元素.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;greeting[-1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;o&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;切片slicing&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.2.2&lt;/span&gt; 切片(slicing)&lt;/h4&gt;
&lt;p&gt;切片是用来访问特定范围内的元素.为此,可使用两个索引,并用冒号分隔.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = [&amp;quot;shen&amp;quot;, &amp;quot;wang&amp;quot;, &amp;quot;zhao&amp;quot;, &amp;quot;qian&amp;quot;, &amp;quot;sun&amp;quot;]
test[0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;shen&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test[0:1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;shen&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test[1:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;wang&amp;#39;, &amp;#39;zhao&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test[1:-1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;wang&amp;#39;, &amp;#39;zhao&amp;#39;, &amp;#39;qian&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test[1:]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;wang&amp;#39;, &amp;#39;zhao&amp;#39;, &amp;#39;qian&amp;#39;, &amp;#39;sun&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过上面例子可以看到,对于切片的两个索引,出来的结果包含左边索引的结果,而不包含右边index的结果.如果需要包含某一边的所有结果,则只需要将冒号的某一边空出来即可.&lt;/p&gt;
&lt;p&gt;当然也可以使用负数来进行索引,因为我们知道-1是最后一个元素,-2是倒数第二个元素.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = [1,2,3,4,5]
test[-3:-1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [3, 4]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test[-3:0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## []&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test[-3:]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [3, 4, 5]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到如果执行切片操作时,第一个索引指定的元素位于第二个索引指定的元素后面,结果就为空序列.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;序列相加&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.2.3&lt;/span&gt; 序列相加&lt;/h4&gt;
&lt;p&gt;可以使用加法运算符来拼接序列.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[1, 2, 3] + [4, 5, 6]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 4, 5, 6]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;Hello,&amp;#39; + &amp;#39;world!&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Hello,world!&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从错误消息可知,不能拼接列表和字符串,,虽然它们都是序列.一般而言,不能拼接不同类型的序列.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;乘法&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.2.4&lt;/span&gt; 乘法&lt;/h4&gt;
&lt;p&gt;将序列与数x相乘时,将重复这个序列x次来创建一个新序列:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;python&amp;#39; * 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;pythonpythonpythonpythonpython&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[1,2,3] * 5&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;None,空列表和初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;空列表是使用不包含任何内容的两个方括号([])表示的.如果要创建一个可包含10个元素的列表,但没有任何有用的内容,可像前面那样使用&lt;code&gt;[42]*10&lt;/code&gt;.但更准确的做法是使用&lt;code&gt;[0]*10&lt;/code&gt;,这将创建一个包含10个零的列表.但是更为准确合适的作发是使用&lt;code&gt;None&lt;/code&gt;,在python中,&lt;code&gt;None&lt;/code&gt;代表什么都没有.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;None
[None]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [None]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sequence = [None] * 10
sequence&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [None, None, None, None, None, None, None, None, None, None]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;成员资格&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.2.5&lt;/span&gt; 成员资格&lt;/h4&gt;
&lt;p&gt;要检查特定的值是否存在与序列中,可以使用判断运算符&lt;code&gt;in&lt;/code&gt;.返回值为逻辑值,满足时返回为&lt;code&gt;True&lt;/code&gt;,不满足时返回&lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;permisions = &amp;quot;rw&amp;quot;

&amp;#39;w&amp;#39; in permisions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;T&amp;#39; in permisions&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;users = [&amp;quot;shen&amp;quot;, &amp;quot;wang&amp;quot;]#一个列表
&amp;#39;wang&amp;#39; in users&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## True&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;tao&amp;#39; in users&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;长度最大值和最小值&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.2.6&lt;/span&gt; 长度,最大值和最小值&lt;/h4&gt;
&lt;p&gt;使用内置函数可以得到一个列表的长度,最大值及最小值.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;number = [1,2,3,4]#列表
len(number)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;max(number)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;min(number)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;string = [&amp;quot;a&amp;quot;, 1 ,2,3]
string
# len(string)
# max(string)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;a&amp;#39;, 1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;len(&amp;quot;shen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;len([&amp;quot;shen&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;列表python的主力&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.3&lt;/span&gt; 列表,Python的主力&lt;/h3&gt;
&lt;p&gt;列表是Python中使用非常广泛的类型.&lt;/p&gt;
&lt;div id=&#34;list函数&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.3.1&lt;/span&gt; &lt;code&gt;list()&lt;/code&gt;函数&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;list()&lt;/code&gt;函数可以用来简历列表.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list(&amp;quot;shen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;s&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;n&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;list([1,2,3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;列表是可以改变的.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;列表的基本操作&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.3.2&lt;/span&gt; 列表的基本操作&lt;/h4&gt;
&lt;p&gt;列表的最大有点在于它是可以修改的.&lt;/p&gt;
&lt;div id=&#34;修改列表给元素赋值&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.3.2.1&lt;/span&gt; 修改列表:给元素赋值&lt;/h5&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = [1,2,3]
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x[2] = 5
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 5]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;删除列表中的元素&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.3.2.2&lt;/span&gt; 删除列表中的元素&lt;/h5&gt;
&lt;p&gt;使用&lt;code&gt;del&lt;/code&gt;语句可以删除列表中的某个元素.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;names = [&amp;quot;alice&amp;quot;, &amp;quot;beth&amp;quot;, &amp;quot;cecil&amp;quot;]
del names[1]
names&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;alice&amp;#39;, &amp;#39;cecil&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;使用切片对多个元素进行修改&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.3.2.3&lt;/span&gt; 使用切片对多个元素进行修改&lt;/h5&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;name = list(&amp;quot;name&amp;quot;)
name&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;n&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;e&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;name[2:] = list(&amp;quot;shen&amp;quot;)
name&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;n&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;n&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;name[4:] = list(&amp;quot;wa&amp;quot;)
name&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;n&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;w&amp;#39;, &amp;#39;a&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是,使用切片进行赋值或者修改,是可以将其替换为不同长度的东西的.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = list(&amp;quot;wang&amp;quot;)
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;w&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;g&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test[2:] = list(&amp;quot;shen&amp;quot;)
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;w&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;n&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test[2:3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;s&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test[2:3] = list(&amp;quot;shen&amp;quot;)
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;w&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;s&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;n&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可以使用这个特性进行元素的插入:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;numbers = [1, 5]
numbers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;numbers[1:1]##这是一个空列表&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## []&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;numbers[1:1] = [2, 3, 4]#在第二个位置开始,插入新的list
numbers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 4, 5]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然,还可以利用这个特性删除切片.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;numbers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 4, 5]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;numbers[1:4]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [2, 3, 4]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;numbers[1:4] = []
numbers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 5]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然,删除仍然可以使用&lt;code&gt;del&lt;/code&gt;语句实现,最后结果是一致的.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;列表方法&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.3.2.4&lt;/span&gt; 列表方法&lt;/h5&gt;
&lt;p&gt;方法是与某列对象联系紧密的函数,一般使用下列方法进行调用:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;object.method(arguments)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这也是跟R不同的一点,R中并没有这类方法.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于将一个对象添加到列表末尾.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = [1,2,3]
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test.append(2)
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test.append([5,6,7])
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 2, [5, 6, 7]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test.append(10)
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 2, [5, 6, 7], 10]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test + [20]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 2, [5, 6, 7], 10, 20]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test + [10,20]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 2, [5, 6, 7], 10, 10, 20]&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用来清空列表的内容.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = [1,2,3]
test.clear()
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## []&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完全清空所有的内容.&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用来复制列表.在Python中,直接使用&lt;code&gt;=&lt;/code&gt;将一个列表赋值给另外一个对象名,其实只是关联而已,也就是说其实同一个列表关联到了两个名字而已.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = [1,2,3]
b = a
b[1] = 10
b&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 10, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a##a也会改变,和b保持一致&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 10, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;想要把a和b指向两个独立的不同的列表,需要使用&lt;code&gt;copy&lt;/code&gt;,将b关联到a的副本.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = [1,2,3]
b = a.copy()
b[1] = 10
b&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 10, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用来统计指定的元素在列表中出现的次数.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = [1,2,3,4,4]
a.count(1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.count(4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;count()&lt;/code&gt;一共有两个参数,第一个参数为’self’,也就是前面的对象,后买你的参数为&lt;code&gt;value&lt;/code&gt;指定要统计的元素.&lt;/p&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个方法跟&lt;code&gt;append&lt;/code&gt;的区别在于,它可以将一个独立的列表添加到列表后面.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = [1,2,3]
b = [4,5,6]
a.extend(b)
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 4, 5, 6]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.append(b)
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 4, 5, 6, [4, 5, 6]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a + b&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 4, 5, 6, [4, 5, 6], 4, 5, 6]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3, 4, 5, 6, [4, 5, 6]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意这几种方法的区别.&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于查找列表中指定值第一次出现的索引.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = list(&amp;quot;shen&amp;quot;)
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;s&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;n&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test.index(&amp;quot;h&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将一个对象插入到列表中.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = [1,2,3]
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.insert(1, &amp;quot;four&amp;quot;)
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, &amp;#39;four&amp;#39;, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a.insert(0, [1, &amp;quot;shen&amp;quot;])
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1, &amp;#39;shen&amp;#39;], 1, &amp;#39;four&amp;#39;, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;insert&lt;/code&gt;第一个参数用来指定需要插入的位置(索引),第二个参数用来指定需要插入的内容.插入的内容可以是单个元素,也可以是列表.&lt;/p&gt;
&lt;ol start=&#34;8&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;删除一个元素,默认为最后一个.修改原列表,并返回删除的元素.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = [1,2,3]
x.pop()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然,也可以使用&lt;code&gt;index&#39;&lt;/code&gt;参数,指定需要删除的元素.&lt;/p&gt;
&lt;ol start=&#34;9&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用于删除第一个为指定值的元素.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = list(&amp;quot;shen&amp;quot;)
test.remove(&amp;quot;h&amp;quot;)
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;s&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;n&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是,只删除第一个符合要求的元素,其他的不会删除.&lt;/p&gt;
&lt;ol start=&#34;10&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;reverse&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将元素顺序按相反顺序重新排列.&lt;/p&gt;
&lt;ol start=&#34;11&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对列表元素重新进行排列.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = [&amp;#39;aardvark&amp;#39;, &amp;#39;abalone&amp;#39;, &amp;#39;acme&amp;#39;, &amp;#39;add&amp;#39;, &amp;#39;aerate&amp;#39;, &amp;quot;shen&amp;quot;, &amp;quot;wang&amp;quot;, &amp;quot;china&amp;quot;, &amp;quot;us&amp;quot;]
x.sort()
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;aardvark&amp;#39;, &amp;#39;abalone&amp;#39;, &amp;#39;acme&amp;#39;, &amp;#39;add&amp;#39;, &amp;#39;aerate&amp;#39;, &amp;#39;china&amp;#39;, &amp;#39;shen&amp;#39;, &amp;#39;us&amp;#39;, &amp;#39;wang&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;sort&lt;/code&gt;函数还可以通过设置&lt;code&gt;key&lt;/code&gt;参数来自定义排列规则,如可以将&lt;code&gt;key&lt;/code&gt;设置为函数&lt;code&gt;len&lt;/code&gt;,从而将列表按照元素的长度进行排序.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x.sort(key = len)
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;us&amp;#39;, &amp;#39;add&amp;#39;, &amp;#39;acme&amp;#39;, &amp;#39;shen&amp;#39;, &amp;#39;wang&amp;#39;, &amp;#39;china&amp;#39;, &amp;#39;aerate&amp;#39;, &amp;#39;abalone&amp;#39;, &amp;#39;aardvark&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;元组tuple不可修改的序列&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.3.3&lt;/span&gt; 元组(tuple):不可修改的序列&lt;/h4&gt;
&lt;p&gt;元组也是序列,但是跟列表不同的是,&lt;strong&gt;元组是不能修改的.&lt;/strong&gt;&lt;/p&gt;
&lt;div id=&#34;创建元组&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.3.3.1&lt;/span&gt; 创建元组&lt;/h5&gt;
&lt;p&gt;使用小括号(())可以创建元组.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = (1,2,3)
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (1, 2, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;()#空元组&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建只含有一个元素的元组比较特殊,需要在元素后面加上逗号.如果不加逗号,不能常见元组.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = (42)
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 42&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y = (x, )
y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (42,)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;3 * (10+3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 39&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;3 * (10+3,)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (13, 13, 13)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看了上面的例子,可以很好的明白为什么需要加上逗号,因为小括号在数学运算中还表示运算优先级的意思,所以需要使用逗号来区分是进行数学运算,还是要创建元组.&lt;/p&gt;
&lt;p&gt;当然,和列表一样,我们还可以使用&lt;code&gt;tuple()&lt;/code&gt;函数来创建元组.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tuple([1, 2, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (1, 2, 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;tuple(&amp;quot;shen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (&amp;#39;s&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;n&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可能意识到了,元组并不太复杂,而且除创建和访问其元素外,可对元组执行的操作不多.元组的创建及其元素的访问方式与其他序列相同.&lt;/p&gt;
&lt;p&gt;那为什么要单独出来一个元组类型呢?有两个原因:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;它们用作映射中的键(以及集合的成员),而列表不行.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有些内置函数和方法返回元组,这意味着必须跟它们打交道.只要不尝试修改元组,与元组打交道通常意味着像处理列表一样处理它们(需要使用元组没有的index和count等方法时例外).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;总结&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.4&lt;/span&gt; 总结&lt;/h3&gt;
&lt;p&gt;新的函数:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;len(seq)&lt;/td&gt;
&lt;td&gt;返回序列长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;list(seq)&lt;/td&gt;
&lt;td&gt;将序列转换为列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;max(args)&lt;/td&gt;
&lt;td&gt;返回序列或者一组参数中的最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;min(args)&lt;/td&gt;
&lt;td&gt;返回序列或者一组参数中的最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;reversed(seq)&lt;/td&gt;
&lt;td&gt;反向排列序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;sorted(seq)&lt;/td&gt;
&lt;td&gt;对列表或者序列进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;tuple(seq)&lt;/td&gt;
&lt;td&gt;将序列转换为元组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;列表(list)的方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;append&lt;/td&gt;
&lt;td&gt;将一个对象附加到列表末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;clear&lt;/td&gt;
&lt;td&gt;清空列表的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;copy&lt;/td&gt;
&lt;td&gt;复制列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;count&lt;/td&gt;
&lt;td&gt;计算指定的元素在列表中出现了多少次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;extend&lt;/td&gt;
&lt;td&gt;同时将多个值附加到列表末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;在列表中查找指定值第一次出现的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;insert&lt;/td&gt;
&lt;td&gt;将一个对象插入列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;pop&lt;/td&gt;
&lt;td&gt;从列表中删除一个元素(默认为最后一个元素)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;remove&lt;/td&gt;
&lt;td&gt;用于删除第一个为指定值的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;reverse&lt;/td&gt;
&lt;td&gt;按相反的顺序排列列表中的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;sort&lt;/td&gt;
&lt;td&gt;对列表进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;字符串&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; 字符串&lt;/h2&gt;
&lt;div id=&#34;字符串的基本操作&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1&lt;/span&gt; 字符串的基本操作&lt;/h3&gt;
&lt;p&gt;所有的标准序列操作(索引,切片,乘法,成员资格检查,长度,最小值和最大值)都适用于字符串.但是注意字符串是不可变的.&lt;/p&gt;
&lt;div id=&#34;字符串格式&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.1&lt;/span&gt; 字符串格式&lt;/h4&gt;
&lt;p&gt;将值转换为字符串并设置其格式是一个重要的操作,需要考虑众多不同的需求,因此随着时间的流逝,Python提供了多种字符串格式设置方法.以前,主要的解决方案是使用字符串格式设置运算符——百分号.这个运算符的行为类似于C语言中的经典函数printf：在%左边指定一个字符串(格式字符串),并在右边指定要设置其格式的值.指定要设置其格式的值时,可使用单个值(如字符串或数字),可使用元组(如果要设置多个值的格式),还可使用字典,其中最常见的是元组.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;format = &amp;quot;Hello, %s. %s enough for ya?&amp;quot;
format&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Hello, %s. %s enough for ya?&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;values = (&amp;#39;world&amp;#39;, &amp;#39;Hot&amp;#39;)
values&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (&amp;#39;world&amp;#39;, &amp;#39;Hot&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;format % values&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Hello, world. Hot enough for ya?&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述格式字符串中的&lt;code&gt;%s&lt;/code&gt;称为&lt;code&gt;转换说明符&lt;/code&gt;,指出了要将值插入什么地方.&lt;code&gt;s&lt;/code&gt;意味着将值视为字符串进行格式设置.如果指定的值不是字符串,将使用&lt;code&gt;str()&lt;/code&gt;将其转换为字符串.其他说明符将导致其他形式的转换.例如,&lt;code&gt;%.3f&lt;/code&gt;将值的格式设置为包含3位小数的浮点数.&lt;/p&gt;
&lt;p&gt;更为常用的是使用字符串方法&lt;code&gt;format&lt;/code&gt;.使用这种方法时,每个替换字段都用花括号括起,其中可能包含名称,还可能包含有关如何对相应的值进行转换和格式设置的信息.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;quot;{}, {} and {}&amp;quot;.format(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;, &amp;quot;third&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;first, second and third&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;quot;{0}, {1} and {2}&amp;quot;.format(&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;, &amp;quot;third&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;first, second and third&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;quot;{3} {0} {2} {1} {3} {0}&amp;quot;.format(&amp;quot;be&amp;quot;, &amp;quot;not&amp;quot;, &amp;quot;or&amp;quot;, &amp;quot;to&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;to be or not to be&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在大括号中的数字代表着&lt;code&gt;format&lt;/code&gt;中的内容的索引,如果不写,则默认按照先后顺序替换.&lt;/p&gt;
&lt;p&gt;当然,也可以使用命名的方法来提示如何替换.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;quot;{name} is a {position:s}.&amp;quot;.format(position=&amp;quot;postdoc&amp;quot;, name=&amp;quot;Japser Shen&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Japser Shen is a postdoc.&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;字符串方法&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.2&lt;/span&gt; 字符串方法&lt;/h4&gt;
&lt;p&gt;字符串的方法要多得多,很多都是从模块string那继承过来的.&lt;/p&gt;
&lt;p&gt;介绍一些比较常用的.&lt;/p&gt;
&lt;div id=&#34;center&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.2.1&lt;/span&gt; &lt;code&gt;center&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;通过在两边添加填充字符(默认为空格)让字符串居中.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;quot;The Middle by Jimmy Eat World&amp;quot;.center(40)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;     The Middle by Jimmy Eat World      &amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;quot;The Middle by Jimmy Eat World&amp;quot;.center(40, &amp;quot;*&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;*****The Middle by Jimmy Eat World******&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;find&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.2.2&lt;/span&gt; &lt;code&gt;find&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;在字符串中查找子串,如果找到,就返回字串的第一个字符的索引,否则返回-1.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;With a moo-moo here, and a moo-moo there&amp;#39;.find(&amp;#39;moo&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;With a moo-moo here, and a moo-moo there&amp;#39;.find(&amp;#39;shen&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你还可指定搜索的起点和终点.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;subject = &amp;#39;$$$ Get rich now!!! $$$&amp;#39;
subject&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;$$$ Get rich now!!! $$$&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;subject.find(&amp;#39;$$$&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;subject.find(&amp;#39;$$$&amp;#39;, 1) # 只指定了起点&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 20&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;subject.find(&amp;#39;!!!&amp;#39;, 0, 16) # 同时指定了起点和终点&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请注意,起点和终点值(第二个和第三个参数)指定的搜索范围包含起点,但不包含终点.这是Python惯常的做法.&lt;/p&gt;
&lt;p&gt;另外的和&lt;code&gt;find&lt;/code&gt;相关的方法还包括:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rfind&lt;/code&gt;,&lt;code&gt;index&lt;/code&gt;,&lt;code&gt;rindex&lt;/code&gt;,&lt;code&gt;count&lt;/code&gt;,&lt;code&gt;startswith&lt;/code&gt;和&lt;code&gt;endswith&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;join&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.2.3&lt;/span&gt; &lt;code&gt;join&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;join&lt;/code&gt;是一个非常重要的字符串方法,其作用与split相反,用于合并序列的元素.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;seq = list(&amp;quot;shen&amp;quot;)
seq&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;s&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;n&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sep = &amp;#39;+&amp;#39;
sep&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;+&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;sep.join(seq)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;s+h+e+n&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个方法跟R中的&lt;code&gt;paste&lt;/code&gt;函数非常类似.&lt;/p&gt;
&lt;p&gt;注意,所合并序列的元素必须都是字符串.如果list元素都是数字,是会报错的.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lower&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.2.4&lt;/span&gt; &lt;code&gt;lower&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;返回字符串的小写版本.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;Trondheim Hammer Dance&amp;#39;.lower()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;trondheim hammer dance&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;类似或者同一类方法还有:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;islower&lt;/code&gt;,&lt;code&gt;istitle&lt;/code&gt;,&lt;code&gt;isupper&lt;/code&gt;,&lt;code&gt;translate&lt;/code&gt;,&lt;code&gt;capitalize&lt;/code&gt;,&lt;code&gt;casefold&lt;/code&gt;,&lt;code&gt;swapcase&lt;/code&gt;,&lt;code&gt;title&lt;/code&gt;,&lt;code&gt;upper&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;replace&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.2.5&lt;/span&gt; &lt;code&gt;replace&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;将指定子串都替换为另一个字符串,并返回替换后的结果.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;This is a test&amp;#39;.replace(&amp;#39;is&amp;#39;, &amp;#39;eez&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Theez eez a test&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一共两个参数,第一个是需要替换的内容,第二个是替换之后的内容.&lt;/p&gt;
&lt;p&gt;到这里应该发现,其实这就是R中的&lt;code&gt;stringr&lt;/code&gt;包所要做的工作.&lt;/p&gt;
&lt;p&gt;另外还需要参考的函数:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tranlate&lt;/code&gt;和&lt;code&gt;expandtabs&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;split&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.2.6&lt;/span&gt; &lt;code&gt;split&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;其和&lt;code&gt;join&lt;/code&gt;作用相反,用于将字符串拆分为序列.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;1+2+3+4+5&amp;#39;.split(&amp;#39;+&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;Using the default&amp;#39;.split()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [&amp;#39;Using&amp;#39;, &amp;#39;the&amp;#39;, &amp;#39;default&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,默认拆分的标识符是空格( ).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;strip&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.2.7&lt;/span&gt; &lt;code&gt;strip&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;用于将字符串的开头和末尾的空白删除.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39; internal whitespace is kept &amp;#39;.strip()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;internal whitespace is kept&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然,还可以通过设置参数,来指定删除的字符类型.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;*** SPAM * for * everyone!!! ***&amp;#39;.strip(&amp;#39; *!&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;SPAM * for * everyone&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是还是只能删除开头和末尾.&lt;/p&gt;
&lt;p&gt;相似函数或者方法:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lstrip&lt;/code&gt;和&lt;code&gt;rstrip&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;translate&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.2.8&lt;/span&gt; &lt;code&gt;translate&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;方法&lt;code&gt;translate&lt;/code&gt;与&lt;code&gt;replace&lt;/code&gt;一样替换字符串的特定部分,但不同的是它只能进行单字符替换.这个方法的优势在于能够同时替换多个字符,因此效率比replace高.&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;translate&lt;/code&gt;前必须创建一个转换表.这个转换表指出了不同&lt;code&gt;Unicode&lt;/code&gt;码点之间的转换关系.要创建转换表,可对字符串类型&lt;code&gt;str&lt;/code&gt;调用方法&lt;code&gt;maketrans&lt;/code&gt;,这个方法接受两个参数:两个长度相同的字符串,它们指定要将第一个字符串中的每个字符都替换为第二个字符串中的相应字
符.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;table = str.maketrans(&amp;#39;cs&amp;#39;, &amp;#39;kz&amp;#39;)
table&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {99: 107, 115: 122}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(table)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,转换表是一个字典类型.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;&amp;#39;this is an incredible test&amp;#39;.translate(table)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;thiz iz an inkredible tezt&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;判断字符串是否满足某些特定的条件&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.2.9&lt;/span&gt; 判断字符串是否满足某些特定的条件&lt;/h5&gt;
&lt;p&gt;很多字符串方法都以is打头,如&lt;code&gt;isspace&lt;/code&gt;,&lt;code&gt;isdigit&lt;/code&gt;和&lt;code&gt;isupper&lt;/code&gt;,它们判断字符串是否具有特定的性质(如包含的字符全为空白,数字或大写).如果字符串具备特定的性质,这些方法就返回True,否则返回False.&lt;/p&gt;
&lt;p&gt;参考其他函数:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;isalnum&lt;/code&gt;,&lt;code&gt;isalpha&lt;/code&gt;,&lt;code&gt;isdecimal&lt;/code&gt;,&lt;code&gt;isdigit&lt;/code&gt;,&lt;code&gt;isidentifier&lt;/code&gt;,&lt;code&gt;islower&lt;/code&gt;,&lt;code&gt;isnumeric&lt;/code&gt;,&lt;code&gt;isprintable&lt;/code&gt;,&lt;code&gt;isspace&lt;/code&gt;,&lt;code&gt;istitle&lt;/code&gt;,&lt;code&gt;isupper&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;总结-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1.3&lt;/span&gt; 总结&lt;/h4&gt;
&lt;p&gt;将字符串的方法总结如下:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;42%&#34; /&gt;
&lt;col width=&#34;57%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Meanings&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.capitalize()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回字符串的副本,但将第一个字符大写.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.casefold()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回经过标准化后的字符串,标准化类似于转换为小写,但更适合用于对Unicode字符串进行不区分大小写的比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.center(width[, fillchar])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个长度为(len(string), width)的字符串.这个字符串的中间包含当前字符串,但两端用&lt;code&gt;fillchar&lt;/code&gt;指定的字符(默认为空格)填充&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.count(sub[, start[, end]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算子串sub出现的次数,可搜索范围限定为string[start:end]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.encode([encoding[,errors]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回使用指定编码和errors指定的错误处理方式对字符串进行编码的结果,参数errors的可能取值包含’strict’,‘ignore’,’replace’等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.endswith(suffix[,start[,end]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串是否以suffix结尾,还可使用索引start和end来指定匹配范围&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.expandtabs([tabsize])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回将字符串中的制表符展开为空格后的结果,可指定可选参数tabsize(默认为8)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.find(sub[, start[, end]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回找到的第一个子串sub的索引,如果没有找到这样的子串,就返回-1;还可将搜索范围限制为&lt;code&gt;string[start:end]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.format(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;实现了标准的Python字符串格式设置.将字符串中用大括号分隔的字段替换为相应的参数,再返回结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.format_map(mapping)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;类似于使用关键字参数调用format,只是参数是以映射的方式提供的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.index(sub[, start[, end]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回找到的第一个子串sub的索引,如果没有找到这样的子串,将引发ValueError异常;还可将搜索范围限制为&lt;code&gt;string[start:end]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.isalnum()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串中的字符是否都是字母或数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.isalpha()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串中的字符是否都是字母&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.isdecimal()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串中的字符是否都是十进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.isdigit()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串中的字符是否都是数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.isidentifier()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串是否可用作Python标识符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.islower()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串中的所有字母都是小写的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.isnumeric()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串中的所有字符是否都是数字字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.isprintable()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串中的字符是否都是可打印的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.isspace()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串中的字符是否都是空白字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.istitle()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串中位于非字母后面的字母都是大写的,且其他所有字母都是小写的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.isupper()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串中的字母是否都是大写的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.join(sequence)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将string与sequence中的所有字符串元素合并,并返回结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.ljust(width[, fillchar])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个长度为&lt;code&gt;max(len(string),width)&lt;/code&gt;的字符串,其开头是当前字符串的副本,而末尾是使用fillchar指定的字符(默认为空格)填充的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.lower()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符串中所有的字母都转换为小写,并返回结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.lstrip([chars])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符串开头所有的chars(默认为所有的空白字符,如空格,制表符和换行符)都删除,并返回结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;str.maketrans(x[,y[,z]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一个静态方法,它创建一个供translate使用的转换表.如果只指定了参数x,它必须是从字符或序数到Unicode序数或None(用于删除)的映射;也可使用两个表示源字符和目标字符的字符串调用它;还可提供第三个参数,它指定要删除的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.partition(sep)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在字符串中搜索sep,并返回元组(sep前面的部分, sep, sep后面的部分)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.replace(old,new[,max])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符串中的子串old替换为new,并返回结果;还可将最大替换次数限制为max&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.rfind(sub[,start[,end]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回找到的最后一个子串的索引,如果没有找到这样的子串,就返回-1;还可将搜索范围限定为&lt;code&gt;string[start:end]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.rindex(sub[,start[,end]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回找到的最后一个子串sub的索引,如果没有找到这样的子串,就引发ValueError异常;还可将搜索范围限定为&lt;code&gt;string[start:end]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.rjust(width[,fillchar])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个长度为max(len(string),width)的字符串,其末尾为当前字符串的拷贝,而开头是使用fillchar指定的字符(默认为空格)填充的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.rpartition(sep)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与partition相同,但从右往左搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.rstrip([chars])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符串末尾所有的chars字符(默认为所有的空白字符,如空格,制表符和换行符)都删除,并返回结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.rsplit([sep[, maxsplit]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与split相同,但指定了参数maxsplit,从右往左计算划分次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.split([sep[, maxsplit]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个列表,其中包含以sep为分隔符对字符串进行划分得到的结果(如果没有指定参数sep,将以所有空白字符为分隔符进行划分);还可将最大划分次数限制为maxsplit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.splitlines([keepends])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个列表,其中包含字符串中的所有行;如果参数keepends为True,将包含换行符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.startswith(prefix[,start[,end]])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查字符串是否以prefix打头;还可将匹配范围限制在索引start和end之间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.strip([chars])&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符串开头和结尾的所有chars字符(默认为所有空白字符,如空格,制表符和换行符)都删除,并返回结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.swapcase()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符串中所有字母的大小写都反转,并返回结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.title()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符串中所有单词的首字母都大写,并返回结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.translate(table)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据转换表table(这是使用maketrans创建的)对字符串中的所有字符都进行转换,并返回结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;string.upper()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符串中所有的字母都转换为大写,并返回结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;string.zfill(width)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在字符串左边填充0(但将原来打头的+或-移到开头),使其长度为width&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;字典&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2&lt;/span&gt; 字典&lt;/h3&gt;
&lt;p&gt;需要将一系列值组合成数据结构并通过编号来访问各个值时,列表很有用.本章介绍一种可通过名称来访问其各个值的数据结构.这种数据结构称为映射(mapping).字典是Python中唯一的内置映射类型,其中的值不按顺序排列,而是存储在键下.键可能是数,字符串或元组.&lt;/p&gt;
&lt;p&gt;在很多情况下,使用字典都比使用列表更合适.下面是一些字典的用途:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;表示棋盘的状态,其中每个键都是由坐标组成的元组；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存储文件修改时间,其中的键为文件名；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数字电话/地址簿.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;创建和使用字典&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2.1&lt;/span&gt; 创建和使用字典&lt;/h4&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;phonebook = {&amp;#39;Alice&amp;#39;:&amp;#39;2341&amp;#39;, &amp;#39;Beth&amp;#39;:&amp;#39;9102&amp;#39;, &amp;#39;Cecil&amp;#39;:&amp;#39;3258&amp;#39;}
phonebook&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;Alice&amp;#39;: &amp;#39;2341&amp;#39;, &amp;#39;Beth&amp;#39;: &amp;#39;9102&amp;#39;, &amp;#39;Cecil&amp;#39;: &amp;#39;3258&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;字典由键(key)及其相应的值(value)组成,这种键-值对称为项(item).在前面的示例中,键为名字,而值为电话号码.每个键与其值之间都用冒号(:)分隔,项之间用逗号分隔,而整个字典放在花括号内.空字典(没有任何项)用两个花括号表示,类似于下面这样:{}.&lt;/p&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;在字典(以及其他映射类型)中,键必须是独一无二的,而字典中的值无需如此.&lt;/p&gt;
&lt;div id=&#34;使用dict函数&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2.1.1&lt;/span&gt; 使用&lt;code&gt;dict&lt;/code&gt;函数&lt;/h5&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;items = [(&amp;#39;name&amp;#39;, &amp;#39;Gumby&amp;#39;), (&amp;#39;age&amp;#39;, 42)]
items&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [(&amp;#39;name&amp;#39;, &amp;#39;Gumby&amp;#39;), (&amp;#39;age&amp;#39;, 42)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(items)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = dict(items)
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;name&amp;#39;: &amp;#39;Gumby&amp;#39;, &amp;#39;age&amp;#39;: 42}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(d)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d[&amp;quot;name&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Gumby&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d[&amp;quot;age&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 42&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;items&lt;/code&gt;是一个列表,然后包含两个元组,每个元组都包含两个元素,然后每个元组的第一个元素作为键,第二个元素作为值.&lt;/p&gt;
&lt;p&gt;还可以使用另外一种形式,使用&lt;code&gt;dict&lt;/code&gt;创建字典.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = dict(name=&amp;#39;Gumby&amp;#39;, age=42)
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;name&amp;#39;: &amp;#39;Gumby&amp;#39;, &amp;#39;age&amp;#39;: 42}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;len(d)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;字典的基本操作&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2.1.2&lt;/span&gt; 字典的基本操作&lt;/h5&gt;
&lt;p&gt;字典的基本行为在很多方面都类似于序列.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;len(d)&lt;/code&gt;返回字典d包含的项(键-值对)数.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d[k]&lt;/code&gt;返回与键k相关联的值.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d[k] = v&lt;/code&gt;将值v关联到键k.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del d[k]&lt;/code&gt;删除键为k的项.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然字典和列表有多个相同之处,但也有一些重要的不同之处.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;键的类型&lt;/strong&gt;:字典中的键可以是整数,但并非必须是整数.字典中的键可以是任何不可变的类型,如浮点数(实数),字符串或元组.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动添加&lt;/strong&gt;:即便是字典中原本没有的键,也可以给它赋值,这将在字典中创建一个新项.然而,如果不使用append或其他类似的方法,就不能给列表中没有的元素赋值.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = dict(name=&amp;#39;Gumby&amp;#39;, age=42)
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;name&amp;#39;: &amp;#39;Gumby&amp;#39;, &amp;#39;age&amp;#39;: 42}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d[&amp;quot;sex&amp;quot;] = &amp;quot;male&amp;quot;
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;name&amp;#39;: &amp;#39;Gumby&amp;#39;, &amp;#39;age&amp;#39;: 42, &amp;#39;sex&amp;#39;: &amp;#39;male&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;成员资格&lt;/strong&gt;:表达式&lt;code&gt;k in d&lt;/code&gt;(其中d是一个字典)查找的是键而不是值,而表达式v in l(其中l是一个列表)查找的是值而不是索引.这看似不太一致,但你习惯后就会觉得相当自然.毕竟如果字典包含指定的键,检查相应的值就很容易.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;k in d&lt;/code&gt;检查字典d是否包含键为k的项.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;创建空的字典,使用大括号进行.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = {}
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x[&amp;#39;name&amp;#39;] = &amp;quot;shen&amp;quot;
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;name&amp;#39;: &amp;#39;shen&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = {&amp;quot;name&amp;quot;:&amp;quot;shen&amp;quot;, &amp;quot;age&amp;quot;:29}
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;name&amp;#39;: &amp;#39;shen&amp;#39;, &amp;#39;age&amp;#39;: 29}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;适用于字典的方法&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2.1.3&lt;/span&gt; 适用于字典的方法&lt;/h5&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;clear&lt;/code&gt;删除所有的字典项,这种操作是就地执行的(就像&lt;code&gt;list.sort&lt;/code&gt;一样),因此什么都不返回(或者说返回&lt;code&gt;None&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = {}
d[&amp;#39;name&amp;#39;] = &amp;#39;Gumby&amp;#39;
d[&amp;#39;age&amp;#39;] = 42
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;name&amp;#39;: &amp;#39;Gumby&amp;#39;, &amp;#39;age&amp;#39;: 42}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d.clear()
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {}&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;copy&lt;/code&gt;返回一个新字典,其包含的键-值对与原来的字典相同(这个方法执行的是浅复制,因为值本身是原件,而非副本).&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = {&amp;#39;username&amp;#39;:&amp;#39;admin&amp;#39;, &amp;#39;machines&amp;#39;:[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;]}
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;username&amp;#39;: &amp;#39;admin&amp;#39;, &amp;#39;machines&amp;#39;: [&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;]}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y = x.copy()
y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;username&amp;#39;: &amp;#39;admin&amp;#39;, &amp;#39;machines&amp;#39;: [&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;baz&amp;#39;]}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y[&amp;#39;username&amp;#39;] = &amp;#39;mlh&amp;#39;
y[&amp;#39;machines&amp;#39;].remove(&amp;#39;bar&amp;#39;)
x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;username&amp;#39;: &amp;#39;admin&amp;#39;, &amp;#39;machines&amp;#39;: [&amp;#39;foo&amp;#39;, &amp;#39;baz&amp;#39;]}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;username&amp;#39;: &amp;#39;mlh&amp;#39;, &amp;#39;machines&amp;#39;: [&amp;#39;foo&amp;#39;, &amp;#39;baz&amp;#39;]}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如你所见,当替换副本中的值时,原件不受影响.然而,如果修改副本中的值(就地修改而不是替换),原件也将发生变化,因为原件指向的也是被修改的值(如这个示例中的’machines’列表所示).&lt;/p&gt;
&lt;p&gt;为避免这种问题,一种办法是执行深复制,即同时复制值及其包含的所有值,等等.为此,可使用模块copy中的函数deepcopy.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from copy import deepcopy
d = {}
d[&amp;#39;names&amp;#39;] = [&amp;#39;Alfred&amp;#39;, &amp;#39;Bertrand&amp;#39;]
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;names&amp;#39;: [&amp;#39;Alfred&amp;#39;, &amp;#39;Bertrand&amp;#39;]}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;c = d.copy()
dc = deepcopy(d)
d[&amp;#39;names&amp;#39;].append(&amp;#39;Clive&amp;#39;)
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;names&amp;#39;: [&amp;#39;Alfred&amp;#39;, &amp;#39;Bertrand&amp;#39;, &amp;#39;Clive&amp;#39;]}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;c&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;names&amp;#39;: [&amp;#39;Alfred&amp;#39;, &amp;#39;Bertrand&amp;#39;, &amp;#39;Clive&amp;#39;]}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;dc&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;names&amp;#39;: [&amp;#39;Alfred&amp;#39;, &amp;#39;Bertrand&amp;#39;]}&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;fromkeys&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;fromkeys&lt;/code&gt;创建一个新字典,其中包含指定的键,且每个键对应的值都是&lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;{}.fromkeys([&amp;#39;name&amp;#39;, &amp;#39;age&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;name&amp;#39;: None, &amp;#39;age&amp;#39;: None}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个示例首先创建了一个空字典,再对其调用方法&lt;code&gt;fromkeys&lt;/code&gt;来创建另一个字典.&lt;/p&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;get&lt;/code&gt;为访问字典项提供了宽松的环境.通常,如果你试图访问字典中没有的项,将引发错误.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;d = {}
print(d[&amp;#39;name&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而使用get不会这样:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(d.get(&amp;#39;name&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## None&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d.get(&amp;#39;name&amp;#39;, &amp;#39;N/A&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;N/A&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;items&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;items&lt;/code&gt;返回一个包含所有字典项的&lt;strong&gt;列表&lt;/strong&gt;,其中每个元素都为&lt;code&gt;(key, value)&lt;/code&gt;的形式.字典项在列表中的排列顺序不确定.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = {&amp;#39;title&amp;#39;:&amp;#39;Python Web Site&amp;#39;, &amp;#39;url&amp;#39;:&amp;#39;http://www.python.org&amp;#39;, &amp;#39;spam&amp;#39;:0}
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;title&amp;#39;: &amp;#39;Python Web Site&amp;#39;, &amp;#39;url&amp;#39;: &amp;#39;http://www.python.org&amp;#39;, &amp;#39;spam&amp;#39;: 0}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d.items()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dict_items([(&amp;#39;title&amp;#39;, &amp;#39;Python Web Site&amp;#39;), (&amp;#39;url&amp;#39;, &amp;#39;http://www.python.org&amp;#39;), (&amp;#39;spam&amp;#39;, 0)])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = d.items()
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dict_items([(&amp;#39;title&amp;#39;, &amp;#39;Python Web Site&amp;#39;), (&amp;#39;url&amp;#39;, &amp;#39;http://www.python.org&amp;#39;), (&amp;#39;spam&amp;#39;, 0)])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(test)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;dict_items&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回值属于一种名为&lt;strong&gt;字典视图&lt;/strong&gt;的特殊类型.字典视图可用于迭代.另外,你还可确定其长度以及对其执行成员资格检查.其中每一个元素都是一个元组.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;it = d.items()
it&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dict_items([(&amp;#39;title&amp;#39;, &amp;#39;Python Web Site&amp;#39;), (&amp;#39;url&amp;#39;, &amp;#39;http://www.python.org&amp;#39;), (&amp;#39;spam&amp;#39;, 0)])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;len(d)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;len(it)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;kyes&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;keys&lt;/code&gt;返回一个字典视图,其中包含指定字典中的键.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;title&amp;#39;: &amp;#39;Python Web Site&amp;#39;, &amp;#39;url&amp;#39;: &amp;#39;http://www.python.org&amp;#39;, &amp;#39;spam&amp;#39;: 0}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d.items()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dict_items([(&amp;#39;title&amp;#39;, &amp;#39;Python Web Site&amp;#39;), (&amp;#39;url&amp;#39;, &amp;#39;http://www.python.org&amp;#39;), (&amp;#39;spam&amp;#39;, 0)])&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d.keys()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dict_keys([&amp;#39;title&amp;#39;, &amp;#39;url&amp;#39;, &amp;#39;spam&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;pop&lt;/code&gt;可用于获取与指定键相关联的值,并将该键-值对从字典中删除.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = {&amp;#39;x&amp;#39;:1, &amp;#39;y&amp;#39;:2}
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;x&amp;#39;: 1, &amp;#39;y&amp;#39;: 2}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d.pop(&amp;#39;x&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;y&amp;#39;: 2}&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;8&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;popitem&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;popitem&lt;/code&gt;类似于&lt;code&gt;list.pop&lt;/code&gt;,但&lt;code&gt;list.pop&lt;/code&gt;弹出列表中的最后一个元素,而&lt;code&gt;popitem&lt;/code&gt;随机地弹出一个字典项,因为字典项的顺序是不确定的,没有“最后一个元素”的概念.如果你要以高效地方式逐个删除并处理所有字典项,这可能很有用,因为这样无需先获取键列表.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = {&amp;#39;url&amp;#39;:&amp;#39;http://www.python.org&amp;#39;, &amp;#39;spam&amp;#39;:0, &amp;#39;title&amp;#39;:&amp;#39;Python Web Site&amp;#39;}
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;url&amp;#39;: &amp;#39;http://www.python.org&amp;#39;, &amp;#39;spam&amp;#39;: 0, &amp;#39;title&amp;#39;: &amp;#39;Python Web Site&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d.popitem()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (&amp;#39;title&amp;#39;, &amp;#39;Python Web Site&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;url&amp;#39;: &amp;#39;http://www.python.org&amp;#39;, &amp;#39;spam&amp;#39;: 0}&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;9&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;setdefault&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;setdefault&lt;/code&gt;有点像&lt;code&gt;get&lt;/code&gt;,因为它也获取与指定键相关联的值,但除此之外,&lt;code&gt;setdefault&lt;/code&gt;还在字典不包含指定的键时,在字典中添加指定的键-值对.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = {}
d.setdefault(&amp;#39;name&amp;#39;, &amp;#39;N/A&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;N/A&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;name&amp;#39;: &amp;#39;N/A&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d[&amp;#39;name&amp;#39;] = &amp;#39;Gumby&amp;#39;
d.setdefault(&amp;#39;name&amp;#39;, &amp;#39;N/A&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;Gumby&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;name&amp;#39;: &amp;#39;Gumby&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;10&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;update&lt;/code&gt;使用一个字典中的项来更新另一个字典.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = {
 &amp;#39;title&amp;#39;:&amp;#39;Python Web Site&amp;#39;,
 &amp;#39;url&amp;#39;:&amp;#39;http://www.python.org&amp;#39;,
 &amp;#39;changed&amp;#39;:&amp;#39;Mar 14 22:09:15 MET 2016&amp;#39;
}
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;title&amp;#39;: &amp;#39;Python Web Site&amp;#39;, &amp;#39;url&amp;#39;: &amp;#39;http://www.python.org&amp;#39;, &amp;#39;changed&amp;#39;: &amp;#39;Mar 14 22:09:15 MET 2016&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = {&amp;#39;title&amp;#39;:&amp;#39;Python Language Website&amp;#39;}
d.update(x)
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;title&amp;#39;: &amp;#39;Python Language Website&amp;#39;, &amp;#39;url&amp;#39;: &amp;#39;http://www.python.org&amp;#39;, &amp;#39;changed&amp;#39;: &amp;#39;Mar 14 22:09:15 MET 2016&amp;#39;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于通过参数提供的字典,将其项添加到当前字典中.如果当前字典包含键相同的项,就替换它.&lt;/p&gt;
&lt;ol start=&#34;11&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;code&gt;values&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;code&gt;values&lt;/code&gt;返回一个由字典中的值组成的字典视图.不同于方法&lt;code&gt;keys&lt;/code&gt;,方法&lt;code&gt;values&lt;/code&gt;返回的视图可能包含重复的值.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d = {&amp;quot;a&amp;quot;:1, &amp;quot;b&amp;quot;:2, &amp;quot;c&amp;quot;:3}
d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: 2, &amp;#39;c&amp;#39;: 3}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;d.values()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## dict_values([1, 2, 3])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;总结-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2.2&lt;/span&gt; 总结&lt;/h4&gt;
&lt;div id=&#34;新的函数&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2.2.1&lt;/span&gt; 新的函数&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;dict(seq)&lt;/td&gt;
&lt;td&gt;从键-值对,映射或关键字参数创建字典&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;适用于字典的方法-1&#34; class=&#34;section level5&#34;&gt;
&lt;h5&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2.2.2&lt;/span&gt; 适用于字典的方法&lt;/h5&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;53%&#34; /&gt;
&lt;col width=&#34;46%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除所有的字典项,是就地执行的,不返回任何值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个新字典,其包含的键值对与原来的字典相同(这个方法执行的是浅复制,因为值本身是原件,而非副本.如果想要深复制,即同时复制值及其包含的所有值,可使用模块&lt;code&gt;copy&lt;/code&gt;中的函数&lt;code&gt;deepcopy&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;fromkeys&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个新字典,其中包含指定的键,且每个键对应的值都是None.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;get&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;获得字典种的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;items&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个包含所有字典项的列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个字典视图,其中包含指定字典中的键.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用于获取与指定键相关联的值,并将该键值对从字典中删除.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;setdefault&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;有点像&lt;code&gt;get&lt;/code&gt;,因为它也获取与指定键相关联的值,但除此之外,&lt;code&gt;setdefault&lt;/code&gt;还在字典不包含指定的键时,在字典中添加指定的键-值对.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;update&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用一个字典中的项来更新另一个字典.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;values&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个由字典中的值组成的字典视图.不同于方法&lt;code&gt;keys&lt;/code&gt;,方法&lt;code&gt;values&lt;/code&gt;返回的视图可能包含重复的值.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;条件循环及其他语句&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 条件,循环及其他语句&lt;/h1&gt;
&lt;div id=&#34;条件和条件语句&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; 条件和条件语句&lt;/h2&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# test which values are True and False
# The rule:What is True? Anything that is not False!
values = [False, None, 0, 0.0, &amp;quot;&amp;quot;, &amp;#39;&amp;#39;, [], {}, (), True, &amp;#39;str&amp;#39;, &amp;quot;0&amp;quot;, -1, 3, 1000, &amp;#39;\&amp;#39;\&amp;#39;&amp;#39;]

for v in values:
    if (v):
        print(&amp;quot;True :&amp;quot;, v)
    else:
        print(&amp;quot;False:&amp;quot;, v)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## False: False
## False: None
## False: 0
## False: 0.0
## False: 
## False: 
## False: []
## False: {}
## False: ()
## True : True
## True : str
## True : 0
## True : -1
## True : 3
## True : 1000
## True : &amp;#39;&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;day03作业&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Day03作业&lt;/h1&gt;
&lt;p&gt;读取&lt;code&gt;fasta&lt;/code&gt;文件.&lt;/p&gt;
&lt;div id=&#34;fasta文件的格式&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; &lt;code&gt;fasta&lt;/code&gt;文件的格式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;Example_Sequence-1
TCGGGACAGCTTGTTGCCCCATCCATGGGGGTCTGCTCTAAGACCCTTTAATAATAGCGG
TTATTTTCGCAGGCAGGCACTGATCCTTAATACGGAAGCTACAACCCACAATCTGCCTAG
CCGTGATAAACCTTCGCCCCGTGCCTGGTCTACCATCTACTCAGGAAGTTGACCGGTCGG
TTACCTACCTCATGGCGTATGATTGTCCCGGACAGTGCTCCTATGGCTTGGAACCTAACG
CTCACGGGTTGCTAT
&amp;gt;Example_Sequence-2
CTACCGAGAGGTGCCGTCAAATTCTGCCTTTAACCCCCACATGTAGCTCAGTAACTGAGC
GGCTTGACGGCCCAGGTGCAGAGACGTACGATGCGTGAGCCTGCACAATAACCCACCATT
TAGACCATTCAAAAGCTTCCAGACAGTCTAGCTCGAAGAAATTT&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到&lt;code&gt;fasta&lt;/code&gt;文件每个sequence都是以&lt;code&gt;&amp;gt;&lt;/code&gt;开头,所以这可以作为识别每个sequence的标志.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;read_fasta函数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2&lt;/span&gt; &lt;code&gt;read_fasta&lt;/code&gt;函数&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;def read_fasta(fasta_filename):
    &amp;#39;&amp;#39;&amp;#39;
    Go through file, reading one line at a time, using a
    dictionary to store the DNA sequence for each of the FASTA
    entries (Gavin Sherlock, November 28, 2019)
    &amp;#39;&amp;#39;&amp;#39;    
    with open(fasta_filename, mode=&amp;#39;r&amp;#39;) as fasta_file:

        sequences = {}#创建一个空字典
        
        for line in fasta_file:#对每一行进行读取
            line = line.rstrip()#除去每行的右边的空格
            if line.startswith(&amp;#39;&amp;gt;&amp;#39;):# 如果这一行是以`&amp;gt;`开头,则是一个新的sequence
                line = line.lstrip(&amp;#39;&amp;gt;&amp;#39;)#将这行的`&amp;gt;`标志去除掉
                sequences[line] = &amp;#39;&amp;#39; # intialize dictionary for this entry
                currSeqName = line
            else:
                sequences[currSeqName] += line
    return(sequences)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;open函数&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.1&lt;/span&gt; &lt;code&gt;open&lt;/code&gt;函数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;open(name[, mode[, buffering]])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数说明:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;name&lt;/strong&gt;:一个包含了你要访问的文件名称的字符串值.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mode&lt;/strong&gt;:mode决定了打开文件的模式:只读,写入,追加等.所有可取值见如下的完全列表.这个参数是非强制的,默认文件访问模式为只读(r).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;buffering&lt;/strong&gt;:如果buffering的值被设为0,就不会有寄存.如果 buffering的值取1,访问文件时会寄存行.如果将 buffering的值设为大于1的整数,表明了这就是的寄存区的缓冲大小.如果取负值,寄存区的缓冲大小则为系统默认.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同模式打开文件的完全列表:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;36%&#34; /&gt;
&lt;col width=&#34;63%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;r&lt;/td&gt;
&lt;td&gt;以只读方式打开文件.文件的指针将会放在文件的开头.这是默认模式.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;rb&lt;/td&gt;
&lt;td&gt;以二进制格式打开一个文件用于只读.文件指针将会放在文件的开头.这是默认模式.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;r+&lt;/td&gt;
&lt;td&gt;打开一个文件用于读写.文件指针将会放在文件的开头.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;rb+&lt;/td&gt;
&lt;td&gt;以二进制格式打开一个文件用于读写.文件指针将会放在文件的开头.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;w&lt;/td&gt;
&lt;td&gt;打开一个文件只用于写入.如果该文件已存在则打开文件,并从开头开始编辑,即原有内容会被删除.如果该文件不存在,创建新文件.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;wb&lt;/td&gt;
&lt;td&gt;以二进制格式打开一个文件只用于写入.如果该文件已存在则打开文件,并从开头开始编辑,即原有内容会被删除.如果该文件不存在,创建新文件.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;w+&lt;/td&gt;
&lt;td&gt;打开一个文件用于读写.如果该文件已存在则打开文件,并从开头开始编辑,即原有内容会被删除.如果该文件不存在,创建新文件.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;wb+&lt;/td&gt;
&lt;td&gt;以二进制格式打开一个文件用于读写.如果该文件已存在则打开文件,并从开头开始编辑,即原有内容会被删除.如果该文件不存在,创建新文件.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;打开一个文件用于追加.如果该文件已存在,文件指针将会放在文件的结尾.也就是说,新的内容将会被写入到已有内容之后.如果该文件不存在,创建新文件进行写入.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ab&lt;/td&gt;
&lt;td&gt;以二进制格式打开一个文件用于追加.如果该文件已存在,文件指针将会放在文件的结尾.也就是说,新的内容将会被写入到已有内容之后.如果该文件不存在,创建新文件进行写入.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;a+&lt;/td&gt;
&lt;td&gt;打开一个文件用于读写.如果该文件已存在,文件指针将会放在文件的结尾.文件打开时会是追加模式.如果该文件不存在,创建新文件用于读写.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;ab+&lt;/td&gt;
&lt;td&gt;以二进制格式打开一个文件用于追加.如果该文件已存在,文件指针将会放在文件的结尾.如果该文件不存在,创建新文件用于读写.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;with语句&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.2.2&lt;/span&gt; &lt;code&gt;with&lt;/code&gt;语句&lt;/h3&gt;
&lt;p&gt;可以参考下面的帖子:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/u012609509/article/details/72911564&#34; class=&#34;uri&#34;&gt;https://blog.csdn.net/u012609509/article/details/72911564&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python Cookbook</title>
      <link>/post/2019-11-18-python-summary/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-18-python-summary/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#基础&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pycharm-cookbook&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Pycharm cookbook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#注释快捷键&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; 注释快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#将project上传到github&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; 将project上传到github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#如何更改每个项目的解释器版本&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; 如何更改每个项目的解释器版本?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#创建文件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.4&lt;/span&gt; 创建文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#运行代码&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.5&lt;/span&gt; 运行代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#修改默认的快捷键&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.6&lt;/span&gt; 修改默认的快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#编码设置&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.7&lt;/span&gt; 编码设置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jupyter-notbook&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Jupyter notbook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#修改工作路径&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3.1&lt;/span&gt; 修改工作路径&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;基础&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 基础&lt;/h1&gt;
&lt;/div&gt;
&lt;div id=&#34;pycharm-cookbook&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Pycharm cookbook&lt;/h1&gt;
&lt;div id=&#34;注释快捷键&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; 注释快捷键&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ctl+/&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;将project上传到github&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; 将project上传到github&lt;/h2&gt;
&lt;p&gt;参考下面帖子:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/feixuelove1009/p/5955332.html&#34; class=&#34;uri&#34;&gt;https://www.cnblogs.com/feixuelove1009/p/5955332.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;如何更改每个项目的解释器版本&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; 如何更改每个项目的解释器版本?&lt;/h2&gt;
&lt;p&gt;File -&amp;gt; Settings -&amp;gt;project -&amp;gt; Project Interpreter&lt;/p&gt;
&lt;p&gt;然后选择即可.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;创建文件&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.4&lt;/span&gt; 创建文件&lt;/h2&gt;
&lt;p&gt;File -&amp;gt; new&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;运行代码&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.5&lt;/span&gt; 运行代码&lt;/h2&gt;
&lt;p&gt;可以一行行的运行代码,修改默认快捷键位&lt;code&gt;ctl+enter&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;修改默认的快捷键&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.6&lt;/span&gt; 修改默认的快捷键&lt;/h2&gt;
&lt;p&gt;在File -&amp;gt;keymap下&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;编码设置&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.7&lt;/span&gt; 编码设置&lt;/h2&gt;
&lt;p&gt;需要将pycharm的所有编码设置为&lt;code&gt;UTF-8&lt;/code&gt;.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;File -&amp;gt; Setting -&amp;gt; Editor -&amp;gt; File Encoding&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;pycharm_encoding.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同时在每个文件的开头添加:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#-*- coding: utf-8 -*&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;jupyter-notbook&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Jupyter notbook&lt;/h1&gt;
&lt;div id=&#34;修改工作路径&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;3.1&lt;/span&gt; 修改工作路径&lt;/h2&gt;
&lt;p&gt;打开默认时C盘.在Win中可以按照下面方法修改路径.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:
cd ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后使用下列命令启动&lt;code&gt;jupyter notebook&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jupyter notebook&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python forbioinformatics课程</title>
      <link>/post/2019-11-18-python-for-bioinformatics/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-18-python-for-bioinformatics/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#第一次课程-day-01&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 第一次课程 (Day 01)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#前期准备&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 前期准备&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装anaconda&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.1&lt;/span&gt; 安装&lt;code&gt;Anaconda&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装atom和hydrogen&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.2&lt;/span&gt; 安装&lt;code&gt;Atom&lt;/code&gt;和&lt;code&gt;Hydrogen&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#下载第一天课件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.3&lt;/span&gt; 下载第一天课件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装mobaxterm&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.4&lt;/span&gt; 安装&lt;code&gt;MobaXterm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#课程&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; 课程&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#函数function&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.1&lt;/span&gt; 函数(function)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#方法method&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.2&lt;/span&gt; 方法(method)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#语句&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2.3&lt;/span&gt; 语句&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;第一次课程-day-01&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 第一次课程 (Day 01)&lt;/h1&gt;
&lt;p&gt;收到老师邮件,如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The first class of the BIOS274 mini-course is on Monday at 9:30a in room M112 (the room is entered from Alway building courtyard).&lt;br /&gt;
There is software that you need to install before this first class.&lt;br /&gt;
1. Anaconda (this has Python 3, jupyter, and much more)&lt;br /&gt;
2. Atom and Hydrogen&lt;br /&gt;
3. Karel the Robot [also available from the canvas Files &amp;gt; Lectures &amp;gt; Day1 folder]&lt;br /&gt;
4. Only if you have a Windows computer, MobaXterm&lt;br /&gt;
The syllabus has details on where to find these tools and how to test the install:&lt;br /&gt;
&lt;a href=&#34;https://docs.google.com/document/d/140OLR6tMPTvYwmHBREiDRIvTA1cXoXWzfVP-px9IlEs&#34; class=&#34;uri&#34;&gt;https://docs.google.com/document/d/140OLR6tMPTvYwmHBREiDRIvTA1cXoXWzfVP-px9IlEs&lt;/a&gt;&lt;br /&gt;
Be sure your laptop has a full charge, there are very few electrical outlets in M112.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;前期准备&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 前期准备&lt;/h2&gt;
&lt;div id=&#34;安装anaconda&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.1&lt;/span&gt; 安装&lt;code&gt;Anaconda&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;这个已经安装.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;安装atom和hydrogen&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.2&lt;/span&gt; 安装&lt;code&gt;Atom&lt;/code&gt;和&lt;code&gt;Hydrogen&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Atom&lt;/code&gt;我以前就安装过.&lt;/p&gt;
&lt;p&gt;Hydrogen是一个能在Atom中模拟Jupyter编辑方式的插件,安装教程参考如下帖子:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/simplehouse/article/details/78348298&#34; class=&#34;uri&#34;&gt;https://blog.csdn.net/simplehouse/article/details/78348298&lt;/a&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;首先安装&lt;code&gt;IJavascript&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打开&lt;code&gt;terminal&lt;/code&gt;,这是微软新开发的类似于linux终端的应用.&lt;/p&gt;
&lt;p&gt;输入下列代码:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g ijavascript&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;安装&lt;code&gt;Jupyter&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用pip工具安装,仍然在terminal下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install --upgrade pip
pip install jupyter&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;全局安装&lt;code&gt;IJavascript&lt;/code&gt;内核&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;ijsinstall --install=global&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;在&lt;code&gt;Atom&lt;/code&gt;中安装&lt;code&gt;Hydrogen&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;直接输入下列代码,在terminal中:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apm install hydrogen&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;更新&lt;code&gt;Hydrogen&lt;/code&gt;的内核&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;IJavascript&lt;/code&gt;内核安装完毕,并不意味着&lt;code&gt;Hydrogen&lt;/code&gt;就能开始使用,需使用&lt;code&gt;Hydrogen: Update Kernels&lt;/code&gt;命令更新内核.(通过&lt;code&gt;cmd/ctl +shift + P&lt;/code&gt;打开&lt;code&gt;Atom&lt;/code&gt;的&lt;code&gt;Command Palette&lt;/code&gt;执行),或者重新启动一次&lt;code&gt;Atom&lt;/code&gt;也可以更新其内核.&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打开Atom,然后新建一个文件,保存位&lt;code&gt;py&lt;/code&gt;文件,然后使用快捷键&lt;code&gt;ctl/cmd + Enter&lt;/code&gt;可以执行&lt;code&gt;Hydrogen&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;下载第一天课件&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.3&lt;/span&gt; 下载第一天课件&lt;/h3&gt;
&lt;p&gt;地址如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\study\python class\karel_the_robot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;安装mobaxterm&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.4&lt;/span&gt; 安装&lt;code&gt;MobaXterm&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;老师给了介绍链接:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/140OLR6tMPTvYwmHBREiDRIvTA1cXoXWzfVP-px9IlEs/edit&#34; class=&#34;uri&#34;&gt;https://docs.google.com/document/d/140OLR6tMPTvYwmHBREiDRIvTA1cXoXWzfVP-px9IlEs/edit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只有windows的电脑才需要安装该软件.&lt;/p&gt;
&lt;p&gt;查了以下,这个其实跟&lt;code&gt;Xshell&lt;/code&gt;很像,用来连接Linux的工具.&lt;/p&gt;
&lt;p&gt;参考帖子如下:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_35353187/article/details/81355088&#34; class=&#34;uri&#34;&gt;https://blog.csdn.net/weixin_35353187/article/details/81355088&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官网下载:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mobaxterm.mobatek.net/&#34; class=&#34;uri&#34;&gt;https://mobaxterm.mobatek.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载之后,直接解压缩安装即可.&lt;/p&gt;
&lt;p&gt;安装结束之后,打开如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mobaxterm.png&#34; /&gt;
这个软件的好处是可以模拟terminal,所以其实也可以代替微软自带的terminal.&lt;/p&gt;
&lt;p&gt;到这里,就已经准备好了老师的课前要求.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;课程&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; 课程&lt;/h2&gt;
&lt;p&gt;跟R不同,python中有不同的对象来执行命令,常见的有语句,函数(function)和方法(method).我们简单来介绍一下他们.&lt;/p&gt;
&lt;div id=&#34;函数function&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.1&lt;/span&gt; 函数(function)&lt;/h3&gt;
&lt;p&gt;这是跟R最像也是一致的东西,所以比较好理解.函数是封装了多条语句用来完成特定任务的一段代码.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(object, arg1, arg2,...)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数执行的时候,第一个参数一般是要处理的对象.然后是其他的一些形参.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = [1 ,2 ,3]
sum(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;str(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;[1, 2, 3]&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到,跟R一样,对一个对象用某个R数处理之后,一般会返回处理结果,并且对原来的对象并没有做任何处理,原来的对象没有发生任何变化,如果想要得到处理之后的结果,需要将其赋值给某个对象.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = [1,2,3]
b = str(a)
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1, 2, 3]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;b&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;[1, 2, 3]&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;list&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;type(b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;方法method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.2&lt;/span&gt; 方法(method)&lt;/h3&gt;
&lt;p&gt;R中好像没有方法?方法一般是对某些特殊类型的对象进行处理,比如对于字符串,就有很多可以用于字符串处理的方法.方法的调用是使用下列语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;object.method(arg1, arg2,...)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test = &amp;quot;Jasper Shen is a postdoc at Stanford University.&amp;quot;
type(test)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;class &amp;#39;str&amp;#39;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test.find(&amp;quot;S&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;test.count(&amp;quot;S&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方法和函数有一点最不一样的,如果实对对象进行处理,那么不需要赋值,很多时候是对对象&lt;code&gt;就地改变的&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;语句&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2.3&lt;/span&gt; 语句&lt;/h3&gt;
&lt;p&gt;语句是一段可执行的代码,常见的有赋值语句(&lt;code&gt;=&lt;/code&gt;),&lt;code&gt;if&lt;/code&gt;,&lt;code&gt;for&lt;/code&gt;,&lt;code&gt;while&lt;/code&gt;,&lt;code&gt;import&lt;/code&gt;,&lt;code&gt;return&lt;/code&gt;,&lt;code&gt;break&lt;/code&gt;,&lt;code&gt;pass&lt;/code&gt;,&lt;code&gt;with&lt;/code&gt;语句等.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ggplot2做蝴蝶图</title>
      <link>/post/2019-11-16-butterfly-plot/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-16-butterfly-plot/</guid>
      <description>


&lt;p&gt;使用&lt;code&gt;ggplot2&lt;/code&gt;画蝴蝶图.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tidyverse&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages ------------------------------------------------------------------------ tidyverse 1.2.1 --&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v ggplot2 3.2.1     v purrr   0.3.2
## v tibble  2.1.3     v dplyr   0.8.3
## v tidyr   1.0.0     v stringr 1.4.0
## v readr   1.3.1     v forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tibble&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tidyr&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;dplyr&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts --------------------------------------------------------------------------- tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;##构建示例数据
df &amp;lt;- 
mtcars %&amp;gt;% 
  select(carb, wt, gear) %&amp;gt;% 
  filter(gear == 3 | gear == 4) %&amp;gt;%  ##只选择gear位3或者4的车
  group_by(carb, gear) %&amp;gt;% 
  summarise(mean = mean(wt)) %&amp;gt;% #计算每类车的wt的平均值
  ungroup() %&amp;gt;% 
  mutate(carb = factor(carb, levels = unique(carb)),
         gear = factor(gear, levels = unique(gear)))

##观察数据
df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 3
##   carb  gear   mean
##   &amp;lt;fct&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt;
## 1 1     3      3.05
## 2 1     4      2.07
## 3 2     3      3.56
## 4 2     4      2.68
## 5 3     3      3.86
## 6 4     3      4.69
## 7 4     4      3.09&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;##这一步用来将某类(用于分组的变量)的值设置为负值
df &amp;lt;- 
df %&amp;gt;% 
  mutate(mean = case_when(
    gear == 4 ~ -1*mean,
    gear == 3 ~  mean
  )
  )


df %&amp;gt;% 
  ggplot(aes(x = carb, mean, fill = gear)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;, width = 0.5) +
  labs(x = &amp;quot;Carb&amp;quot;, y = &amp;quot;WT mean&amp;quot;) +
  scale_y_continuous(breaks = c(-2, 0, 2, 4), labels = c(2, 0 ,2, 4)) +
  theme_bw() +
  coord_flip()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/en/post/2019-11-16-butterfly-plot/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=&#34;fab fa-twitter&#34;&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=&#34;fab fa-weixin&#34;&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=&#34;fab fa-qq&#34;&gt;&lt;/i&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>KEGG数据库总结</title>
      <link>/post/2019-11-14-kegg/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-14-kegg/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#kegg-pathway数据库&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; KEGG Pathway数据库&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#背景&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#kgml的overview&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; &lt;code&gt;KGML&lt;/code&gt;的overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#如何获得某个pathwaykgml文件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; 如何获得某个pathway&lt;code&gt;KGML&lt;/code&gt;文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#pathway&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4&lt;/span&gt; Pathway&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#pathway-element&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4.1&lt;/span&gt; Pathway element&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#entry条目&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.5&lt;/span&gt; Entry(条目)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#entry-element&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.5.1&lt;/span&gt; Entry element&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#relation&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.6&lt;/span&gt; Relation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#relation元素&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.6.1&lt;/span&gt; relation元素&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reaction反应&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.7&lt;/span&gt; Reaction反应&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;kegg-pathway数据库&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; KEGG Pathway数据库&lt;/h1&gt;
&lt;p&gt;KEGG pathway的数据是使用&lt;code&gt;KGML&lt;/code&gt;(KEGG Markup Language)格式存储下来的.详细的信息可以阅读官方文档.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kegg.jp/kegg/xml/docs/&#34; class=&#34;uri&#34;&gt;https://www.kegg.jp/kegg/xml/docs/&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;背景&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 背景&lt;/h2&gt;
&lt;p&gt;KEGG pathway有两个类型.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;reference pathways&lt;/strong&gt;: 手动画的.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;organism-specific pathways&lt;/strong&gt;: 使用计算方法自动从reference pathway得到的.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;KGML&lt;/code&gt;文件中,&lt;code&gt;entry&lt;/code&gt;指的是node,而&lt;code&gt;relation&lt;/code&gt;和&lt;code&gt;reaction&lt;/code&gt;指的是整个网络的边.在KEGG pathway中,矩形表示基因(也可以认为是gene的产物蛋白质),而circle代表的是metabolite.&lt;/p&gt;
&lt;p&gt;如果网络中只有&lt;code&gt;entry&lt;/code&gt;和&lt;code&gt;relation&lt;/code&gt;,则该网络称为&lt;code&gt;protein network&lt;/code&gt;.如果只有&lt;code&gt;entry&lt;/code&gt;和&lt;code&gt;reaction&lt;/code&gt;,则称为&lt;code&gt;chemical network&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;所以一般来说,可以用两种方式来表示metabolic pathway:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;metabolic pathways viewed as both protein networks and chemical networks and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;regulatory pathways viewed as protein networks only.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id=&#34;kgml的overview&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; &lt;code&gt;KGML&lt;/code&gt;的overview&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;overview.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这幅图是整个&lt;code&gt;KGML&lt;/code&gt;的总览.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;如何获得某个pathwaykgml文件&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; 如何获得某个pathway&lt;code&gt;KGML&lt;/code&gt;文件&lt;/h2&gt;
&lt;p&gt;使用R包&lt;code&gt;KEGGlincs&lt;/code&gt;可以下载pathway的&lt;code&gt;KGML&lt;/code&gt;文件.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(KEGGREST)
library(KEGGlincs)
###
#获得所有has的pathway ID
path_id &amp;lt;- KEGGREST::keggList(database = &amp;quot;pathway&amp;quot;, 
                              organism = &amp;quot;hsa&amp;quot;)
head(path_id)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                                                     path:hsa00010 
##             &amp;quot;Glycolysis / Gluconeogenesis - Homo sapiens (human)&amp;quot; 
##                                                     path:hsa00020 
##                &amp;quot;Citrate cycle (TCA cycle) - Homo sapiens (human)&amp;quot; 
##                                                     path:hsa00030 
##                &amp;quot;Pentose phosphate pathway - Homo sapiens (human)&amp;quot; 
##                                                     path:hsa00040 
## &amp;quot;Pentose and glucuronate interconversions - Homo sapiens (human)&amp;quot; 
##                                                     path:hsa00051 
##          &amp;quot;Fructose and mannose metabolism - Homo sapiens (human)&amp;quot; 
##                                                     path:hsa00052 
##                     &amp;quot;Galactose metabolism - Homo sapiens (human)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;path_id &amp;lt;- 
  path_id %&amp;gt;% 
  names() %&amp;gt;% 
  unique() %&amp;gt;% 
  stringr::str_replace(&amp;quot;path:&amp;quot;, &amp;quot;&amp;quot;)
head(path_id)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;hsa00010&amp;quot; &amp;quot;hsa00020&amp;quot; &amp;quot;hsa00030&amp;quot; &amp;quot;hsa00040&amp;quot; &amp;quot;hsa00051&amp;quot; &amp;quot;hsa00052&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;##下载kgml文件并进行解析
temp_kgml &amp;lt;- 
  KEGGlincs::get_KGML(pathwayid = path_id[1])
class(temp_kgml)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;KEGGPathway&amp;quot;
## attr(,&amp;quot;package&amp;quot;)
## [1] &amp;quot;KEGGgraph&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## KEGG Pathway
## [ Title ]: Glycolysis / Gluconeogenesis
## [ Name ]: path:hsa00010
## [ Organism ]: hsa
## [ Number ] :00010
## [ Image ] :http://www.kegg.jp/kegg/pathway/hsa/hsa00010.png
## [ Link ] :http://www.kegg.jp/kegg-bin/show_pathway?hsa00010
## ------------------------------------------------------------
## Statistics:
##  100 node(s)
##  89 edge(s)
##  35 reaction(s)
## ------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;get_KGML()&lt;/code&gt;函数其实分别使用了&lt;code&gt;KEGGREST&lt;/code&gt;包中的&lt;code&gt;keggGet()&lt;/code&gt;函数来下载的,然后使用&lt;code&gt;KEGGgraph&lt;/code&gt;包中的&lt;code&gt;paraseKGML()&lt;/code&gt;函数来解析.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml2 &amp;lt;-
  KEGGREST::keggGet(dbentries = path_id[1], option = &amp;quot;kgml&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## No encoding supplied: defaulting to UTF-8.&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(temp_kgml2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;character&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml2 &amp;lt;- 
  KEGGgraph::parseKGML(file = temp_kgml2)
temp_kgml2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## KEGG Pathway
## [ Title ]: Glycolysis / Gluconeogenesis
## [ Name ]: path:hsa00010
## [ Organism ]: hsa
## [ Number ] :00010
## [ Image ] :http://www.kegg.jp/kegg/pathway/hsa/hsa00010.png
## [ Link ] :http://www.kegg.jp/kegg-bin/show_pathway?hsa00010
## ------------------------------------------------------------
## Statistics:
##  100 node(s)
##  89 edge(s)
##  35 reaction(s)
## ------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pathway&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; Pathway&lt;/h2&gt;
&lt;div id=&#34;pathway-element&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4.1&lt;/span&gt; Pathway element&lt;/h3&gt;
&lt;p&gt;一共有六个属性.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Attribute.name
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Explanation
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
name
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Pathway ID
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
org
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ko/ec/org ID
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
number
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
pathway ID numebr
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
title
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
pathway title
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
image
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
pathway figure link
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
link
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
pathway link
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们可以下载pathway的图片.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;image_link &amp;lt;- slot(slot(temp_kgml, &amp;quot;pathwayInfo&amp;quot;), &amp;quot;image&amp;quot;)
image_link&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;http://www.kegg.jp/kegg/pathway/hsa/hsa00010.png&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(url = image_link, 
              destfile = basename(image_link), 
              mode = &amp;quot;wb&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;hsa00010.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;entry条目&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5&lt;/span&gt; Entry(条目)&lt;/h2&gt;
&lt;div id=&#34;entry-element&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5.1&lt;/span&gt; Entry element&lt;/h3&gt;
&lt;p&gt;包括了网络中的node的属性.属性包括以下内容.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Attribute.name
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Explanation
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
id
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ID of the entry
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
name
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
KEGG ID of the entry
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
type
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Type of the entry
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
link
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
Link of the entry
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
reaction
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
The KEGG ID of corresponding reaction
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#整体信息
temp_kgml@pathwayInfo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [ Title ]: Glycolysis / Gluconeogenesis
## [ Name ]: path:hsa00010
## [ Organism ]: hsa
## [ Number ] :00010
## [ Image ] :http://www.kegg.jp/kegg/pathway/hsa/hsa00010.png
## [ Link ] :http://www.kegg.jp/kegg-bin/show_pathway?hsa00010&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#分别的属性
temp_kgml@pathwayInfo@name&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;path:hsa00010&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@pathwayInfo@org&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;hsa&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@pathwayInfo@number&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;00010&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@pathwayInfo@title&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Glycolysis / Gluconeogenesis&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@pathwayInfo@image&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;http://www.kegg.jp/kegg/pathway/hsa/hsa00010.png&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@pathwayInfo@link&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;http://www.kegg.jp/kegg-bin/show_pathway?hsa00010&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;图片下载链接:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.kegg.jp/kegg/pathway/hsa/hsa00010.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pathway详细信息链接:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.kegg.jp/kegg-bin/show_pathway?hsa00010&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们下面看看pathwa中node的信息.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## KEGG Pathway
## [ Title ]: Glycolysis / Gluconeogenesis
## [ Name ]: path:hsa00010
## [ Organism ]: hsa
## [ Number ] :00010
## [ Image ] :http://www.kegg.jp/kegg/pathway/hsa/hsa00010.png
## [ Link ] :http://www.kegg.jp/kegg-bin/show_pathway?hsa00010
## ------------------------------------------------------------
## Statistics:
##  100 node(s)
##  89 edge(s)
##  35 reaction(s)
## ------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到这个pathway含有node,edge还有reaction.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# node
temp_kgml@nodes$`18`&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## KEGG Node (Entry &amp;#39;18&amp;#39;):
## ------------------------------------------------------------
## [ displayName ]: ALDOA, ALDA, GSD12, HEL-S-87p...
## [ Name ]: hsa:226,hsa:229,hsa:230
## [ Type ]: gene
## [ Link ]: http://www.kegg.jp/dbget-bin/www_bget?hsa:226+hsa:229+hsa:230
## ------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#edge
temp_kgml@edges[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   KEGG Edge (Type: ECrel):
## ------------------------------------------------------------
## [ Entry 1 ID ]: 73
## [ Entry 2 ID ]: 75
## [ Subtype ]: 
##   [ Subtype name ]: compound
##   [ Subtype value ]: 90
## ------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#reaction
temp_kgml@reactions[[1]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## KEGG Reaction(rn:R00710)
## ------------------------------------------------------------
## [ Name ]: rn:R00710
## [ Type ]: reversible
## [ Substrate Name ]: cpd:C00084
## [ Product Name ]: cpd:C00033&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;type属性的详细解释&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.5.1.1&lt;/span&gt; Type属性的详细解释&lt;/h4&gt;
&lt;p&gt;在pathway中,如果一个pathway链接到另外一个pathway,那么pathway也是会被作为一个node展示出来.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Attribute.name
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Explanation
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
ortholog
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the node is a KO (ortholog group)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
enzyme
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the node is an enzyme
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
reaction
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the node is a reaction
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
gene
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the node is a gene product (mostly a protein)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
group
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the node is a complex of gene products (mostly a protein complex)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
compound
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the node is a chemical compound (including a glycan)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
map
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the node is a linked pathway map
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
brite
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the node is a linked brite hierarchy
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
other
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the node is an unclassified type
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;relation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.6&lt;/span&gt; Relation&lt;/h2&gt;
&lt;div id=&#34;relation元素&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.6.1&lt;/span&gt; relation元素&lt;/h3&gt;
&lt;p&gt;这里面的relation不包括我们所知道的酶催化代谢物的联系.只包括两个proteins(gene products)或者两个KOs(ortholog groups)或者protein和compound&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Attribute.name
&lt;/th&gt;
&lt;th style=&#34;text-align:left;&#34;&gt;
Explanation
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
entry1
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the first (from) entry that defines this relation
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
entry2
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the second (to) entry that defines this relation
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
type
&lt;/td&gt;
&lt;td style=&#34;text-align:left;&#34;&gt;
the type of this relation
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;type属性&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.6.1.1&lt;/span&gt; Type属性&lt;/h4&gt;
&lt;p&gt;relation的type一共有5个,分别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ECrel&lt;/strong&gt;: enzyme-enzyme relation, indicating two enzymes catalyzing successive reaction steps.代表的是两个酶之间的联系,比如enzyme1-metabolite1-enzyme2-metabolite2.那么enzyme1-enzyme2之间的关系realtion就是&lt;code&gt;ECrel&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PPrel&lt;/strong&gt;: protein-protein interaction, such as binding and modification.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GErel&lt;/strong&gt;: gene expression interaction, indicating relation of transcription factor and target gene product.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PCrel&lt;/strong&gt;: protein-compound interaction,注意这个关系不是enzyme催化的关系.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;maplink&lt;/strong&gt;: 跟另外一个pathway的联系.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;subtype-element&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.6.1.2&lt;/span&gt; subtype element&lt;/h4&gt;
&lt;p&gt;每个relatio还有一个subtype属性.这个属性用来对relation做进一步的说明.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: interation/relation的信息.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包含以下几种信息.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;figure2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;compound&lt;/code&gt;是指这个relation其实是两个enzyme.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@edges[[1]]@entry1ID&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;73&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@edges[[1]]@entry2ID&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;75&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@edges[[1]]@type&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;ECrel&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@edges[[1]]@subtype&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $subtype
##   [ Subtype name ]: compound
##   [ Subtype value ]: 90&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个relation就是两个enzyme连接起来的.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reaction反应&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.7&lt;/span&gt; Reaction反应&lt;/h2&gt;
&lt;p&gt;reaction和relation很类似.不一样的是type属性.&lt;/p&gt;
&lt;p&gt;type属性包括&lt;code&gt;reversible&lt;/code&gt;和&lt;code&gt;irreversible&lt;/code&gt;.分别表示可逆反应和不可逆反映.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@reactions[[1]]@name&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;rn:R00710&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@reactions[[1]]@type&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;reversible&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@reactions[[1]]@substrateName&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;cpd:C00084&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temp_kgml@reactions[[1]]@productName&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;cpd:C00033&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Learning representations of microbe–metabolite interactions文献总结</title>
      <link>/post/2019-11-11-nm-mmvec/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-11-nm-mmvec/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#abstract&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#results&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#reference&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;文章题目:&lt;/p&gt;
&lt;p&gt;Learning representations of microbe–metabolite interactions&lt;/p&gt;
&lt;p&gt;文章Supplementary&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://static-content.springer.com/esm/art%3A10.1038%2Fs41592-019-0616-3/MediaObjects/41592_2019_616_MOESM1_ESM.pdf&#34; class=&#34;uri&#34;&gt;https://static-content.springer.com/esm/art%3A10.1038%2Fs41592-019-0616-3/MediaObjects/41592_2019_616_MOESM1_ESM.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文章中的interactions across omics就是指在统计学意义上的两个变量的关系,如相关性.&lt;/p&gt;
&lt;p&gt;microbe-metabolite relationship就是指微生物和metabolite的相关性.&lt;/p&gt;
&lt;div id=&#34;abstract&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Abstract&lt;/h1&gt;
&lt;p&gt;Previous work has been able to predict metabolite abundance profiles from microbe abundance profiles&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;. However, because conventional correlation techniques have unacceptably high false-discovery rates, finding meaningful relationships between genes within complex microbiomes and their products in the metabolome is challenging.&lt;/p&gt;
&lt;p&gt;传统的correlation计算方法有着非常大的错误发现率,因此发现microbe和他们的product metabolite还是非常具有挑战性的.&lt;/p&gt;
&lt;p&gt;Relative abundances of thousands of microbes and metabolites can be measured using sequencing technology and mass spectrometry, respectively, resulting in the generation of high-dimensional microbiome and metabolomics datasets.&lt;/p&gt;
&lt;p&gt;microbiome得到的定量信息也是relative abundance.对于metabolome数据,能够测到的metabolite依赖于提取的方法以及分析方法,因此其实我们得到的metabolome是a partial snapshot of the metabolome.并不完全的完整的.&lt;/p&gt;
&lt;p&gt;Quantifying microbe–metabolite interactions from these abundances requires estimating a distribution across all possible microbe–metabolite interactions.&lt;/p&gt;
&lt;p&gt;从相对定量的数据中得到microbe-metabolite interactions需要得到所有的microbe–metabolite interactions的分布.是否可以理解为需要由NULL分布,然后才能知道某个interaction是不是真的interaction?&lt;/p&gt;
&lt;p&gt;Pearson’s and Spearman’s correlations assume independence between interactions.&lt;/p&gt;
&lt;p&gt;我们常用的correlation方法假设两个变量之间的关系和其他的变量是独立的,这是不一定的.所以还有一种办法叫做偏相关性.&lt;/p&gt;
&lt;p&gt;作者举了例子来说明,为什么使用传统的correlation数据会早成错误发现(假阳性或者假阴性).&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;figure1.png&#34; alt=&#34;Supplementary Figure 1&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Supplementary Figure 1&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我并没有看懂他是什么意思?&lt;/p&gt;
&lt;p&gt;在microbome和metabolite中会有使用某个变量占所有变量的比例来表示这个变量的吗?&lt;/p&gt;
&lt;p&gt;好像并没有啊.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scale invariance&lt;/strong&gt;什么意思?标度不变.&lt;/p&gt;
&lt;p&gt;An alternative approach is to consider co-occurrence probabilities instead of correlations.&lt;/p&gt;
&lt;p&gt;一个可替代的方法是考虑共出现的概率而不是相关性.&lt;/p&gt;
&lt;p&gt;Here, co-occurrence probabilities refer to the conditional probability of observing a metabolite given that a microbe was observed, thereby allowing us to identify the most likely microbe–metabolite interactions.&lt;/p&gt;
&lt;p&gt;共出现概率是指当一个microbe(细菌)在的时候,观察到某个代谢物的条件概率.从而能够鉴定到真正的microbe-metabolite interaction.&lt;/p&gt;
&lt;p&gt;To do this, we propose ‘mmvec’, (microbe–metabolite vecors), a neural network that predicts an entire metabolite abundance profile from a single microbe sequence.&lt;/p&gt;
&lt;p&gt;因此作者提出了&lt;code&gt;mmvec&lt;/code&gt;(microbe–metabolite vecors)概念.利用neural network从一个single microbe的sequence来预测整个的metabolite abundance.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;figure2.png&#34; alt=&#34;Figure 1&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure 1&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这幅图是指如何使用microbe sequence去预测metabolite abundance.&lt;/p&gt;
&lt;p&gt;Through iterative training, mmvec can learn the co-occurrence probabilities between microbes and metabolites. The microbe–metabolite interactions can be ranked and visualized through standard dimensionality reduction interfaces, enabling interpretable findings.&lt;/p&gt;
&lt;p&gt;其实就是给定microbe的中的一个sequnce之后,预测所有metabolite abundance.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;results&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Results&lt;/h1&gt;
&lt;/div&gt;
&lt;div id=&#34;reference&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; Reference&lt;/h1&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Noecker, C. et al. Metabolic model-based integration of microbiome taxonomic and metabolomic profiles elucidates mechanistic links between ecological and metabolic variation. MSystems 1, e00013–e00015 (2016).&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Mallick, H. et al. Predictive metabolomic profiling of microbial communities using amplicon or metagenomic sequences. Nat. Commun. 10, 3136 (2019).&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R读取和输出数据</title>
      <link>/post/2019-11-12-r-import-export-data/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-12-r-import-export-data/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#csv文件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; &lt;code&gt;CSV&lt;/code&gt;文件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#读取&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 读取&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#readr包&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.1&lt;/span&gt; &lt;code&gt;readr&lt;/code&gt;包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;csv文件&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; &lt;code&gt;CSV&lt;/code&gt;文件&lt;/h1&gt;
&lt;div id=&#34;读取&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 读取&lt;/h2&gt;
&lt;div id=&#34;readr包&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.1&lt;/span&gt; &lt;code&gt;readr&lt;/code&gt;包&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;readr&lt;/code&gt;包中有几个函数可以读取&lt;code&gt;csv&lt;/code&gt;文件.其中第一个就是&lt;code&gt;read_csv()&lt;/code&gt;函数.另外还有一个与其非常类似的&lt;code&gt;read_csv2()&lt;/code&gt;函数,唯一区别在于&lt;code&gt;read_csv()&lt;/code&gt;读取的&lt;code&gt;csv&lt;/code&gt;文件分隔符是逗号(,),而&lt;code&gt;read_csv2()&lt;/code&gt;读取的分隔符是分号(;),这在某些欧洲国家会比较常见.需要注意一下.&lt;/p&gt;
&lt;p&gt;第一个参数&lt;code&gt;file&lt;/code&gt;用来指定要读取的文件的路径和名称.&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;readr&lt;/code&gt;自带的示例数据.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(readr)
test &amp;lt;- readr_example(path = &amp;quot;mtcars.csv&amp;quot;)
test&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;D:/software/R/R-3.6.0/library/readr/extdata/mtcars.csv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- read_csv(file = test)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   mpg = col_double(),
##   cyl = col_double(),
##   disp = col_double(),
##   hp = col_double(),
##   drat = col_double(),
##   wt = col_double(),
##   qsec = col_double(),
##   vs = col_double(),
##   am = col_double(),
##   gear = col_double(),
##   carb = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到读取数据的时候,显示出了每一列类型,他就按照这个类型对每一列进行解析.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;readr()&lt;/code&gt;默认读取前1000行,并对其类型进行猜测,然后按照猜测的类型对所有数据进行读取解析.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>使用rayshader包将ggplot2转换为3D图像</title>
      <link>/post/2019-11-11-ggpot2-3d/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-11-ggpot2-3d/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; 使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;rayshader&lt;/code&gt;包可以将&lt;code&gt;ggplot2&lt;/code&gt;图片转换为3D.&lt;/p&gt;
&lt;p&gt;参考原作者帖子:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tylermw.com/3d-ggplots-with-rayshader/&#34; class=&#34;uri&#34;&gt;https://www.tylermw.com/3d-ggplots-with-rayshader/&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;安装&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 安装&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;tylermorganwall/rayshader&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;使用&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; 使用&lt;/h1&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rayshader)
library(ggplot2)
library(tidyverse)

gg &amp;lt;- ggplot(diamonds, aes(x, depth)) +
  stat_density_2d(aes(fill = stat(nlevel)), 
                  geom = &amp;quot;polygon&amp;quot;,
                  n = 100,bins = 10,contour = TRUE) +
  facet_wrap(clarity~.) +
  scale_fill_viridis_c(option = &amp;quot;A&amp;quot;)
rayshader::plot_gg(gg, multicore = TRUE, width = 5, height = 5,scale = 250)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::shortcode(&amp;quot;video&amp;quot;, src = &amp;quot;./test.mp4&amp;quot;)&lt;/code&gt;&lt;/pre&gt;












  


&lt;video autoplay loop &gt;
  &lt;source src=&#34;./test.mp4&#34; type=&#34;video/mp4&#34;&gt;
&lt;/video&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::shortcode(&amp;quot;youtube&amp;quot;, &amp;quot;p4liifrbK8w&amp;quot;)&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/p4liifrbK8w&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>在美国购买车险</title>
      <link>/post/2019-11-10-car-insurance/</link>
      <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-10-car-insurance/</guid>
      <description>


&lt;p&gt;美国车必须购买车险,否则不能上路,有非常多的公司,可以直接在网上quote(报价),可以根据自己的需要选择不同的套餐,然后直接在网上购买就好了.我刚来美国的时候,在网上买的是progressive公司的,然后买了半年,马上就要到期了,因此需要再购买.&lt;/p&gt;
&lt;p&gt;比较奇怪的是,我当时只在progressive买了半年,从5.12-11.12,网站上显示的也是.但是很奇怪,他仍然给我提醒,还要接着再扣半年,并且我也找不到如何取消掉.&lt;/p&gt;
&lt;p&gt;我需要重新quote,因为我已经呆了大半年了,应该能够拿到一个更便宜的.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>tibble cookbook</title>
      <link>/post/2019-10-09-tibble-cookbook/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-10-09-tibble-cookbook/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#创建一个tibble&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 创建一个tibble&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#tibble函数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; &lt;code&gt;tibble()&lt;/code&gt;函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#as_tibble函数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; &lt;code&gt;as_tibble()&lt;/code&gt;函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tribble函数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; &lt;code&gt;tribble()&lt;/code&gt;函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#enframe函数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.4&lt;/span&gt; &lt;code&gt;enframe()&lt;/code&gt;函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tibble显示控制&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; tibble显示控制&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#使用print函数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; 使用&lt;code&gt;print()&lt;/code&gt;函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#修改options默认参数&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; 修改&lt;code&gt;options()&lt;/code&gt;默认参数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tibble切片操作&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; tibble切片操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tibble添加新的列或者行&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; tibble添加新的列或者行&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#添加新的行&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.1&lt;/span&gt; 添加新的行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#添加新的列&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4.2&lt;/span&gt; 添加新的列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tibble对列名和行名的操作&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5&lt;/span&gt; tibble对列名和行名的操作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#判断是否有行名&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.1&lt;/span&gt; 判断是否有行名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#行名和某一列互相转换&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;5.2&lt;/span&gt; 行名和某一列互相转换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;创建一个tibble&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 创建一个tibble&lt;/h1&gt;
&lt;div id=&#34;tibble函数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; &lt;code&gt;tibble()&lt;/code&gt;函数&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;tibble()&lt;/code&gt;可以创建新的&lt;code&gt;tibble&lt;/code&gt;对象,但是一般用来创建比较简单的tibble。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tidyverse&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Attaching packages ------------------------------------------------------------------------------------------------------- tidyverse 1.2.1 --&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## v ggplot2 3.2.1     v purrr   0.3.2
## v tibble  2.1.3     v dplyr   0.8.3
## v tidyr   1.0.0     v stringr 1.4.0
## v readr   1.3.1     v forcats 0.4.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tibble&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tidyr&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;dplyr&amp;#39; was built under R version 3.6.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## -- Conflicts ---------------------------------------------------------------------------------------------------------- tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a &amp;lt;- 1
b &amp;lt;- 2:6
tibble(a, b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##       a     b
##   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1     1     2
## 2     1     3
## 3     1     4
## 4     1     5
## 5     1     6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 使用下列方法修改列名
tibble(column1 = a, column2 = b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   column1 column2
##     &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt;
## 1       1       2
## 2       1       3
## 3       1       4
## 4       1       5
## 5       1       6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是,如果输入的vector长度不一致,只有其中某一个长度为1,才会循环补齐,否则报错.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tibble()&lt;/code&gt;函数有一个参数可以注意一下:&lt;code&gt;.name_repair&lt;/code&gt;,用来控制对那些不如何规矩的列名如何处理.常用的一共有4个选项:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;minimal&lt;/strong&gt; 对列名不做任何处理,既不做列名检查,也不做处理.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;unique&lt;/strong&gt; 保证列名都是唯一的并且不能为空.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#如果列名是重复的,会在列名后加入不同的序号.
try(
 tibble(a = 1:3, a = 1:3, 1:3, .name_repair = &amp;quot;unique&amp;quot;) 
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## New names:
## * a -&amp;gt; a...1
## * a -&amp;gt; a...2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   a...1 a...2 `1:3`
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     1     1
## 2     2     2     2
## 3     3     3     3&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;check_unique&lt;/strong&gt; 这是默认的参数设置,不对列名做修改,只做列名检查.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#如果列名是重复的,则会报错
try(
 tibble(a = 1:3, a = 1:3) 
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error : Column name `a` must not be duplicated.
## Use .name_repair to specify repair.
## Backtrace:
##      x
##   1. +-base::local(...)
##   2. | \-base::eval.parent(substitute(eval(quote(expr), envir)))
##   3. |   \-base::eval(expr, p)
##   4. |     \-base::eval(expr, p)
##   5. +-base::eval(...)
##   6. | \-base::eval(...)
##   7. |   \-rmarkdown::render(...)
##   8. |     \-knitr::knit(...)
##   9. |       \-knitr:::process_file(text, output)
##  10. |         +-base::withCallingHandlers(...)
##  11. |         +-knitr:::process_group(group)
##  12. |         \-knitr:::process_group.block(group)
##  13. |           \-knitr:::call_block(x)
##  14. |             \-knitr:::block_exec(params)
##  15. |               +-knitr:::in_dir(...)
##  16. |               \-knitr:::evaluate(...)
##  17. |                 \-evaluate::evaluate(...)
##  18. |                   \-evaluate:::evaluate_call(...)
##  19. |                     +-evaluate:::timing_fn(...)
##  20. |                     +-base:::handle(...)
##  21. |                     +-base::withCallingHandlers(...)
##  22. |                     +-base::withVisible(eval(expr, envir, enclos))
##  23. |                     \-base::eval(expr, envir, enclos)
##  24. |                       \-base::eval(expr, envir, enclos)
##  25. +-base::try(tibble(a = 1:3, a = 1:3))
##  26. | \-base::tryCatch(...)
##  27. |   \-base:::tryCatchList(expr, classes, parentenv, handlers)
##  28. |     \-base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
##  29. |       \-base:::doTryCatch(return(expr), name, parentenv, handler)
##  30. \-tibble::tibble(a = 1:3, a = 1:3)
##  31.   \-tibble:::lst_to_tibble(xlq$output, .rows, .name_repair, lengths = xlq$lengths)
##  32.     \-tibble:::set_repaired_names(x, .name_repair)
##  33.       +-rlang::set_names(x, repaired_names(names(x), .name_repair = .name_repair))
##  34.       | \-rlang:::set_names_impl(x, x, nm, ...)
##  35.       |   \-rlang::is_function(nm)
##  36.       |     \-rlang::is_closure(x)
##  37.       \-tibble:::repaired_names(names(x), .name_repair = .name_repair)
##  38.         \-tibble:::check_unique(new_name)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;universal&lt;/strong&gt; 保证列名都是唯一的并且符合R语言语法.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果有相同的列名,会在列名后加入不同的序号.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#如果列名是重复的,则会报错
try(
 tibble(a = 1:3, a = 1:3, .name_repair = &amp;quot;universal&amp;quot;) 
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## New names:
## * a -&amp;gt; a...1
## * a -&amp;gt; a...2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   a...1 a...2
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     1
## 2     2     2
## 3     3     3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;as_tibble函数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; &lt;code&gt;as_tibble()&lt;/code&gt;函数&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;as_tibble()&lt;/code&gt;函数可以将已有的matrix和data.frame转变为tibble对象.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test1 &amp;lt;- 
  matrix(1:6, ncol = 2)
tibble::as_tibble(test1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: `as_tibble.matrix()` requires a matrix with column names or a `.name_repair` argument. Using compatibility `.name_repair`.
## This warning is displayed once per session.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##      V1    V2
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     4
## 2     2     5
## 3     3     6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test2 &amp;lt;- 
  data.frame(a = 1:3, b = 2:4, stringsAsFactors = FALSE)
tibble::as_tibble(test2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##       a     b
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     2
## 2     2     3
## 3     3     4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;as_tibble()&lt;/code&gt;函数的参数与&lt;code&gt;tibble()&lt;/code&gt;大概相同,另外一个需要注意的的参数是:&lt;strong&gt;rownames&lt;/strong&gt;,用来控制如何处理原有的行名.如果设置为NULL,则去除掉行名(默认),如果设置为NA,则保留原来的列名.设置为一个string vector,则将其设置为新的列名.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tribble函数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; &lt;code&gt;tribble()&lt;/code&gt;函数&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;tribble()&lt;/code&gt;函数可以用另外一种方法来创建tibble对象.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tibble::tribble(
  ~colA, ~colB,
  ## two columns
  &amp;quot;a&amp;quot;,   1,
  &amp;quot;b&amp;quot;,   2,
  &amp;quot;c&amp;quot;,   3
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   colA   colB
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1 a         1
## 2 b         2
## 3 c         3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是,tibble和data.frame一样,他们中的元素也可以是list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tribble(
  ~x,  ~y,
  &amp;quot;a&amp;quot;, 1:3,
  &amp;quot;b&amp;quot;, 4:6
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 2
##   x     y        
##   &amp;lt;chr&amp;gt; &amp;lt;list&amp;gt;   
## 1 a     &amp;lt;int [3]&amp;gt;
## 2 b     &amp;lt;int [3]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;enframe函数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.4&lt;/span&gt; &lt;code&gt;enframe()&lt;/code&gt;函数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;enframe()&lt;/code&gt;可以将vector转换为tibble,另外有一个相反的函数,&lt;code&gt;deframe()&lt;/code&gt;函数,将tibble/data.frame转变为vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;enframe(x = 1:3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##    name value
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
## 1     1     1
## 2     2     2
## 3     3     3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;enframe(c(a = 5, b = 7))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 2
##   name  value
##   &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1 a         5
## 2 b         7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;enframe(list(one = 1, two = 2:3, three = 4:6))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   name  value    
##   &amp;lt;chr&amp;gt; &amp;lt;list&amp;gt;   
## 1 one   &amp;lt;dbl [1]&amp;gt;
## 2 two   &amp;lt;int [2]&amp;gt;
## 3 three &amp;lt;int [3]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;enframe()&lt;/code&gt;的第一个参数是&lt;code&gt;x&lt;/code&gt;,必须是一个vector或者list,他会将他的每一个元素的名字组成第一列,而其内容作为第二列转变为一个tibble.也就是说其只能用来创建两列的tibble.两列的列名默认为name和value如果想要修改,可以更改两个参数(name和value).&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;deframe()&lt;/code&gt;函数将一个一列或者两列的tibble转变为vector或者list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;deframe(enframe(1:3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1 2 3 
## 1 2 3&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tibble显示控制&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; tibble显示控制&lt;/h1&gt;
&lt;p&gt;tibble默认情况下只输出前十行内容,列自动适应屏幕宽度,如果想要输出比默认更多的数据,有以下几种方法.&lt;/p&gt;
&lt;div id=&#34;使用print函数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; 使用&lt;code&gt;print()&lt;/code&gt;函数&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;print()&lt;/code&gt;函数,可以控制行数和列数.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
# 默认显示
nycflights13::flights&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,
## #   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 输出15行及所有列数
nycflights13::flights %&amp;gt;% 
  print(n = 15, width = Inf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## 11  2013     1     1      558            600        -2      849
## 12  2013     1     1      558            600        -2      853
## 13  2013     1     1      558            600        -2      924
## 14  2013     1     1      558            600        -2      923
## 15  2013     1     1      559            600        -1      941
##    sched_arr_time arr_delay carrier flight tailnum origin dest  air_time
##             &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;
##  1            819        11 UA        1545 N14228  EWR    IAH        227
##  2            830        20 UA        1714 N24211  LGA    IAH        227
##  3            850        33 AA        1141 N619AA  JFK    MIA        160
##  4           1022       -18 B6         725 N804JB  JFK    BQN        183
##  5            837       -25 DL         461 N668DN  LGA    ATL        116
##  6            728        12 UA        1696 N39463  EWR    ORD        150
##  7            854        19 B6         507 N516JB  EWR    FLL        158
##  8            723       -14 EV        5708 N829AS  LGA    IAD         53
##  9            846        -8 B6          79 N593JB  JFK    MCO        140
## 10            745         8 AA         301 N3ALAA  LGA    ORD        138
## 11            851        -2 B6          49 N793JB  JFK    PBI        149
## 12            856        -3 B6          71 N657JB  JFK    TPA        158
## 13            917         7 UA         194 N29129  JFK    LAX        345
## 14            937       -14 UA        1124 N53441  EWR    SFO        361
## 15            910        31 AA         707 N3DUAA  LGA    DFW        257
##    distance  hour minute time_hour          
##       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dttm&amp;gt;             
##  1     1400     5     15 2013-01-01 05:00:00
##  2     1416     5     29 2013-01-01 05:00:00
##  3     1089     5     40 2013-01-01 05:00:00
##  4     1576     5     45 2013-01-01 05:00:00
##  5      762     6      0 2013-01-01 06:00:00
##  6      719     5     58 2013-01-01 05:00:00
##  7     1065     6      0 2013-01-01 06:00:00
##  8      229     6      0 2013-01-01 06:00:00
##  9      944     6      0 2013-01-01 06:00:00
## 10      733     6      0 2013-01-01 06:00:00
## 11     1028     6      0 2013-01-01 06:00:00
## 12     1005     6      0 2013-01-01 06:00:00
## 13     2475     6      0 2013-01-01 06:00:00
## 14     2565     6      0 2013-01-01 06:00:00
## 15     1389     6      0 2013-01-01 06:00:00
## # ... with 3.368e+05 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;修改options默认参数&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; 修改&lt;code&gt;options()&lt;/code&gt;默认参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;options(tibble.print_max = n, tibble.pring_min = m)&lt;/code&gt;:如果多于m行,则只打印出n
行.&lt;code&gt;options(tibble.print_min = Inf)&lt;/code&gt;表示总是打印所有行.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;options(tibble.width = Inf)&lt;/code&gt;表示总是打印所有列,不考虑屏幕的宽度.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;options()&lt;/code&gt;中所有和&lt;code&gt;tibble&lt;/code&gt;相关的参数:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tibble.print_max&lt;/code&gt;:Row number threshold: Maximum number of rows printed. Set to Inf to always print all rows. Default: 20.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tibble.print_min&lt;/code&gt;: 如果设置为m,意思即为如果行数大于m,则只打印出前n行.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tibble.width&lt;/code&gt;: 打印列的宽度.默认为NULL,也就是适应屏幕宽度.设置为&lt;code&gt;Inf&lt;/code&gt;,则打印出全部列.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tibble.max_extra_cols&lt;/code&gt;: Number of extra columns printed in reduced form. Default: 100.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pillar.bold&lt;/code&gt;: pillar是柱子的意思.如果设置为TRUE,则列名为粗体,默认为FALSE,因为在terminal中很多字体对粗体支持不够.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pillar.subtle&lt;/code&gt;: 是否打印出其他详细的信息,比如总的行和列数.默认为TRUE.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pillar.subtle_num&lt;/code&gt;: Use subtle style for insignificant digits? Default: FALSE, is also affected by the pillar.subtle option.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pillar.neg&lt;/code&gt;: 是否高亮负值.默认为TRUE.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pillar.sigfig&lt;/code&gt;: 高亮那些数字,比如如果设置为3,则会高亮数字3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pillar.min_title_chars&lt;/code&gt;: 列名打印时最小的字符数,默认为15.意味着如果某些列名大于15,则会被截断.设置为&lt;code&gt;Inf&lt;/code&gt;,打印出完整的列名.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tibble切片操作&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; tibble切片操作&lt;/h1&gt;
&lt;p&gt;如何取出一个tibble的一列或者几列.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test &amp;lt;- as_tibble(mtcars)
test[,1, drop = TRUE]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2
## [15] 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4
## [29] 15.8 19.7 15.0 21.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars[,1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2
## [15] 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4
## [29] 15.8 19.7 15.0 21.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tibble如果使用&lt;code&gt;[&lt;/code&gt;函数来进行选择某一列,则默认出来的还是一个tibble,当然可以使用&lt;code&gt;drop&lt;/code&gt;参数来设置为TRUE,让其转变成一个vector.而对于data.frame,则取出一列,默认为vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test$mpg&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2
## [15] 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4
## [29] 15.8 19.7 15.0 21.4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test[[&amp;quot;mpg&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2
## [15] 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4
## [29] 15.8 19.7 15.0 21.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然还可以使用&lt;code&gt;$&lt;/code&gt;和&lt;code&gt;[[&lt;/code&gt;函数,这两个函数取出来的都是vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
test %&amp;gt;% 
  pull(mpg)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2
## [15] 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4
## [29] 15.8 19.7 15.0 21.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然,还可以使用&lt;code&gt;dplyr&lt;/code&gt;中的&lt;code&gt;pull()&lt;/code&gt;函数,取出来的也是vector.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tibble添加新的列或者行&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; tibble添加新的列或者行&lt;/h1&gt;
&lt;div id=&#34;添加新的行&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.1&lt;/span&gt; 添加新的行&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;add_row()&lt;/code&gt;函数可以给已有的tibble对象添加新的行.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- tibble(x = 1:3, y = 3:1)
add_row(df, x = 4, y = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##       x     y
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1     3
## 2     2     2
## 3     3     1
## 4     4     0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以通过设置&lt;code&gt;.before&lt;/code&gt;和&lt;code&gt;.after&lt;/code&gt;参数来指定插入的位置.默认都是NULL,插入到最后的位置.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_row(df, x = 4, y = 0, .before = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##       x     y
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     4     0
## 2     1     3
## 3     2     2
## 4     3     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_row(df, x = 4, y = 0, .before = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##       x     y
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1     3
## 2     4     0
## 3     2     2
## 4     3     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_row(df, x = 4, y = 0, .before = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##       x     y
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1     3
## 2     2     2
## 3     4     0
## 4     3     1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.before&lt;/code&gt;设置为n,则是指从原来的第n行的前一行开始添加.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_row(df, x = 4, y = 0, .after = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##       x     y
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1     3
## 2     4     0
## 3     2     2
## 4     3     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_row(df, x = 4, y = 0, .after = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##       x     y
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1     3
## 2     2     2
## 3     4     0
## 4     3     1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_row(df, x = 4, y = 0, .after = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##       x     y
##   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1     3
## 2     2     2
## 3     3     1
## 4     4     0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.after&lt;/code&gt;设置为m,则是指从原来的第m行的后面一行开始添加.&lt;/p&gt;
&lt;p&gt;如果某些行不提供新的元素,则会变为NA.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;add_row(df, x = 4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 2
##       x     y
##   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1     1     3
## 2     2     2
## 3     3     1
## 4     4    NA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;添加新的列&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;4.2&lt;/span&gt; 添加新的列&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;add_column()&lt;/code&gt;函数可以给已有的tibble对象添加新的列.跟&lt;code&gt;add_column()&lt;/code&gt;一样的.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# add_column ---------------------------------
df &amp;lt;- tibble(x = 1:3, y = 3:1)
add_column(df, z = -1:1, w = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##       x     y     z     w
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1     3    -1     0
## 2     2     2     0     0
## 3     3     1     1     0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是,并不能覆盖原来的列以及和原来的行数不一样的新的列.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You can&amp;#39;t overwrite existing columns
try(
add_column(df, x = 4:6)  
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error : Can&amp;#39;t add duplicate columns with `add_column()`:
## * Column `x` already exists in `.data`.
## Backtrace:
##      x
##   1. +-base::local(...)
##   2. | \-base::eval.parent(substitute(eval(quote(expr), envir)))
##   3. |   \-base::eval(expr, p)
##   4. |     \-base::eval(expr, p)
##   5. +-base::eval(...)
##   6. | \-base::eval(...)
##   7. |   \-rmarkdown::render(...)
##   8. |     \-knitr::knit(...)
##   9. |       \-knitr:::process_file(text, output)
##  10. |         +-base::withCallingHandlers(...)
##  11. |         +-knitr:::process_group(group)
##  12. |         \-knitr:::process_group.block(group)
##  13. |           \-knitr:::call_block(x)
##  14. |             \-knitr:::block_exec(params)
##  15. |               +-knitr:::in_dir(...)
##  16. |               \-knitr:::evaluate(...)
##  17. |                 \-evaluate::evaluate(...)
##  18. |                   \-evaluate:::evaluate_call(...)
##  19. |                     +-evaluate:::timing_fn(...)
##  20. |                     +-base:::handle(...)
##  21. |                     +-base::withCallingHandlers(...)
##  22. |                     +-base::withVisible(eval(expr, envir, enclos))
##  23. |                     \-base::eval(expr, envir, enclos)
##  24. |                       \-base::eval(expr, envir, enclos)
##  25. +-base::try(add_column(df, x = 4:6))
##  26. | \-base::tryCatch(...)
##  27. |   \-base:::tryCatchList(expr, classes, parentenv, handlers)
##  28. |     \-base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
##  29. |       \-base:::doTryCatch(return(expr), name, parentenv, handler)
##  30. \-tibble::add_column(df, x = 4:6)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# You can&amp;#39;t create new observations
try(
 add_column(df, z = 1:5) 
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error : New columns in `add_column()` must be consistent with `.data`:
## * `.data` has 3 rows
## * New column contributes 5 rows
## Backtrace:
##      x
##   1. +-base::local(...)
##   2. | \-base::eval.parent(substitute(eval(quote(expr), envir)))
##   3. |   \-base::eval(expr, p)
##   4. |     \-base::eval(expr, p)
##   5. +-base::eval(...)
##   6. | \-base::eval(...)
##   7. |   \-rmarkdown::render(...)
##   8. |     \-knitr::knit(...)
##   9. |       \-knitr:::process_file(text, output)
##  10. |         +-base::withCallingHandlers(...)
##  11. |         +-knitr:::process_group(group)
##  12. |         \-knitr:::process_group.block(group)
##  13. |           \-knitr:::call_block(x)
##  14. |             \-knitr:::block_exec(params)
##  15. |               +-knitr:::in_dir(...)
##  16. |               \-knitr:::evaluate(...)
##  17. |                 \-evaluate::evaluate(...)
##  18. |                   \-evaluate:::evaluate_call(...)
##  19. |                     +-evaluate:::timing_fn(...)
##  20. |                     +-base:::handle(...)
##  21. |                     +-base::withCallingHandlers(...)
##  22. |                     +-base::withVisible(eval(expr, envir, enclos))
##  23. |                     \-base::eval(expr, envir, enclos)
##  24. |                       \-base::eval(expr, envir, enclos)
##  25. +-base::try(add_column(df, z = 1:5))
##  26. | \-base::tryCatch(...)
##  27. |   \-base:::tryCatchList(expr, classes, parentenv, handlers)
##  28. |     \-base:::tryCatchOne(expr, names, parentenv, handlers[[1L]])
##  29. |       \-base:::doTryCatch(return(expr), name, parentenv, handler)
##  30. \-tibble::add_column(df, z = 1:5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以其实并不方便,还是使用&lt;code&gt;dplyr&lt;/code&gt;更方便.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tibble对列名和行名的操作&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;5&lt;/span&gt; tibble对列名和行名的操作&lt;/h1&gt;
&lt;div id=&#34;判断是否有行名&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.1&lt;/span&gt; 判断是否有行名&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rownames(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Mazda RX4&amp;quot;           &amp;quot;Mazda RX4 Wag&amp;quot;       &amp;quot;Datsun 710&amp;quot;         
##  [4] &amp;quot;Hornet 4 Drive&amp;quot;      &amp;quot;Hornet Sportabout&amp;quot;   &amp;quot;Valiant&amp;quot;            
##  [7] &amp;quot;Duster 360&amp;quot;          &amp;quot;Merc 240D&amp;quot;           &amp;quot;Merc 230&amp;quot;           
## [10] &amp;quot;Merc 280&amp;quot;            &amp;quot;Merc 280C&amp;quot;           &amp;quot;Merc 450SE&amp;quot;         
## [13] &amp;quot;Merc 450SL&amp;quot;          &amp;quot;Merc 450SLC&amp;quot;         &amp;quot;Cadillac Fleetwood&amp;quot; 
## [16] &amp;quot;Lincoln Continental&amp;quot; &amp;quot;Chrysler Imperial&amp;quot;   &amp;quot;Fiat 128&amp;quot;           
## [19] &amp;quot;Honda Civic&amp;quot;         &amp;quot;Toyota Corolla&amp;quot;      &amp;quot;Toyota Corona&amp;quot;      
## [22] &amp;quot;Dodge Challenger&amp;quot;    &amp;quot;AMC Javelin&amp;quot;         &amp;quot;Camaro Z28&amp;quot;         
## [25] &amp;quot;Pontiac Firebird&amp;quot;    &amp;quot;Fiat X1-9&amp;quot;           &amp;quot;Porsche 914-2&amp;quot;      
## [28] &amp;quot;Lotus Europa&amp;quot;        &amp;quot;Ford Pantera L&amp;quot;      &amp;quot;Ferrari Dino&amp;quot;       
## [31] &amp;quot;Maserati Bora&amp;quot;       &amp;quot;Volvo 142E&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;has_rownames(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
## 1          5.1         3.5          1.4         0.2  setosa
## 2          4.9         3.0          1.4         0.2  setosa
## 3          4.7         3.2          1.3         0.2  setosa
## 4          4.6         3.1          1.5         0.2  setosa
## 5          5.0         3.6          1.4         0.2  setosa
## 6          5.4         3.9          1.7         0.4  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rownames(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] &amp;quot;1&amp;quot;   &amp;quot;2&amp;quot;   &amp;quot;3&amp;quot;   &amp;quot;4&amp;quot;   &amp;quot;5&amp;quot;   &amp;quot;6&amp;quot;   &amp;quot;7&amp;quot;   &amp;quot;8&amp;quot;   &amp;quot;9&amp;quot;   &amp;quot;10&amp;quot;  &amp;quot;11&amp;quot; 
##  [12] &amp;quot;12&amp;quot;  &amp;quot;13&amp;quot;  &amp;quot;14&amp;quot;  &amp;quot;15&amp;quot;  &amp;quot;16&amp;quot;  &amp;quot;17&amp;quot;  &amp;quot;18&amp;quot;  &amp;quot;19&amp;quot;  &amp;quot;20&amp;quot;  &amp;quot;21&amp;quot;  &amp;quot;22&amp;quot; 
##  [23] &amp;quot;23&amp;quot;  &amp;quot;24&amp;quot;  &amp;quot;25&amp;quot;  &amp;quot;26&amp;quot;  &amp;quot;27&amp;quot;  &amp;quot;28&amp;quot;  &amp;quot;29&amp;quot;  &amp;quot;30&amp;quot;  &amp;quot;31&amp;quot;  &amp;quot;32&amp;quot;  &amp;quot;33&amp;quot; 
##  [34] &amp;quot;34&amp;quot;  &amp;quot;35&amp;quot;  &amp;quot;36&amp;quot;  &amp;quot;37&amp;quot;  &amp;quot;38&amp;quot;  &amp;quot;39&amp;quot;  &amp;quot;40&amp;quot;  &amp;quot;41&amp;quot;  &amp;quot;42&amp;quot;  &amp;quot;43&amp;quot;  &amp;quot;44&amp;quot; 
##  [45] &amp;quot;45&amp;quot;  &amp;quot;46&amp;quot;  &amp;quot;47&amp;quot;  &amp;quot;48&amp;quot;  &amp;quot;49&amp;quot;  &amp;quot;50&amp;quot;  &amp;quot;51&amp;quot;  &amp;quot;52&amp;quot;  &amp;quot;53&amp;quot;  &amp;quot;54&amp;quot;  &amp;quot;55&amp;quot; 
##  [56] &amp;quot;56&amp;quot;  &amp;quot;57&amp;quot;  &amp;quot;58&amp;quot;  &amp;quot;59&amp;quot;  &amp;quot;60&amp;quot;  &amp;quot;61&amp;quot;  &amp;quot;62&amp;quot;  &amp;quot;63&amp;quot;  &amp;quot;64&amp;quot;  &amp;quot;65&amp;quot;  &amp;quot;66&amp;quot; 
##  [67] &amp;quot;67&amp;quot;  &amp;quot;68&amp;quot;  &amp;quot;69&amp;quot;  &amp;quot;70&amp;quot;  &amp;quot;71&amp;quot;  &amp;quot;72&amp;quot;  &amp;quot;73&amp;quot;  &amp;quot;74&amp;quot;  &amp;quot;75&amp;quot;  &amp;quot;76&amp;quot;  &amp;quot;77&amp;quot; 
##  [78] &amp;quot;78&amp;quot;  &amp;quot;79&amp;quot;  &amp;quot;80&amp;quot;  &amp;quot;81&amp;quot;  &amp;quot;82&amp;quot;  &amp;quot;83&amp;quot;  &amp;quot;84&amp;quot;  &amp;quot;85&amp;quot;  &amp;quot;86&amp;quot;  &amp;quot;87&amp;quot;  &amp;quot;88&amp;quot; 
##  [89] &amp;quot;89&amp;quot;  &amp;quot;90&amp;quot;  &amp;quot;91&amp;quot;  &amp;quot;92&amp;quot;  &amp;quot;93&amp;quot;  &amp;quot;94&amp;quot;  &amp;quot;95&amp;quot;  &amp;quot;96&amp;quot;  &amp;quot;97&amp;quot;  &amp;quot;98&amp;quot;  &amp;quot;99&amp;quot; 
## [100] &amp;quot;100&amp;quot; &amp;quot;101&amp;quot; &amp;quot;102&amp;quot; &amp;quot;103&amp;quot; &amp;quot;104&amp;quot; &amp;quot;105&amp;quot; &amp;quot;106&amp;quot; &amp;quot;107&amp;quot; &amp;quot;108&amp;quot; &amp;quot;109&amp;quot; &amp;quot;110&amp;quot;
## [111] &amp;quot;111&amp;quot; &amp;quot;112&amp;quot; &amp;quot;113&amp;quot; &amp;quot;114&amp;quot; &amp;quot;115&amp;quot; &amp;quot;116&amp;quot; &amp;quot;117&amp;quot; &amp;quot;118&amp;quot; &amp;quot;119&amp;quot; &amp;quot;120&amp;quot; &amp;quot;121&amp;quot;
## [122] &amp;quot;122&amp;quot; &amp;quot;123&amp;quot; &amp;quot;124&amp;quot; &amp;quot;125&amp;quot; &amp;quot;126&amp;quot; &amp;quot;127&amp;quot; &amp;quot;128&amp;quot; &amp;quot;129&amp;quot; &amp;quot;130&amp;quot; &amp;quot;131&amp;quot; &amp;quot;132&amp;quot;
## [133] &amp;quot;133&amp;quot; &amp;quot;134&amp;quot; &amp;quot;135&amp;quot; &amp;quot;136&amp;quot; &amp;quot;137&amp;quot; &amp;quot;138&amp;quot; &amp;quot;139&amp;quot; &amp;quot;140&amp;quot; &amp;quot;141&amp;quot; &amp;quot;142&amp;quot; &amp;quot;143&amp;quot;
## [144] &amp;quot;144&amp;quot; &amp;quot;145&amp;quot; &amp;quot;146&amp;quot; &amp;quot;147&amp;quot; &amp;quot;148&amp;quot; &amp;quot;149&amp;quot; &amp;quot;150&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;has_rownames(iris)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以使用&lt;code&gt;remove_rownames()&lt;/code&gt;函数去除掉行名.当然也可以使用将行名设置为NULL打到目的&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;has_rownames(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars2 &amp;lt;- 
  remove_rownames(mtcars)
has_rownames(mtcars2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;行名和某一列互相转换&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;5.2&lt;/span&gt; 行名和某一列互相转换&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;rownames_to_column()&lt;/code&gt;函数可以将tibble的行名转变为某一列,并且删除掉行名.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtcars2 &amp;lt;- 
rownames_to_column(mtcars, var = &amp;quot;test&amp;quot;)
mtcars2 %&amp;gt;% 
  as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 12
##    test     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Mazda~  21       6  160    110  3.9   2.62  16.5     0     1     4     4
##  2 Mazda~  21       6  160    110  3.9   2.88  17.0     0     1     4     4
##  3 Datsu~  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
##  4 Horne~  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
##  5 Horne~  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  6 Valia~  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
##  7 Duste~  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  8 Merc ~  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
##  9 Merc ~  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
## 10 Merc ~  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另外一个函数,&lt;code&gt;rowid_to_column()&lt;/code&gt;可以去除掉行名,并在最开始添加一列rowid,从1开始.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rowid_to_column(mtcars) %&amp;gt;% 
  as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 12
##    rowid   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
##    &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1     1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
##  2     2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
##  3     3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
##  4     4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
##  5     5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
##  6     6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
##  7     7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
##  8     8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
##  9     9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
## 10    10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然也可以将某一列变为行名:&lt;code&gt;column_to_rownames()&lt;/code&gt;.注意必须要求tibble没有行名,且新的行名是没有重复元素的.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;column_to_rownames(mtcars2, var = &amp;quot;test&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
## Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
## Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
## Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
## Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
## Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
## Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
## Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
## Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
## Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
## Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
## Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
## Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
## Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
## Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
## Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
## Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
## Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
## AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
## Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
## Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
## Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
## Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
## Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
## Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
## Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
## Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
## Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Markdown cookbook</title>
      <link>/post/markdown-cookbook/</link>
      <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/markdown-cookbook/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#markdown通用技巧&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; Markdown通用技巧&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#如何在markdown中使用font&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 如何在markdown中使用font?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#如何在markdown中插入脚注&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; 如何在markdown中插入脚注?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#rmarkdown&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; Rmarkdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;markdown通用技巧&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; Markdown通用技巧&lt;/h1&gt;
&lt;div id=&#34;如何在markdown中使用font&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 如何在markdown中使用font?&lt;/h2&gt;
&lt;p&gt;参考文档:&lt;a href=&#34;https://sspai.com/post/45217&#34; class=&#34;uri&#34;&gt;https://sspai.com/post/45217&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在markdown文档任意地方插入下面的代码:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt; 
    &amp;lt;script defer src=&amp;quot;https://use.fontawesome.com/releases/v5.0.13/js/all.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 
    &amp;lt;script defer src=&amp;quot;https://use.fontawesome.com/releases/v5.0.13/js/v4-shims.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 
&amp;lt;/head&amp;gt; 
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://use.fontawesome.com/releases/v5.0.13/css/all.css&amp;quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后使用下列语句插入font:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;i class=&amp;quot;fa fa-weixin&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示:&lt;i class=&#34;fa fa-weixin&#34;&gt;&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;如何在markdown中插入脚注&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; 如何在markdown中插入脚注?&lt;/h2&gt;
&lt;p&gt;在正文中插入:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You can create footnotes like this[^footnote].&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后在参考文献地方插入:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[^footnote]: Here is the *text* of the **footnote**.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示如下:&lt;/p&gt;
&lt;p&gt;You can create footnotes like this&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;rmarkdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; Rmarkdown&lt;/h1&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Here is the &lt;em&gt;text&lt;/em&gt; of the &lt;strong&gt;footnote&lt;/strong&gt;.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>R cookbook</title>
      <link>/post/2019-11-10-r-cookbook/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/2019-11-10-r-cookbook/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r一些常用小命令&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; R一些常用小命令&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#系统相关&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 系统相关&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#重启r-session&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1.1&lt;/span&gt; 重启R session&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r一些常用小命令&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; R一些常用小命令&lt;/h1&gt;
&lt;div id=&#34;系统相关&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 系统相关&lt;/h2&gt;
&lt;div id=&#34;重启r-session&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1.1&lt;/span&gt; 重启R session&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;.rs.restartR()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>质谱常见问题总结</title>
      <link>/post/ms-summary/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/ms-summary/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ms&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; MS&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#forevacuum-presure-too-high.&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; Forevacuum presure too high.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;ms&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; MS&lt;/h1&gt;
&lt;div id=&#34;forevacuum-presure-too-high.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; Forevacuum presure too high.&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;error1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;几个原因:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;ion transfer tube堵了,洗一下试试.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大概率是needle堵了,一般只能重新换个新的needle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;温度太低,比如320度就不行,温度太低导致离子化程度不够.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够做的都做了,还是解决不了,然后冲了大概几个小时,自己变好了….&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>一点感想</title>
      <link>/post/20191014/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/post/20191014/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#远程连接&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.0.1&lt;/span&gt; 远程连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装虚拟机&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.0.2&lt;/span&gt; 安装虚拟机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#网络连接问题&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.0.3&lt;/span&gt; 网络连接问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;实验室新买了一台workstation.因为有软件需要在windows上运行,因此本来需要安装windows server版本.但是后来问了一下学校的IT部门,安装一台服务器非常麻烦,需要学校IT部门来关理,每月收费350刀.如果是自己关理,也可以,但是如果有数据外漏的话,责任需要自己负责.因此最后考虑安装普通的window10版本,然后可以远程连接.我自己再看看能够在上面的虚拟机上安装linux系统,实现多人同时远程练级额.&lt;/p&gt;
&lt;div id=&#34;远程连接&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.0.1&lt;/span&gt; 远程连接&lt;/h3&gt;
&lt;p&gt;连接上Stanford的VPN之后,远程连接并不起作用.当时推测的可能就是这台电脑属于某个group,需要把我们的SunetID加入刀该group内,然后才能进去.但是来的IT人员搞了好几天也没搞定,我也是略微无语.随后不在管他,我在IT online提交了ticket,过了大概一个星期,终于查到了解决办法,就是说需要加入某个group.将邮件记录如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Xiaotao,
Your device is connected to Genetics VLAN 3020, CIDR 171.65.76.0/23. Users who need to have VPN/RDP access to the device need to be added to workgroup: net-access-som-vpn-genetics.&lt;br /&gt;
Please reach out to one of the admins below (to request access):&lt;br /&gt;
Chris Probert&lt;br /&gt;
Jin Wook Lee&lt;br /&gt;
Anna Scherbina&lt;br /&gt;
Please let me know if you have any questions.&lt;br /&gt;
Best regards,&lt;br /&gt;
Brian, Med T&amp;amp;DS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是非常奇怪的是,这几个人我们都不认识,google一下,竟然是Biomedicine Informatics实验室的.然后赶紧给他们发了邮件,没想到很快就给了回复,说已经把我们的SunetID加入到该group中,大约20分钟之后可以连接.随后果然可以.&lt;/p&gt;
&lt;p&gt;使用Windows上的&lt;code&gt;Remote Desktop Connection&lt;/code&gt;软件进行连接时,注意&lt;code&gt;User name&lt;/code&gt;时需要在用户名前面加上&lt;code&gt;win\&lt;/code&gt;,也就是写&lt;code&gt;win\shenxt&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;安装虚拟机&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.0.2&lt;/span&gt; 安装虚拟机&lt;/h3&gt;
&lt;p&gt;原本想要安装VMware软件的,后来发现这个软件跟win10自带的&lt;code&gt;Hyper-V&lt;/code&gt;软件是冲突的.后来就放弃使用VMware,直接使用Hyper-V软件.&lt;/p&gt;
&lt;p&gt;最开始下载的&lt;code&gt;CentOS-8&lt;/code&gt;系统,但是安装的时候,遇到了问题,安装成功之后,重启之后没有进入登录界面,反而又重新到了安装界面!查了很多,都没有找到解决办法.&lt;/p&gt;
&lt;p&gt;后来,觉得有可能是系统版本的问题,因此在CentOS官网上找到了CentOS-7版本.重新走了一遍安装程序,终于成功了.&lt;/p&gt;
&lt;p&gt;安装之后没有图形界面,只有命令行形式.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;网络连接问题&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.0.3&lt;/span&gt; 网络连接问题&lt;/h3&gt;
&lt;p&gt;直接安装之后,并没有网络连接.需要进行设置.查了一些资料,首先需要在Hyper-V软件上创建虚拟交换机,但是我在创建的时候,总是报错,无法创建,然后又开始google.结果找到了这样一个网页:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://support.microsoft.com/zh-cn/help/3101106/you-cannot-create-a-hyper-v-virtual-switch-on-64-bit-versions-of-windo&#34; class=&#34;uri&#34;&gt;https://support.microsoft.com/zh-cn/help/3101106/you-cannot-create-a-hyper-v-virtual-switch-on-64-bit-versions-of-windo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后就下载软件,运行,重启,然后就没有网络连接了!而且是所有的网络都没有了,查了一下感觉应该是驱动的问题,然后在官网上下载了Intel的驱动,走的时候还没有安装好,看看明天结果如何.&lt;/p&gt;
&lt;p&gt;并不是driver的问题,第二天IT过来瞅了一眼,又重新搞了一会driver,还是不行,最后拉走了,说需要慢慢检查.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>2017年的第一篇博客</title>
      <link>/post/2017-02-12-firstblog2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/post/2017-02-12-firstblog2017/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#我的2016年&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; &lt;strong&gt;我的2016年&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#效率低下&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.1&lt;/span&gt; 效率低下&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#懒惰&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.2&lt;/span&gt; 懒惰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#没有明确的目标&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1.3&lt;/span&gt; 没有明确的目标&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#我的2017年计划&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2&lt;/span&gt; &lt;strong&gt;我的2017年计划&lt;/strong&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#文章&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.1&lt;/span&gt; 文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#统计&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.2&lt;/span&gt; 统计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#r&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;2.3&lt;/span&gt; R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#python&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;3&lt;/span&gt; python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#健身&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;4&lt;/span&gt; 健身&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;我的2016年&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; &lt;strong&gt;我的2016年&lt;/strong&gt;&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;现在想想，其实整个2016年真的是没什么收获，科研上没什么进展，技能上也没有什么提升，原本准备要学习的python，也在1-2个月之后，彻底的放弃了。现在可能只记得一点点皮毛了。那么2016年的问题到底在哪里呢？总结来说，可以分为下面几部分。&lt;/p&gt;
&lt;div id=&#34;效率低下&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.1&lt;/span&gt; 效率低下&lt;/h2&gt;
&lt;p&gt;不得不承认，我的学习效率真的是出奇的低下，从我上高中以来其实都是这样了，做什么事情都不能够专心致志。用高中同学利弟的话来说，是“玩的时候没有好好玩，学习的时候没有好好学习”，用最近学到的一句话是“用战术上的勤奋来掩饰战略上的懒惰”。具体表现就是精神不集中，开小车。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;懒惰&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.2&lt;/span&gt; 懒惰&lt;/h2&gt;
&lt;p&gt;现在真的是越来越懒惰了，很多事情都没有以前有激情了，可能是我老了？&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;没有明确的目标&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;1.3&lt;/span&gt; 没有明确的目标&lt;/h2&gt;
&lt;p&gt;上半年其实还是挺有目标的，但是到了下半年，目标突然就失焦了。定下一个目标，努力去实现，或者定下一个计划，努力去完成。&lt;/p&gt;
&lt;p&gt;上面就是我2016年的一个简短的总结了，当然不是只有这些问题，还有很多其他的问题，但是可能都是一些细节的问题，就不过多去写了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;我的2017年计划&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;2&lt;/span&gt; &lt;strong&gt;我的2017年计划&lt;/strong&gt;&lt;/h1&gt;
&lt;hr /&gt;
&lt;div id=&#34;文章&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.1&lt;/span&gt; 文章&lt;/h2&gt;
&lt;p&gt;很幸运的是自己还是发了两篇文章，但是都是很低分的，虽然够我毕业，但是其实自己知道并不足够，因此2017年的主要任务就是好好看文献，做实验，寻找思路，争取能够再发一篇高质量的你文章。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;统计&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.2&lt;/span&gt; 统计&lt;/h2&gt;
&lt;p&gt;毕竟我的课题和统计关系很大，自己的统计数据功底很差，希望可以在看文献以及资料的同时，好好学习一下统计，机器学习等知识，再课题中能够真正运用到。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;2.3&lt;/span&gt; R&lt;/h2&gt;
&lt;p&gt;R是一个好东西，需要再深入的学习，主要是结合着统计去学习，并及时做好总计，以有道笔记和博客作为平台去记录自己的学习，即作为笔记也作为总结。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;python&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;3&lt;/span&gt; python&lt;/h1&gt;
&lt;p&gt;这个放到最后，是因为可能很难有很多时间去学习了，希望前面几条比较顺利，才会有时间去做。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;健身&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;4&lt;/span&gt; 健身&lt;/h1&gt;
&lt;p&gt;经过别人的提醒，还有这一项，确实自己看起来太瘦了，尤其是上半身，连衬衫和西装都撑不起来，等天气开始暖和了，就开始跑步，然后等中期答辩结束之后，考虑办一张健身卡，去健身！&lt;/p&gt;
&lt;p&gt;最后的最后，提醒自己，最后一年，加油！&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>MetCleaning instruction</title>
      <link>/post/2016-11-25-metcleaning/</link>
      <pubDate>Fri, 25 Nov 2016 00:00:00 +0000</pubDate>
      <guid>/post/2016-11-25-metcleaning/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.1&lt;/span&gt; &lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installation-and-help&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2&lt;/span&gt; &lt;strong&gt;Installation and help&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-cleaning&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.3&lt;/span&gt; &lt;strong&gt;Data cleaning&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#statistical-analysis&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.4&lt;/span&gt; &lt;strong&gt;Statistical analysis&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.1&lt;/span&gt; &lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;MetCleaning&lt;/em&gt; provides an integrated and automatic pipeline for data cleaning and statistical analysis of large scale mass spectrometry (MS) based-metabolomic data. It includes missing value (MV) filtering and imputation, zero value filtering, data normalization, data integration, data quality assessment, univariate statistical analysis, multivariate statistical analysis such as PCA and PLS-DA, potential marker selection and show. This document describes how to use the integrated functions, &lt;em&gt;MetClean&lt;/em&gt; and &lt;em&gt;MetStat&lt;/em&gt; in &lt;em&gt;MetCleaning&lt;/em&gt; utilizing demo data.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/images/metcleaning/workflow%20for%20instruction.jpg&#34; alt=&#34;Figure1 Workflow of MetCleaning&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure1 Workflow of &lt;em&gt;MetCleaning&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;installation-and-help&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2&lt;/span&gt; &lt;strong&gt;Installation and help&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;MetCleaning&lt;/em&gt; is published in github &lt;a href=&#34;https://github.com/jaspershen/MetCleaning&#34;&gt;(link)&lt;/a&gt;. So you can install it via to github.&lt;/p&gt;
&lt;p&gt;code 1: Installation of &lt;em&gt;MetCleaning&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##pcaMethods and impute should be installed form bioconductor
##pcaMethos
source(&amp;quot;http://bioconductor.org/biocLite.R&amp;quot;)
    biocLite(&amp;quot;pcaMethods&amp;quot;)
##impute
source(&amp;quot;http://bioconductor.org/biocLite.R&amp;quot;)
    biocLite(&amp;quot;impute&amp;quot;)
 if(!require(devtools)) {
  install.packages(&amp;quot;devtools&amp;quot;)
 }
 library(devtools)
 install_github(&amp;quot;jaspershen/MetCleaning&amp;quot;)
 library(MetCleaning)
 help(package = &amp;quot;MetCleaning&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-cleaning&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.3&lt;/span&gt; &lt;strong&gt;Data cleaning&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Data cleaning is integrated as a function named as &lt;em&gt;MetClean&lt;/em&gt; in &lt;em&gt;MetCleaning&lt;/em&gt;. We use the demo data as the example. Copy the code below and paste in you R console.&lt;/p&gt;
&lt;p&gt;code 2: Demo data of &lt;em&gt;MetClean&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##demo data
data(data, package = &amp;quot;MetCleaning&amp;quot;)
data(sample.information, package = &amp;quot;MetCleaning&amp;quot;)
##demo work directory
dir.create(&amp;quot;Demo for MetCleaning&amp;quot;)
setwd(&amp;quot;Demo for MetCleaning&amp;quot;)
##write files
write.csv(data, &amp;quot;data.csv&amp;quot;, row.names = FALSE)
write.csv(sample.information , &amp;quot;sample.information.csv&amp;quot;, row.names = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The demo data have been added in your work directory and organized in you work directory as Figure 2 shows. It contains two files, “data.csv” and “sample.information.csv”.
1. “data.csv” is the metabolomic dataset you want to process. Rows are features and columns are feature abundance of samples and information of features. The information of features must contain “name” (feature name), “mz” (mass to change ratio) and “rt” (retention time). Other information of features are optional, for example “isotopes” and “adducts”. The name of sample can contain “.”, but cannot contain “-” and space. And the start of sample name cannot be number. &lt;strong&gt;For example, “A210.a” and “A210a” are valid, and “210a” or “210-a” are invalid.&lt;/strong&gt;
2. “sample.information.csv” is sample information for metabolomic dataset. Column 1 is “sample.name” which is the names of subject and QC samples. Please confirm that the sample names in “sample.information.csv” and “data.csv” are completely same. Column 2 is “injection.order” which is the injection order of QC and subject samples. Column 3 is “class”, which is used to distinguish “QC” and “Subject” samples. Column 4 is “batch” to provide acquisition batch information for samples. Column 5 is “group”, which is used to label the group of subject sample, for example, “control” and “case”. The “group” of QC samples is labeled as “QC”.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/images/metcleaning/data%20organisation.jpg&#34; alt=&#34;Figure2 Data organisation of MetCleaning&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure2 Data organisation of MetCleaning&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Then you can run &lt;em&gt;MetClean&lt;/em&gt; function to do data cleaning of data. All the arguments of &lt;em&gt;MetClean&lt;/em&gt; can be found in the other functions in &lt;em&gt;MetCleaning&lt;/em&gt;. You can use &lt;em&gt;help(package = “MetCleaning”)&lt;/em&gt; to see the help page of &lt;em&gt;MetCleaning&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;code 3: Running of &lt;em&gt;MetClean&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##demo data
MetClean(polarity = &amp;quot;positive&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running results of &lt;em&gt;MetClean&lt;/em&gt;
1.Missing or zero values filtering. In the missing or zero value filtering step, if there are samples which beyond the threshold you set, you should decide to filter them or not. We recommend to remove all of them as Figure 3 shows.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/images/metcleaning/mv%20filter.jpg&#34; alt=&#34;Figure3 Missing or zero value filtering&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure3 Missing or zero value filtering&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;2.Sample filtering. In the QC or subject sample filtering step (based on PCA), if there are samples which beyond the threshold you set, you should decide to filter them or not. We don’t recommend to remove them as Figure 4 shows, because they should be consired combined other information.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/images/metcleaning/sample%20filter.jpg&#34; alt=&#34;Figure4 Sample filtering&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure4 Sample filtering&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;3.Output files. Output files of &lt;em&gt;MetClean&lt;/em&gt; are listed as Figure 5 shows.
(1) “1MV overview”, “2MV filter”, “3Zero overview” and “4Zero filter” are missing and zero values filtering information.
(2) “5QC outlier filter” and “6Subject outlier filter” are sample filtering based on PCA information.
(3) “7Normalization result” is the data normalization information for each batch.
(4) “8Batch effect” is the batch effect both in before and after data cleaning.
(5) “9metabolite plot” is the scatter plot for each feature.
(6) “10Data overview” is the overview of data.
(7) “11RSD overview” is the RSD distribution for each batch both before and after data cleaning.
(8) &lt;strong&gt;“data_after_pre.csv”, “qc.info.csv” and “subject.info”&lt;/strong&gt; are the data and sample information after data cleaning.
(9) “intermediate” is the intermediate data during processing.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/images/metcleaning/output%20files%20of%20MetClean.jpg&#34; alt=&#34;Figure5 Output files of MetClean&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure5 Output files of &lt;em&gt;MetClean&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;statistical-analysis&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4&lt;/span&gt; &lt;strong&gt;Statistical analysis&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Data statistical analysis is integrated as a function named as &lt;em&gt;MetStat&lt;/em&gt; in &lt;em&gt;MetCleaning&lt;/em&gt;. We use the demo data as the example. &lt;strong&gt;Please note that now &lt;em&gt;MetStat&lt;/em&gt; can only process two class data.&lt;/strong&gt; Copy the code below and paste in you R console.&lt;/p&gt;
&lt;p&gt;code 4: Demo data of &lt;em&gt;MetStat&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data(&amp;quot;met.data.after.pre&amp;quot;, package = &amp;quot;MetCleaning&amp;quot;)
data(new.group, package = &amp;quot;MetCleaning&amp;quot;)
##create a folder for MetStat demo
dir.create(&amp;quot;Demo for MetStat&amp;quot;)
setwd(&amp;quot;Demo for MetStat&amp;quot;)
## export the demo data as csv
write.csv(new.group, &amp;quot;new.group.csv&amp;quot;, row.names = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The demo data have been added in your work directory. “new.group.csv” is a sample.information which has been changed the group information you want to use for statistical analysis. For the sample which you don’t want to use them for statistical analysis, you can set they group information as NA like Figure 6 shows.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/images/metcleaning/new.group.jpg&#34; alt=&#34;Figure6 new group information&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure6 new group information&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;code 5: Running of &lt;em&gt;MetStat&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MetStat(MetFlowData = met.data.after.pre, new.group = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running results of &lt;em&gt;MetStat&lt;/em&gt;
1.Sample removing. Firstly, you need to confirm the samples which you want to remove form dataset as Figure 7 shows.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/images/metcleaning/sample%20remove.jpg&#34; alt=&#34;Figure7 sample removing confirmation&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure7 sample removing confirmation&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;2.Number of component selection in PLS-DA analysis. In PLS-DA analysis, you should manually select the best choice of the number of component. When the Console show “How many comps do you want to see?”, you can type 10 and enter “Enter” key. Then a MSE plot is showing, and the best number of component is the one has the smallest CV values. So type the number (in this example is 4) and enter “Enter” key.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/images/metcleaning/PLS%20analysis.jpg&#34; alt=&#34;Figure8 Number of component selection in PLS-DA analysis&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure8 Number of component selection in PLS-DA analysis&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;3.Output files. Output files of &lt;em&gt;MetStat&lt;/em&gt; are listed as Figure 9 shows.
(1) “12PCA analysis” is the PCA score plot.
(2) “13PLS analysis” contains the PLS-DA results.
(3) “14heatmap” is the heatmap.
(4) “15marker selection” contains the information of markers, volcano plot and boxplots of markers.
(5) &lt;strong&gt;“data_after_stat.csv”, “qc.info.csv” and “subject.info”&lt;/strong&gt; are the data and sample information after statistical analysis.
(6) “intermediate” is the intermediate data during processing.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/images/metcleaning/output%20files%20of%20MetStat.jpg&#34; alt=&#34;Figure9 Output files of MetStat&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Figure9 Output files of &lt;em&gt;MetStat&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>使用Github和Hexo建独立博客</title>
      <link>/post/2017-09-09-github-blog/</link>
      <pubDate>Fri, 25 Nov 2016 00:00:00 +0000</pubDate>
      <guid>/post/2017-09-09-github-blog/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#hexo介绍&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.1&lt;/span&gt; 1. Hexo介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#环境准备&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2&lt;/span&gt; 2. 环境准备&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#安装node.js&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2.1&lt;/span&gt; 2.1 安装node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装hexo&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2.2&lt;/span&gt; 2.2 安装hexo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#利用hexo搭建一个博客&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.3&lt;/span&gt; 3. 利用Hexo搭建一个博客&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#创建博客目录shenxtgithub.io&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.3.1&lt;/span&gt; 3.1 &lt;span&gt;创建博客目录shenxt@github.io&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#生成静态页面&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.3.2&lt;/span&gt; 3.2 生成静态页面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#运行&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.3.3&lt;/span&gt; 3.3 运行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#发一篇文章试试&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.4&lt;/span&gt; 4 发一篇文章试试&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#穿件一个新的博客&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.4.1&lt;/span&gt; 4.1 穿件一个新的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#配置&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.5&lt;/span&gt; 5 配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#更换主题&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.6&lt;/span&gt; 6 更换主题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#部署到github上&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.7&lt;/span&gt; 7 部署到github上&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#在github网页版上创建和自己账户名相同的仓库比如我的账户为shenxt因此创建的仓库为shenxt.github.io&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.7.1&lt;/span&gt; 7.1 在github网页版上创建和自己账户名相同的仓库，比如我的账户为shenxt，因此，创建的仓库为shenxt.github.io。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#安装hexo-deployer-git&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.7.2&lt;/span&gt; 7.2 安装hexo-deployer-git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#网站配置git&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.7.3&lt;/span&gt; 7.3 网站配置git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#部署&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.7.4&lt;/span&gt; 7.4 部署&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#贴标签方便搜索&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.8&lt;/span&gt; 贴标签，方便搜索&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#两个确认&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.8.1&lt;/span&gt; 8.1 两个确认&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#新建tags页面&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.8.2&lt;/span&gt; 8.2 新建tags页面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#修改sourcetagsindex.md&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.8.3&lt;/span&gt; 8.3 修改source/tags/index.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#在文章中添加tags&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.8.4&lt;/span&gt; 8.4 在文章中添加tags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#分类给文章归档&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.9&lt;/span&gt; 9 分类，给文章归档&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#两个确认-1&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.9.1&lt;/span&gt; 9.1 两个确认&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#新建categories文件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.9.2&lt;/span&gt; 9.2 新建categories文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#修改categoriesindex.md&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.9.3&lt;/span&gt; 9.3 修改categories/index.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#在文章中添加categories&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.9.4&lt;/span&gt; 9.4 在文章中添加categories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#添加评论功能&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.10&lt;/span&gt; 10 添加评论功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;参考了一篇&lt;a href=&#34;https://github.com/limedroid/HexoLearning#42-直接方式&#34;&gt;非常好的文章&lt;/a&gt;，然后结合自己的实际问题，讲解如何使用github结合hexo建立个人的独立博客。&lt;/p&gt;
&lt;div id=&#34;hexo介绍&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.1&lt;/span&gt; 1. Hexo介绍&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hexo.io/zh-cn/&#34;&gt;Hexo&lt;/a&gt;是基于NodeJs的静态博客框架，简单、轻量，其生成的静态网页可以托管在Github和Heroku上。&lt;/p&gt;
&lt;p&gt;. 超快速度
. 支持MarkDown
. 一键部署
. 丰富的插件&lt;/p&gt;
&lt;p&gt;下面以我的博客为例，&lt;a href=&#34;https://shenxt.github.io/&#34;&gt;shenxt.github.io&lt;/a&gt;为例，讲解如何部署自己的博客。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;环境准备&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2&lt;/span&gt; 2. 环境准备&lt;/h2&gt;
&lt;div id=&#34;安装node.js&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2.1&lt;/span&gt; 2.1 安装node.js&lt;/h3&gt;
&lt;p&gt;去&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;nodejs&lt;/a&gt;官网下载对应系统的安装包，按提示安装。&lt;/p&gt;
&lt;p&gt;检验安装成功，在git shell中输入一下代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ node -v&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;安装hexo&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2.2&lt;/span&gt; 2.2 安装hexo&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ npm install hexo-cli -g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果是mac，则需要输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo npm install hexo-cli -g&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;利用hexo搭建一个博客&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.3&lt;/span&gt; 3. 利用Hexo搭建一个博客&lt;/h2&gt;
&lt;div id=&#34;创建博客目录shenxtgithub.io&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.3.1&lt;/span&gt; 3.1 &lt;a href=&#34;mailto:创建博客目录shenxt@github.io&#34; class=&#34;email&#34;&gt;创建博客目录shenxt@github.io&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ hexo init shenxt.github.io
$ cd limedroid.github.io
$ npm install&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;生成静态页面&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.3.2&lt;/span&gt; 3.2 生成静态页面&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ hexo clean
$ hexo g # g is generate&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;运行&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.3.3&lt;/span&gt; 3.3 运行&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ hexo s -p3600# is server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后可以打开浏览器，输入地址 localhost:3600 即可看到效果。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;发一篇文章试试&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4&lt;/span&gt; 4 发一篇文章试试&lt;/h2&gt;
&lt;div id=&#34;穿件一个新的博客&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4.1&lt;/span&gt; 4.1 穿件一个新的博客&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ hexo new test&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时会在source/posts目录下生成test.md文件，输入一些内容，然后保存。&lt;/p&gt;
&lt;p&gt;然后看一下效果:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo clean
$ hexo g
$ hexo s -p3600# is server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后可以打开浏览器，输入地址 localhost:3600 即可看到效果。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;配置&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.5&lt;/span&gt; 5 配置&lt;/h2&gt;
&lt;p&gt;网站的设置大部分都在_config.yml文件夹中，详细配置可以查看&lt;a href=&#34;https://hexo.io/zh-cn/docs/configuration.html&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面只列出简单常用配置:&lt;/p&gt;
&lt;p&gt;.title -&amp;gt; 网站标题
.subtitle -&amp;gt; 网站副标题
.description -&amp;gt; 网站描述
.author -&amp;gt; 您的名字
.language -&amp;gt; 网站使用的语言&lt;/p&gt;
&lt;p&gt;注意：进行配置时，需要在冒号:后加一个英文空格。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;更换主题&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.6&lt;/span&gt; 6 更换主题&lt;/h2&gt;
&lt;p&gt;在网站配置文件_config.yml中，配置theme。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme: next&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;next是主题的名字。Hexo有不同的人贡献主题，可以到其&lt;a href=&#34;https://hexo.io/themes/index.html&#34;&gt;官方网站&lt;/a&gt;上下载不同主题。看中某一主题之后，直接点击其名字，进入到其github界面，然后复制其网址，使用下面代码，即可下载主题到本地。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/fi3ework/hexo-theme-archer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后将博客的配置文件theme修改为archer即可。&lt;/p&gt;
&lt;p&gt;观察效果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo clean
$ hexo g
$ hexo s -p3600# is server&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;部署到github上&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.7&lt;/span&gt; 7 部署到github上&lt;/h2&gt;
&lt;div id=&#34;在github网页版上创建和自己账户名相同的仓库比如我的账户为shenxt因此创建的仓库为shenxt.github.io&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.7.1&lt;/span&gt; 7.1 在github网页版上创建和自己账户名相同的仓库，比如我的账户为shenxt，因此，创建的仓库为shenxt.github.io。&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&#34;安装hexo-deployer-git&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.7.2&lt;/span&gt; 7.2 安装hexo-deployer-git&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ npm install hexo-deployer-git --save&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;网站配置git&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.7.3&lt;/span&gt; 7.3 网站配置git&lt;/h3&gt;
&lt;p&gt;在网上的配置文件_config.yml中配置deploy。&lt;/p&gt;
&lt;pre class=&#34;deploy:&#34;&gt;&lt;code&gt;  type: git
  repo: https://github.com/shenxt/shenxt.github.io
  branch: master&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;部署&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.7.4&lt;/span&gt; 7.4 部署&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ hexo d# d is deploy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;贴标签方便搜索&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.8&lt;/span&gt; 贴标签，方便搜索&lt;/h2&gt;
&lt;div id=&#34;两个确认&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.8.1&lt;/span&gt; 8.1 两个确认&lt;/h3&gt;
&lt;p&gt;. 首先确认博客的配置文件中有：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tag_dir: tags&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;. 然后确认主题的配置文件有：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tags: tags&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;新建tags页面&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.8.2&lt;/span&gt; 8.2 新建tags页面&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ hexo new page tags&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时会在source/下生成tags/index.md文件。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;修改sourcetagsindex.md&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.8.3&lt;/span&gt; 8.3 修改source/tags/index.md&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;title: tags
date: 2015-10-20 06:49:50
type: &amp;quot;tags&amp;quot;
comments: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;在文章中添加tags&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.8.4&lt;/span&gt; 8.4 在文章中添加tags&lt;/h3&gt;
&lt;p&gt;在你的文章中添加：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tags:
    - Tag1
    - Tag2
    - Tag3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其文件头部类似于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: TagEditText
date: 2016-11-19 10:44:25
tags:
    - Tag1
    - Tag2
    - Tag3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;分类给文章归档&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.9&lt;/span&gt; 9 分类，给文章归档&lt;/h2&gt;
&lt;div id=&#34;两个确认-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.9.1&lt;/span&gt; 9.1 两个确认&lt;/h3&gt;
&lt;p&gt;. 确认博客配置文件打开了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;category_dir: categories&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;. 确认主题配置文件打开了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;categories: /categories&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;新建categories文件&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.9.2&lt;/span&gt; 9.2 新建categories文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hexo new page categories&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;修改categoriesindex.md&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.9.3&lt;/span&gt; 9.3 修改categories/index.md&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;title: categories
date: 2015-10-20 06:49:50
type: &amp;quot;categories&amp;quot;
comments: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;在文章中添加categories&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.9.4&lt;/span&gt; 9.4 在文章中添加categories&lt;/h3&gt;
&lt;p&gt;在文章中添加：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;categories:
    - cate&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其文件头部类似：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: TagEditText
date: 2016-11-19 10:44:25
categories:
    - cate&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;添加评论功能&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.10&lt;/span&gt; 10 添加评论功能&lt;/h2&gt;
&lt;p&gt;这里推荐使用韩国的来必力系统。参考&lt;a href=&#34;https://www.drixn.com/2017/LiveReCommentsSystem/&#34;&gt;这个博客&lt;/a&gt;进行设置。&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>使用R爬取HMDB和KEGG数据库</title>
      <link>/post/2016-12-03-keggandhmdb/</link>
      <pubDate>Fri, 25 Nov 2016 00:00:00 +0000</pubDate>
      <guid>/post/2016-12-03-keggandhmdb/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#r语言爬虫&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.1&lt;/span&gt; &lt;strong&gt;R语言爬虫&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#爬取kegg通路信息&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2&lt;/span&gt; &lt;strong&gt;爬取KEGG通路信息&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#爬取hmdb通路信息&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.3&lt;/span&gt; &lt;strong&gt;爬取HMDB通路信息&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#爬取hmdb代谢物信息&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.4&lt;/span&gt; &lt;strong&gt;爬取HMDB代谢物信息&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;r语言爬虫&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.1&lt;/span&gt; &lt;strong&gt;R语言爬虫&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;虽然相对于python来说，R语言爬虫并不是那么流行，但是对于比较小的数据爬取量，使用R还是很方便的。R的数据爬取比较流行的是利用XML和RCurl包进行爬取，在这篇博客里面，我就利用XML和RCurl包进行KEGG和HMDB的数据爬取。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;爬取kegg通路信息&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2&lt;/span&gt; &lt;strong&gt;爬取KEGG通路信息&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;因为我需要的信息是KEGG的通路信息，比较简单，也就是每个通路包含哪些代谢物，只要人的metaboloic pathway，因此，我需要先将KEGG中的通路的网页链接拿到。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(XML)
library(RCurl)
##从kegg主页上抓取代谢通路的url
URL = getURL(&amp;quot;http://www.genome.jp/kegg/pathway.html#global&amp;quot;)
doc &amp;lt;- htmlParse(URL,encoding=&amp;quot;utf-8&amp;quot;)
xpath.a &amp;lt;- &amp;quot;//a/@href&amp;quot;
node &amp;lt;- getNodeSet(doc, xpath.a)
url1 &amp;lt;- sapply(node, as.character)

xpath.b &amp;lt;- &amp;quot;//a[@href]&amp;quot;
name &amp;lt;- getNodeSet(doc, xpath.b)
name &amp;lt;- sapply(name, xmlValue)

name2 &amp;lt;- name[59:247]
url2 &amp;lt;- url1[59:247]

url3 &amp;lt;- url2[grep(&amp;quot;show&amp;quot;, url2)]

pathwat.name &amp;lt;- NULL
metabolite.id &amp;lt;- list()
metabolite.name &amp;lt;- list()
for (i in 1:length(url3)) {
  cat(paste(i,&amp;quot;/&amp;quot;,length(url3)))
  cat(&amp;quot;\n&amp;quot;)
  URL &amp;lt;- paste(&amp;quot;http://www.genome.jp&amp;quot;, url3[i], sep = &amp;quot;&amp;quot;)
  URL = getURL(URL)
  doc&amp;lt;-htmlParse(URL,encoding=&amp;quot;utf-8&amp;quot;)
  xpath &amp;lt;- &amp;quot;//option[@value=&amp;#39;hsa&amp;#39;]&amp;quot;
  node&amp;lt;-getNodeSet(doc, xpath)
  if (length(node) ==0 ) {
    cat(&amp;quot;No human pathwat.&amp;quot;)
    next()
  }else{
    URL &amp;lt;- paste(&amp;quot;http://www.genome.jp&amp;quot;, url3[i], sep = &amp;quot;&amp;quot;)
    URL &amp;lt;- gsub(pattern = &amp;quot;map=map&amp;quot;, replacement = &amp;quot;map=hsa&amp;quot;, x = URL)
    doc&amp;lt;-htmlParse(URL,encoding=&amp;quot;utf-8&amp;quot;)
    xpath1 &amp;lt;- &amp;quot;//title&amp;quot;
    node&amp;lt;-getNodeSet(doc, xpath1)
    pathway.name[i] &amp;lt;- xmlValue(node[[1]])
    pathway.name[i] &amp;lt;- substr(pathway.name[i], start = 2, stop = nchar(pathway.name[i])-1)

    xpath2 &amp;lt;- &amp;quot;//area[@shape=&amp;#39;circle&amp;#39;]/@title&amp;quot;
    node&amp;lt;-getNodeSet(doc, xpath2)
    metabolite &amp;lt;- lapply(node, function(x) as.character(x))
    metabolite.name[[i]] &amp;lt;- substr(metabolite, start = 9, nchar(metabolite)-1)
    metabolite.id[[i]] &amp;lt;- substr(metabolite, start = 1, stop = 6)
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面对爬取到的代谢通路进行筛选。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;idx &amp;lt;- which(!is.na(pathway.name))
pathway.name1 &amp;lt;- pathway.name[idx]
metabolite.id1 &amp;lt;- metabolite.id[idx]
metabolite.name1 &amp;lt;- metabolite.name[idx]

pathway.name2 &amp;lt;- pathway.name1[-c(83,84)]
metabolite.id2 &amp;lt;- metabolite.id1[-c(83,84)]
metabolite.name2 &amp;lt;- metabolite.name1[-c(83,84)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将爬取到的信息保存输出。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;met.name &amp;lt;- NULL
met.id &amp;lt;- NULL
path.name &amp;lt;- NULL
for(i in 1:length(pathway.name2)) {
  met.name[i] &amp;lt;- paste(metabolite.name2[[i]], collapse = &amp;quot;;&amp;quot;)
  met.id[i] &amp;lt;- paste(metabolite.id2[[i]], collapse = &amp;quot;;&amp;quot;)
  path.name[i] &amp;lt;- gsub(pattern = &amp;quot;KEGG PATHWAY: &amp;quot;, &amp;quot;&amp;quot;, pathway.name2[i])
  path.name[i] &amp;lt;- substr(path.name[i], start = 1, stop = nchar(path.name[i])-23)
}


kegg &amp;lt;- data.frame(path.name, met.name, met.id)
write.csv(kegg, &amp;quot;kegg.csv&amp;quot;, row.names = F)

save(path.name, file = &amp;quot;path.name&amp;quot;)
save(met.name, file = &amp;quot;met.name&amp;quot;)
save(met.id, file = &amp;quot;met.id&amp;quot;)

kegg.met &amp;lt;- list()
kegg.met[[2]] &amp;lt;- sapply(path.name, list)
kegg.met[[1]] &amp;lt;- metabolite.name2
kegg.met[[3]] &amp;lt;- metabolite.id2

names(kegg.met) &amp;lt;- c(&amp;quot;gs&amp;quot;, &amp;quot;pathwaynames&amp;quot;, &amp;quot;metid&amp;quot;)

save(kegg.met, file = &amp;quot;kegg.met&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;爬取hmdb通路信息&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.3&lt;/span&gt; &lt;strong&gt;爬取HMDB通路信息&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;首先爬取HMDB的通路信息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##抓取HMDB通路信息
library(XML)
library(RCurl)

hmdb.main &amp;lt;- &amp;quot;http://www.hmdb.ca/pathways?page=&amp;quot;
hmdb.main &amp;lt;- paste(hmdb.main, c(2:46), sep = &amp;quot;&amp;quot;)
hmdb.main &amp;lt;- c(&amp;quot;http://www.hmdb.ca/pathways&amp;quot;, hmdb.main)

##从HMDB主页上抓取代谢通路的url
path.name &amp;lt;- list()
metabolite.id &amp;lt;- list()
spec &amp;lt;- list()
path.class &amp;lt;- list()
for (i in 40:length(hmdb.main)) {
  cat(paste(&amp;quot;page&amp;quot;,i))
  cat(&amp;quot;:&amp;quot;)
  URL = getURL(hmdb.main[i])
  doc&amp;lt;-htmlParse(URL,encoding=&amp;quot;utf-8&amp;quot;)
  xpath1 &amp;lt;- &amp;quot;//div[@class=&amp;#39;panel-heading&amp;#39;]&amp;quot;
  node1 &amp;lt;- getNodeSet(doc, xpath1)
  pathway.name &amp;lt;- sapply(node1, xmlValue)

  cat(paste(length(pathway.name), &amp;quot;pathways&amp;quot;))
  cat(&amp;quot;\n&amp;quot;)

  path.name[[i]] &amp;lt;- pathway.name

  xpath2 &amp;lt;- &amp;quot;//div[@class=&amp;#39;panel-body&amp;#39;]&amp;quot;
  node2 &amp;lt;- getNodeSet(doc, xpath2)

  metabolite &amp;lt;- sapply(node2, xmlValue)
  metabolite &amp;lt;- unname(sapply(metabolite, function(x) {gsub(&amp;quot;Show&amp;quot;, &amp;quot; &amp;quot;, x)}))

  idx &amp;lt;- sapply(metabolite, function(x) {gregexpr(&amp;quot;HMDB[0-9]{5}&amp;quot;, x)})

  met.id &amp;lt;- list()
  for (j in 1:length(idx)) {
    id &amp;lt;- NULL
    for (k in 1:length(idx[[j]])) {
      id[k] &amp;lt;- substr(metabolite[j], idx[[j]][k], idx[[j]][k]+8)
    }
    met.id[[j]] &amp;lt;- id
  }

  metabolite.id[[i]] &amp;lt;- met.id

  xpath.a &amp;lt;- &amp;quot;//a[@class=&amp;#39;link-out&amp;#39;]/@href&amp;quot;
  node&amp;lt;-getNodeSet(doc, xpath.a)

  url1 &amp;lt;- sapply(node, as.character)
  url1 &amp;lt;- substr(url1, start = 1, stop = 29)
  url1 &amp;lt;- url1[!duplicated(url1)]


  ###获取通路的人种和类别
  species &amp;lt;- NULL
  metabolic &amp;lt;- NULL
  for (t in 1:length(url1)) {
    cat(paste(&amp;quot;t:&amp;quot;,t));cat(&amp;quot; &amp;quot;)
    URL = getURL(url1[t])
    doc &amp;lt;- htmlParse(URL,encoding=&amp;quot;utf-8&amp;quot;)
    xpath &amp;lt;- &amp;quot;//div[@class=&amp;#39;species&amp;#39;]/text()&amp;quot;
    node &amp;lt;- getNodeSet(doc, xpath)
    species[t] &amp;lt;- xmlValue(node[[1]])

    xpath &amp;lt;- &amp;quot;//div[@id=&amp;#39;des_subject&amp;#39;]/text()&amp;quot;
    node &amp;lt;- getNodeSet(doc, xpath)
    metabolic[t] &amp;lt;- xmlValue(node[[1]])

  }

  spec[[i]] &amp;lt;- species
  path.class[[i]] &amp;lt;- metabolic

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对爬取到的代谢通路进行筛选。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;save(path.name, file = &amp;quot;path.name&amp;quot;)
save(metabolite.id, file = &amp;quot;metabolite.id&amp;quot;)
save(spec, file = &amp;quot;spec&amp;quot;)
save(path.class, file = &amp;quot;path.class&amp;quot;)


pathway.name &amp;lt;- NULL
metabolite.ID &amp;lt;- list()
species &amp;lt;- NULL
pathway.class &amp;lt;- NULL
for (i in 1:length(path.name)) {
  pathway.name &amp;lt;- c(pathway.name, path.name[[i]])
  metabolite.ID &amp;lt;- c(metabolite.ID, metabolite.id[[i]])
  species &amp;lt;- c(species, spec[[i]])
  pathway.class &amp;lt;- c(pathway.class, path.class[[i]])
}


pathway.class &amp;lt;- substr(x = pathway.class, 1, regexpr(&amp;quot;\\\n&amp;quot;, pathway.class)-1)

metabolite.name &amp;lt;- list()
for (i in 1:length(metabolite.ID)) {
  id &amp;lt;- metabolite.ID[[i]]
  idx &amp;lt;- match(id, hmdbdatabase[,1])
  name &amp;lt;- hmdbdatabase[idx,2]
  metabolite.name[[i]] &amp;lt;- name
}

a &amp;lt;- unlist(lapply(metabolite.name, function(x) {paste(x, collapse = &amp;quot;;&amp;quot;)}))
b &amp;lt;- unlist(lapply(metabolite.ID, function(x) {paste(x, collapse = &amp;quot;;&amp;quot;)}))

idx &amp;lt;- grep(&amp;quot;Metabolic&amp;quot;, pathway.class)

metabolite.name &amp;lt;- metabolite.name[idx]
metabolite.ID &amp;lt;- metabolite.ID[idx]
pathway.name &amp;lt;- pathway.name[idx]
pathway.class &amp;lt;- pathway.class[idx]
species &amp;lt;- species[idx]

hmdb.pathway &amp;lt;- data.frame(pathway.name, pathway.class,a, b)[idx,]
write.csv(hmdb.pathway, &amp;quot;hmdb.pathway.csv&amp;quot;)

a &amp;lt;- list()
for (i in 1:length(pathway.name)) {
  a[[i]] &amp;lt;- pathway.name[i]
}

pathway.name &amp;lt;- a

hmdb.met &amp;lt;- list(gs = metabolite.name, pathwaynames = pathway.name, id = metabolite.ID)
save(hmdb.met, file = &amp;quot;hmdb.met&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;爬取hmdb代谢物信息&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4&lt;/span&gt; &lt;strong&gt;爬取HMDB代谢物信息&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;首先，获得所有代谢物的页面链接。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;###抓取HMDB代谢物信息
library(XML)
library(RCurl)

hmdb.main &amp;lt;- &amp;quot;http://www.hmdb.ca/metabolites?c=hmdb_id&amp;amp;d=up&amp;amp;page=&amp;quot;
hmdb.main &amp;lt;- paste(hmdb.main, c(2:1681), sep = &amp;quot;&amp;quot;)
hmdb.main &amp;lt;- c(&amp;quot;http://www.hmdb.ca/metabolites&amp;quot;, hmdb.main)

##从HMDB主页上抓取代谢物的url
url &amp;lt;- NULL
for (i in 1:length(hmdb.main)) {
  cat(i)
  cat(&amp;quot; &amp;quot;)
  URL = getURL(hmdb.main[i])
  doc&amp;lt;-htmlParse(URL,encoding=&amp;quot;utf-8&amp;quot;)
  xpath &amp;lt;- &amp;quot;//a[@href]/@href&amp;quot;
  node&amp;lt;-getNodeSet(doc, xpath)
  url1 &amp;lt;- sapply(node, as.character)
  url1 &amp;lt;- url1[grep(&amp;quot;metabolites/HMDB&amp;quot;, url1)]
  url1 &amp;lt;- unique(url1)
  url &amp;lt;- c(url, url1)
}

url1 &amp;lt;- paste(&amp;quot;http://www.hmdb.ca/&amp;quot;,url, sep = &amp;quot;&amp;quot;)
save(url1, file = &amp;quot;url1&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面开始进行代谢物信息爬取。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(mailR)
for (i in 1:400) {
  cat(paste((i-1)*100+1,&amp;quot;-&amp;quot;,i*100,&amp;quot;/&amp;quot;, length(url1), sep = &amp;quot;&amp;quot;))
  cat(&amp;quot;\n&amp;quot;)
  URL &amp;lt;- getURL(url1[((i-1)*100+1):(i*100)])
  doc &amp;lt;- htmlParse(URL, encoding=&amp;quot;utf-8&amp;quot;)
  xpath1 &amp;lt;- &amp;quot;//tr&amp;quot;
  node1 &amp;lt;- getNodeSet(doc, xpath1)
  node1 &amp;lt;- sapply(node1, xmlValue)

  HMDB_ID[((i-1)*100+1):(i*100)] &amp;lt;-
    gsub(pattern = &amp;quot;HMDB ID&amp;quot;, replacement = &amp;quot;&amp;quot;,node1[grep(&amp;quot;HMDB ID&amp;quot;, node1)])

  Common_Name[((i-1)*100+1):(i*100)] &amp;lt;-
    gsub(&amp;quot;Common Name&amp;quot;, &amp;quot;&amp;quot;,node1[grep(&amp;quot;Common Name&amp;quot;, node1)])

  temp &amp;lt;- gsub(&amp;quot;SynonymsValueSource&amp;quot;, &amp;quot;&amp;quot;,node1[grep(&amp;quot;Synonyms&amp;quot;, node1)])
  temp &amp;lt;- gsub(&amp;quot;Generator&amp;quot;, &amp;quot;;&amp;quot;,temp)
  temp &amp;lt;- gsub(&amp;quot;ChEMBL&amp;quot;, &amp;quot;;&amp;quot;,temp)
  temp &amp;lt;- gsub(&amp;quot;ChEBI&amp;quot;, &amp;quot;;&amp;quot;,temp)
  Synonyms[((i-1)*100+1):(i*100)] &amp;lt;-
    gsub(&amp;quot;HMDB&amp;quot;, &amp;quot;;&amp;quot;,temp)

  Chemical_Formula[((i-1)*100+1):(i*100)] &amp;lt;-
    gsub(&amp;quot;Chemical Formula&amp;quot;, &amp;quot;&amp;quot;,node1[grep(&amp;quot;Chemical Formula&amp;quot;, node1)])

  Monoisotopic_Molecular_Weight[((i-1)*100+1):(i*100)] &amp;lt;-
    gsub(&amp;quot;Monoisotopic Molecular Weight&amp;quot;, &amp;quot;&amp;quot;,node1[grep(&amp;quot;Monoisotopic Molecular Weight&amp;quot;, node1)])

  IUPAC_Name[((i-1)*100+1):(i*100)] &amp;lt;-
    gsub(&amp;quot;IUPAC Name&amp;quot;, &amp;quot;&amp;quot;,node1[grep(&amp;quot;IUPAC Name&amp;quot;, node1)])

  Traditional_Name[((i-1)*100+1):(i*100)] &amp;lt;-
    gsub(&amp;quot;Traditional Name&amp;quot;, &amp;quot;&amp;quot;,node1[grep(&amp;quot;Traditional Name&amp;quot;, node1)])

  CAS_Registry_Number[((i-1)*100+1):(i*100)] &amp;lt;-
    gsub(&amp;quot;CAS Registry Number&amp;quot;, &amp;quot;&amp;quot;,node1[grep(&amp;quot;CAS Registry Number&amp;quot;, node1)])

  Origin[((i-1)*100+1):(i*100)] &amp;lt;-
    gsub(&amp;quot;Origin&amp;quot;, &amp;quot;&amp;quot;,node1[grep(&amp;quot;Origin&amp;quot;, node1)])

  path &amp;lt;- gsub(&amp;quot;PathwaysNameSMPDB LinkKEGG Link&amp;quot;, &amp;quot;&amp;quot;,node1[grep(&amp;quot;Pathways&amp;quot;, node1)])
  Pathways[((i-1)*100+1):(i*100)] &amp;lt;-
    substr(path, 1, stop = regexpr(&amp;quot;SMP&amp;quot;, path)-1)

  ##每100次保存一次
  if (i*100 %in% seq(100, 60000, by = 100)) {
    cat(&amp;quot;save data...\n&amp;quot;)
    save(HMDB_ID,
         Common_Name,
         Synonyms,
         Chemical_Formula,
         Monoisotopic_Molecular_Weight,
         IUPAC_Name,
         Traditional_Name,
         CAS_Registry_Number,
         Origin,
         Pathways,
         file = paste(&amp;quot;hmdb.data&amp;quot;,i*100))

    send.mail(from = &amp;quot;yourmail1@163.com&amp;quot;,
              to = c(&amp;quot;youmail20@163.com&amp;quot;),
              subject = paste(&amp;quot;WZZ GO ON:&amp;quot;, i),
              body = paste(&amp;quot;WZZ still go on&amp;quot;, i),
              smtp = list(host.name = &amp;quot;smtp.163.com&amp;quot;, port = 465, user.name = &amp;quot;yourmail1&amp;quot;, passwd = &amp;quot;passward&amp;quot;, ssl = TRUE),
              authenticate = TRUE,
              send = TRUE)
  }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为代谢物信息比较大，可能需要一晚上，因此想到了没爬取100个，就给自己发一封邮件，来对程序进行监控。&lt;/p&gt;
&lt;p&gt;写的比较粗糙，有时间再好好修改一下。&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>我的第一篇博客</title>
      <link>/post/2016-11-25-first-blog/</link>
      <pubDate>Fri, 25 Nov 2016 00:00:00 +0000</pubDate>
      <guid>/post/2016-11-25-first-blog/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#我的博客&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;1&lt;/span&gt; 我的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&#34;我的博客&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;span class=&#34;header-section-number&#34;&gt;1&lt;/span&gt; 我的博客&lt;/h1&gt;
&lt;p&gt;我的博客使用markdown编写，使用的编辑器是ATOM，使用起来还是非常方便的。以后有时间，就用博客来记录我的学习，生活和工作。&lt;/p&gt;
&lt;p&gt;申祖涛于上海&lt;/p&gt;
&lt;p&gt;2016年11月25日晚8点十分&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>使用Github Pages建独立博客</title>
      <link>/post/2012-02-22-github-pages/</link>
      <pubDate>Wed, 22 Feb 2012 00:00:00 +0000</pubDate>
      <guid>/post/2012-02-22-github-pages/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#购买绑定独立域名&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.1&lt;/span&gt; 购买、绑定独立域名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#配置和使用github&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2&lt;/span&gt; 配置和使用Github&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#检查ssh-keys的设置&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2.1&lt;/span&gt; 1、检查SSH keys的设置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#备份和移除原来的ssh-key设置&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2.2&lt;/span&gt; 2、备份和移除原来的ssh key设置：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#生成新的ssh-key&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2.3&lt;/span&gt; 3、生成新的SSH Key：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#添加ssh-key到github&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2.4&lt;/span&gt; 4、添加SSH Key到GitHub：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#测试一下&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2.5&lt;/span&gt; 5、测试一下&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#设置你的账号信息&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2.6&lt;/span&gt; 6、设置你的账号信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#成功了&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.2.7&lt;/span&gt; 成功了&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用github-pages建立博客&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.3&lt;/span&gt; 使用GitHub Pages建立博客&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#user-organization-pages&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.3.1&lt;/span&gt; User &amp;amp; Organization Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#绑定域名&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.3.2&lt;/span&gt; 绑定域名&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jekyll模板系统&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.4&lt;/span&gt; Jekyll模板系统&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#jekyll基本结构&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.4.1&lt;/span&gt; Jekyll基本结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#jekyll的配置&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.4.2&lt;/span&gt; Jekyll的配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#yaml-front-matter和模板变量&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.4.3&lt;/span&gt; YAML Front Matter和模板变量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使用disqus管理评论&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.5&lt;/span&gt; 使用Disqus管理评论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#代码高亮插件&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.6&lt;/span&gt; 代码高亮插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#搭建本地jekyll环境&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.7&lt;/span&gt; 搭建本地jekyll环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#结语&#34;&gt;&lt;span class=&#34;toc-section-number&#34;&gt;0.8&lt;/span&gt; 结语&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com&#34; title=&#34;Github&#34;&gt;Github&lt;/a&gt;很好的将代码和社区联系在了一起，于是发生了很多有趣的事情，世界也因为他美好了一点点。Github作为现在最流行的代码仓库，已经得到很多大公司和项目的青睐，比如&lt;a href=&#34;https://github.com/jquery/jquery&#34; title=&#34;jQuery@github&#34;&gt;jQuery&lt;/a&gt;、&lt;a href=&#34;https://github.com/twitter/bootstrap&#34; title=&#34;Twitter@github&#34;&gt;Twitter&lt;/a&gt;等。为使项目更方便的被人理解，介绍页面少不了，甚至会需要完整的文档站，Github替你想到了这一点，他提供了&lt;a href=&#34;http://pages.github.com/&#34; title=&#34;Github Pages&#34;&gt;Github Pages&lt;/a&gt;的服务，不仅可以方便的为项目建立介绍站点，也可以用来建立个人博客。&lt;/p&gt;
&lt;p&gt;Github Pages有以下几个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
轻量级的博客系统，没有麻烦的配置
&lt;/li&gt;
&lt;li&gt;
使用标记语言，比如&lt;a href=&#34;http://markdown.tw&#34;&gt;Markdown&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
无需自己搭建服务器
&lt;/li&gt;
&lt;li&gt;
根据Github的限制，对应的每个站有300MB空间
&lt;/li&gt;
&lt;li&gt;
可以绑定自己的域名
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然他也有缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;a href=&#34;https://github.com/mojombo/jekyll&#34; title=&#34;Jekyll&#34;&gt;Jekyll&lt;/a&gt;模板系统，相当于静态页发布，适合博客，文档介绍等。&lt;/li&gt;
&lt;li&gt;动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。&lt;/li&gt;
&lt;li&gt;基于Git，很多东西需要动手，不像Wordpress有强大的后台&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大致介绍到此，作为个人博客来说，简洁清爽的表达自己的工作、心得，就已达目标，所以Github Pages是我认为此需求最完美的解决方案了。&lt;/p&gt;
&lt;div id=&#34;购买绑定独立域名&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.1&lt;/span&gt; 购买、绑定独立域名&lt;/h2&gt;
&lt;p&gt;虽说&lt;a href=&#34;http://www.godaddy.com/&#34; title=&#34;Godaddy&#34;&gt;Godaddy&lt;/a&gt;曾支持过SOPA，并且首页放着极其不专业的大胸美女，但是作为域名服务商他做的还不赖，选择它最重要的原因是他支持支付宝，没有信用卡有时真的很难过。&lt;/p&gt;
&lt;p&gt;域名的购买不用多讲，注册、选域名、支付，有网购经验的都毫无压力，优惠码也遍地皆是。域名的配置需要提醒一下，因为伟大英明的GFW的存在，我们必须多做些事情。&lt;/p&gt;
&lt;p&gt;流传Godaddy的域名解析服务器被墙掉，导致域名无法访问，后来这个事情在&lt;a href=&#34;http://beiyuu.com&#34; title=&#34;BeiYuu&#34;&gt;BeiYuu&lt;/a&gt;也发生了，不得已需要把域名解析服务迁移到国内比较稳定的服务商处，这个迁移对于域名来说没有什么风险，最终的控制权还是在Godaddy那里，你随时都可以改回去。&lt;/p&gt;
&lt;p&gt;我们选择&lt;a href=&#34;https://www.dnspod.cn/&#34; title=&#34;DNSPod&#34;&gt;DNSPod&lt;/a&gt;的服务，他们的产品做得不错，易用、免费，收费版有更高端的功能，暂不需要。注册登录之后，按照DNSPod的说法，只需三步（我们插入一步）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
首先添加域名记录，可参考DNSPod的帮助文档：&lt;a href=&#34;https://www.dnspod.cn/Support&#34;&gt;https://www.dnspod.cn/Support&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
在DNSPod自己的域名下添加一条&lt;a href=&#34;http://baike.baidu.com/view/65575.htm&#34;&gt;A记录&lt;/a&gt;，地址就是Github Pages的服务IP地址：207.97.227.245
&lt;/li&gt;
&lt;li&gt;
在域名注册商处修改DNS服务:去Godaddy修改Nameservers为这两个地址：f1g1ns1.dnspod.net、f1g1ns2.dnspod.net。如果你不明白在哪里修改，可以参考这里：&lt;a href=&#34;https://www.dnspod.cn/support/index/fid/119&#34;&gt;Godaddy注册的域名如何使用DNSPod&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
等待域名解析生效
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;域名的配置部分完成，跪谢方校长。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;配置和使用github&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2&lt;/span&gt; 配置和使用Github&lt;/h2&gt;
&lt;p&gt;Git是版本管理的未来，他的优点我不再赘述，相关资料很多。推荐这本&lt;a href=&#34;http://progit.org/book/zh/&#34; title=&#34;Pro Git中文版&#34;&gt;Git中文教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;要使用Git，需要安装它的客户端，推荐在Linux下使用Git，会比较方便。Windows版的下载地址在这里：&lt;a href=&#34;http://code.google.com/p/msysgit/downloads/list&#34; title=&#34;Windows版Git客户端&#34;&gt;http://code.google.com/p/msysgit/downloads/list&lt;/a&gt;。其他系统的安装也可以参考官方的&lt;a href=&#34;http://help.github.com/mac-set-up-git/&#34; title=&#34;Mac下Git安装&#34;&gt;安装教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下载安装客户端之后，各个系统的配置就类似了，我们使用windows作为例子，Linux和Mac与此类似。&lt;/p&gt;
&lt;p&gt;在Windows下，打开Git Bash，其他系统下面则打开终端（Terminal）：
&lt;img src=&#34;/images/githubpages/bootcamp_1_win_gitbash.jpg&#34; alt=&#34;Git Bash&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;检查ssh-keys的设置&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2.1&lt;/span&gt; 1、检查SSH keys的设置&lt;/h3&gt;
&lt;p&gt;首先我们需要检查你电脑上现有的ssh key：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd ~/.ssh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果显示“No such file or directory”，跳到第三步，否则继续。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;备份和移除原来的ssh-key设置&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2.2&lt;/span&gt; 2、备份和移除原来的ssh key设置：&lt;/h3&gt;
&lt;p&gt;因为已经存在key文件，所以需要备份旧的数据并删除：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ls
config  id_rsa  id_rsa.pub  known_hosts
$ mkdir key_backup
$ cp id_rsa* key_backup
$ rm id_rsa*&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;生成新的ssh-key&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2.3&lt;/span&gt; 3、生成新的SSH Key：&lt;/h3&gt;
&lt;p&gt;输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa -C &amp;quot;邮件地址@youremail.com&amp;quot;
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&amp;lt;回车就好&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后系统会要你输入加密串（&lt;a href=&#34;http://help.github.com/ssh-key-passphrases/&#34;&gt;Passphrase&lt;/a&gt;）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Enter passphrase (empty for no passphrase):&amp;lt;输入加密串&amp;gt;
Enter same passphrase again:&amp;lt;再次输入加密串&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后看到这样的界面，就成功设置ssh key了：
&lt;img src=&#34;/images/githubpages/ssh-key-set.png&#34; alt=&#34;ssh key success&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;添加ssh-key到github&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2.4&lt;/span&gt; 4、添加SSH Key到GitHub：&lt;/h3&gt;
&lt;p&gt;在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。&lt;/p&gt;
&lt;p&gt;用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。&lt;/p&gt;
&lt;p&gt;在GitHub的主页上点击设置按钮：
&lt;img src=&#34;/images/githubpages/github-account-setting.png&#34; alt=&#34;github account setting&#34; /&gt;&lt;/p&gt;
&lt;p&gt;选择SSH Keys项，把复制的内容粘贴进去，然后点击Add Key按钮即可：
&lt;img src=&#34;/images/githubpages/bootcamp_1_ssh.jpg&#34; alt=&#34;set ssh keys&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PS：如果需要配置多个GitHub账号，可以参看这个&lt;a href=&#34;http://omiga.org/blog/archives/2269&#34;&gt;多个github帐号的SSH key切换&lt;/a&gt;，不过需要提醒一下的是，如果你只是通过这篇文章中所述配置了Host，那么你多个账号下面的提交用户会是一个人，所以需要通过命令&lt;code&gt;git config --global --unset user.email&lt;/code&gt;删除用户账户设置，在每一个repo下面使用&lt;code&gt;git config --local user.email &#39;你的github邮箱@mail.com&#39;&lt;/code&gt; 命令单独设置用户账户信息&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;测试一下&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2.5&lt;/span&gt; 5、测试一下&lt;/h3&gt;
&lt;p&gt;可以输入下面的命令，看看设置是否成功，&lt;code&gt;git@github.com&lt;/code&gt;的部分不要修改：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh -T git@github.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果是下面的反应：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The authenticity of host &amp;#39;github.com (207.97.227.239)&amp;#39; can&amp;#39;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不要紧张，输入&lt;code&gt;yes&lt;/code&gt;就好，然后会看到：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hi &amp;lt;em&amp;gt;username&amp;lt;/em&amp;gt;! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;设置你的账号信息&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2.6&lt;/span&gt; 6、设置你的账号信息&lt;/h3&gt;
&lt;p&gt;现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。&lt;/p&gt;
&lt;p&gt;Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;你的名字&amp;quot;
$ git config --global user.email &amp;quot;your_email@youremail.com&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;设置github的token&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2.6.1&lt;/span&gt; 设置GitHub的token&lt;/h4&gt;
&lt;p&gt;2012-4-28补充：新版的接口已经不需要配置token了，所以下面这段可以跳过了&lt;/p&gt;
&lt;p&gt;有些工具没有通过SSH来链接GitHub。如果要使用这类工具，你需要找到然后设置你的API Token。&lt;/p&gt;
&lt;p&gt;在GitHub上，你可以点击&lt;em&gt;Account Setting &amp;gt; Account Admin&lt;/em&gt;：
&lt;img src=&#34;/images/githubpages/bootcamp_1_token.jpg&#34; alt=&#34;set ssh keys&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后在你的命令行中，输入下面的命令，把token添加进去：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git config --global user.name &amp;quot;你的名字&amp;quot;
$ git config --global user.token 0123456789your123456789token&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你改了GitHub的密码，需要重新设置token。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;成功了&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.2.7&lt;/span&gt; 成功了&lt;/h3&gt;
&lt;p&gt;好了，你已经可以成功连接GitHub了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;使用github-pages建立博客&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.3&lt;/span&gt; 使用GitHub Pages建立博客&lt;/h2&gt;
&lt;p&gt;与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，一种是你的GitHub用户名建立的&lt;code&gt;username.github.io&lt;/code&gt;这样的用户&amp;amp;组织页（站），另一种是依附项目的pages。&lt;/p&gt;
&lt;div id=&#34;user-organization-pages&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.3.1&lt;/span&gt; User &amp;amp; Organization Pages&lt;/h3&gt;
&lt;p&gt;想建立个人博客是用的第一种，形如&lt;code&gt;beiyuu.github.io&lt;/code&gt;这样的可访问的站，每个用户名下面只能建立一个，创建之后点击&lt;code&gt;Admin&lt;/code&gt;进入项目管理，可以看到是这样的：
&lt;img src=&#34;/images/githubpages/user-pages.png&#34; alt=&#34;user pages&#34; /&gt;
而普通的项目是这样的，即使你也是用的&lt;code&gt;othername.github.io&lt;/code&gt;：
&lt;img src=&#34;/images/githubpages/other-pages.png&#34; alt=&#34;other pages&#34; /&gt;&lt;/p&gt;
&lt;p&gt;创建好&lt;code&gt;username.github.io&lt;/code&gt;项目之后，提交一个&lt;code&gt;index.html&lt;/code&gt;文件，然后&lt;code&gt;push&lt;/code&gt;到GitHub的&lt;code&gt;master&lt;/code&gt;分支（也就是普通意义上的主干）。第一次页面生效需要一些时间，大概10分钟左右。&lt;/p&gt;
&lt;p&gt;生效之后，访问&lt;code&gt;username.github.io&lt;/code&gt;就可以看到你上传的页面了，&lt;a href=&#34;http://beiyuu.github.io&#34;&gt;beiyuu.github.io&lt;/a&gt;就是一个例子。&lt;/p&gt;
&lt;p&gt;关于第二种项目&lt;code&gt;pages&lt;/code&gt;，简单提一下，他和用户pages使用的后台程序是同一套，只不过它的目的是项目的帮助文档等跟项目绑定的内容，所以需要在项目的&lt;code&gt;gh-pages&lt;/code&gt;分支上去提交相应的文件，GitHub会自动帮你生成项目pages。具体的使用帮助可以参考&lt;a href=&#34;http://pages.github.com/&#34; title=&#34;Github Pages&#34;&gt;Github Pages&lt;/a&gt;的官方文档：&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;绑定域名&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.3.2&lt;/span&gt; 绑定域名&lt;/h3&gt;
&lt;p&gt;我们在第一部分就提到了在DNS部分的设置，再来看在GitHub的配置，要想让&lt;code&gt;username.github.io&lt;/code&gt;能通过你自己的域名来访问，需要在项目的根目录下新建一个名为&lt;code&gt;CNAME&lt;/code&gt;的文件，文件内容形如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;beiyuu.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你也可以绑定在二级域名上：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;blog.beiyuu.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要提醒的一点是，如果你使用形如&lt;code&gt;beiyuu.com&lt;/code&gt;这样的一级域名的话，需要在DNS处设置A记录到&lt;code&gt;207.97.227.245&lt;/code&gt;（&lt;strong&gt;这个地址会有变动，&lt;a href=&#34;https://help.github.com/articles/my-custom-domain-isn-t-working&#34;&gt;这里&lt;/a&gt;查看&lt;/strong&gt;），而不是在DNS处设置为CNAME的形式，否则可能会对其他服务（比如email）造成影响。&lt;/p&gt;
&lt;p&gt;设置成功后，根据DNS的情况，最长可能需要一天才能生效，耐心等待吧。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;jekyll模板系统&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4&lt;/span&gt; Jekyll模板系统&lt;/h2&gt;
&lt;p&gt;GitHub Pages为了提供对HTML内容的支持，选择了&lt;a href=&#34;https://github.com/mojombo/jekyll&#34; title=&#34;Jekyll&#34;&gt;Jekyll&lt;/a&gt;作为模板系统，Jekyll是一个强大的静态模板系统，作为个人博客使用，基本上可以满足要求，也能保持管理的方便，你可以查看&lt;a href=&#34;https://github.com/mojombo/jekyll/blob/master/README.textile&#34;&gt;Jekyll官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你可以直接fork&lt;a href=&#34;https://github.com/beiyuu/Github-Pages-Example&#34;&gt;我的项目&lt;/a&gt;，然后改名，就有了你自己的满足Jekyll要求的文档了，当然你也可以按照下面的介绍自己创建。&lt;/p&gt;
&lt;div id=&#34;jekyll基本结构&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4.1&lt;/span&gt; Jekyll基本结构&lt;/h3&gt;
&lt;p&gt;Jekyll的核心其实就是一个文本的转换引擎，用你最喜欢的标记语言写文档，可以是Markdown、Textile或者HTML等等，再通过&lt;code&gt;layout&lt;/code&gt;将文档拼装起来，根据你设置的URL规则来展现，这些都是通过严格的配置文件来定义，最终的产出就是web页面。&lt;/p&gt;
&lt;p&gt;基本的Jekyll结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   `-- post.html
|-- _posts
|   |-- 2007-10-29-why-every-programmer-should-play-nethack.textile
|   `-- 2009-04-26-barcamp-boston-4-roundup.textile
|-- _site
`-- index.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简单介绍一下他们的作用：&lt;/p&gt;
&lt;div id=&#34;config.yml&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4.1.1&lt;/span&gt; _config.yml&lt;/h4&gt;
&lt;p&gt;配置文件，用来定义你想要的效果，设置之后就不用关心了。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;includes-可以用来存放一些小的可复用的模块方便通过-include-file.ext-去掉前两个中或者与中的空格下同灵活的调用这条命令会调用_includesfile.ext文件&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4.1.2&lt;/span&gt; _includes
可以用来存放一些小的可复用的模块，方便通过&lt;code&gt;{ % include file.ext %}&lt;/code&gt;（去掉前两个{中或者{与%中的空格，下同）灵活的调用。这条命令会调用_includes/file.ext文件。&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&#34;layouts-这是模板文件存放的位置模板需要通过yaml-front-matter9来定义后面会讲到-content-标记用来将数据插入到这些模板中来&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4.1.3&lt;/span&gt; _layouts
这是模板文件存放的位置。模板需要通过&lt;a href=&#34;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&#34;&gt;YAML front matter&lt;/a&gt;来定义，后面会讲到，&lt;code&gt;{ { content }}&lt;/code&gt;标记用来将数据插入到这些模板中来。&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&#34;posts-你的动态内容一般来说就是你的博客正文存放的文件夹他的命名有严格的规定必须是2012-02-22-artical-title.markup这样的形式markup是你所使用标记语言的文件后缀名根据_config.yml中设定的链接规则可以根据你的文件名灵活调整文章的日期和标记语言后缀与文章的标题的独立的&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4.1.4&lt;/span&gt; _posts
你的动态内容，一般来说就是你的博客正文存放的文件夹。他的命名有严格的规定，必须是&lt;code&gt;2012-02-22-artical-title.MARKUP&lt;/code&gt;这样的形式，MARKUP是你所使用标记语言的文件后缀名，根据_config.yml中设定的链接规则，可以根据你的文件名灵活调整，文章的日期和标记语言后缀与文章的标题的独立的。&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&#34;site-这个是jekyll生成的最终的文档不用去关心最好把他放在你的.gitignore文件中忽略它&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4.1.5&lt;/span&gt; _site
这个是Jekyll生成的最终的文档，不用去关心。最好把他放在你的&lt;code&gt;.gitignore&lt;/code&gt;文件中忽略它。&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&#34;其他文件夹&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4.1.6&lt;/span&gt; 其他文件夹&lt;/h4&gt;
&lt;p&gt;你可以创建任何的文件夹，在根目录下面也可以创建任何文件，假设你创建了&lt;code&gt;project&lt;/code&gt;文件夹，下面有一个&lt;code&gt;github-pages.md&lt;/code&gt;的文件，那么你就可以通过&lt;code&gt;yoursite.com/project/github-pages&lt;/code&gt;访问的到，如果你是使用一级域名的话。文件后缀可以是&lt;code&gt;.html&lt;/code&gt;或者&lt;code&gt;markdown&lt;/code&gt;或者&lt;code&gt;textile&lt;/code&gt;。这里还有很多的例子：&lt;a href=&#34;https://github.com/mojombo/jekyll/wiki/Sites&#34;&gt;https://github.com/mojombo/jekyll/wiki/Sites&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;jekyll的配置&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4.2&lt;/span&gt; Jekyll的配置&lt;/h3&gt;
&lt;p&gt;Jekyll的配置写在_config.yml文件中，可配置项有很多，我们不去一一追究了，很多配置虽有用但是一般不需要去关心，&lt;a href=&#34;https://github.com/mojombo/jekyll/wiki/configuration&#34;&gt;官方配置文档&lt;/a&gt;有很详细的说明，确实需要了可以去这里查，我们主要说两个比较重要的东西，一个是&lt;code&gt;Permalink&lt;/code&gt;，还有就是自定义项。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Permalink&lt;/code&gt;项用来定义你最终的文章链接是什么形式，他有下面几个变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;year&lt;/code&gt; 文件名中的年份&lt;/li&gt;
&lt;li&gt;&lt;code&gt;month&lt;/code&gt; 文件名中的月份&lt;/li&gt;
&lt;li&gt;&lt;code&gt;day&lt;/code&gt; 文件名中的日期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt; 文件名中的文章标题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;categories&lt;/code&gt; 文章的分类，如果文章没有分类，会忽略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i-month&lt;/code&gt; 文件名中的除去前缀0的月份&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i-day&lt;/code&gt; 文件名中的除去前缀0的日期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看看最终的配置效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;permalink: pretty&lt;/code&gt; /2009/04/29/slap-chop/index.html&lt;/li&gt;
&lt;li&gt;&lt;code&gt;permalink: /:month-:day-:year/:title.html&lt;/code&gt; /04-29-2009/slap-chop.html&lt;/li&gt;
&lt;li&gt;&lt;code&gt;permalink: /blog/:year/:month/:day/:title&lt;/code&gt; /blog/2009/04/29/slap-chop/index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我使用的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;permalink: /:title&lt;/code&gt; /github-pages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自定义项的内容，例如我们定义了&lt;code&gt;title:BeiYuu的博客&lt;/code&gt;这样一项，那么你就可以在文章中使用&lt;code&gt;{ { site.title }}&lt;/code&gt;来引用这个变量了，非常方便定义些全局变量。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;yaml-front-matter和模板变量&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.4.3&lt;/span&gt; YAML Front Matter和模板变量&lt;/h3&gt;
&lt;p&gt;对于使用YAML定义格式的文章，Jekyll会特别对待，他的格式要求比较严格，必须是这样的形式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
layout: post
title: Blogging Like a Hacker
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;前后的&lt;code&gt;---&lt;/code&gt;不能省略，在这之间，你可以定一些你需要的变量，layout就是调用&lt;code&gt;_layouts&lt;/code&gt;下面的某一个模板，他还有一些其他的变量可以使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;permalink&lt;/code&gt; 你可以对某一篇文章使用通用设置之外的永久链接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;published&lt;/code&gt; 可以单独设置某一篇文章是否需要发布&lt;/li&gt;
&lt;li&gt;&lt;code&gt;category&lt;/code&gt; 设置文章的分类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tags&lt;/code&gt; 设置文章的tag&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的&lt;code&gt;title&lt;/code&gt;就是自定义的内容，你也可以设置其他的内容，在文章中可以通过&lt;code&gt;{ { page.title }}&lt;/code&gt;这样的形式调用。&lt;/p&gt;
&lt;p&gt;模板变量，我们之前也涉及了不少了，还有其他需要的变量，可以参考官方的文档：&lt;a href=&#34;https://github.com/mojombo/jekyll/wiki/template-data&#34; title=&#34;Jekyll Template Data&#34;&gt;https://github.com/mojombo/jekyll/wiki/template-data&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;使用disqus管理评论&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.5&lt;/span&gt; 使用Disqus管理评论&lt;/h2&gt;
&lt;p&gt;模板部分到此就算是配置完毕了，但是Jekyll只是个静态页面的发布系统，想做到关爽场倒是很容易，如果想要评论呢？也很简单。&lt;/p&gt;
&lt;p&gt;现在专做评论模块的产品有很多，比如&lt;a href=&#34;http://disqus.com/&#34;&gt;Disqus&lt;/a&gt;，还有国产的&lt;a href=&#34;http://duoshuo.com/&#34;&gt;多说&lt;/a&gt;，Disqus对现在各种系统的支持都比较全面，到写博客为止，多说现在仅是WordPress的一个插件，所以我这里暂时也使用不了，多说与国内的社交网络紧密结合，还是有很多亮点的，值得期待一下。我先选择了Disqus。&lt;/p&gt;
&lt;p&gt;注册账号什么的就不提了，Disqus支持很多的博客平台，参见下图：
&lt;img src=&#34;/images/githubpages/disqus-site.jpg&#34; alt=&#34;Disqus sites&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们选择最下面的&lt;code&gt;Universal Code&lt;/code&gt;就好，然后会看到一个介绍页面，把下面这段代码复制到你的模板里面，可以只复制到显示文章的模板中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;disqus_thread&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = &amp;#39;example&amp;#39;; // required: replace example with your forum shortname 这个地方需要改成你配置的网站名

    /* * * DON&amp;#39;T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement(&amp;#39;script&amp;#39;); dsq.type = &amp;#39;text/javascript&amp;#39;; dsq.async = true;
        dsq.src = &amp;#39;http://&amp;#39; + disqus_shortname + &amp;#39;.disqus.com/embed.js&amp;#39;;
        (document.getElementsByTagName(&amp;#39;head&amp;#39;)[0] || document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]).appendChild(dsq);
    })();
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&amp;quot;http://disqus.com/?ref_noscript&amp;quot;&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
&amp;lt;a href=&amp;quot;http://disqus.com&amp;quot; class=&amp;quot;dsq-brlink&amp;quot;&amp;gt;blog comments powered by &amp;lt;span class=&amp;quot;logo-disqus&amp;quot;&amp;gt;Disqus&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置完之后，你也可以做一些异步加载的处理，提高性能，比如我就在最开始页面打开的时候不显示评论，当你想看评论的时候，点击“显示评论”再加载Disqus的模块。代码很简单，你可以参考我的写法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$(&amp;#39;#disqus_container .comment&amp;#39;).on(&amp;#39;click&amp;#39;,function(){
        $(this).html(&amp;#39;加载中...&amp;#39;);
        var disqus_shortname = &amp;#39;beiyuu&amp;#39;;
        var that = this;
        BYB.includeScript(&amp;#39;http://&amp;#39; + disqus_shortname + &amp;#39;.disqus.com/embed.js&amp;#39;,function(){$(that).remove()}); //这是一个加载js的函数
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你不喜欢Disqus的样式，你也可以根据他生成的HTML结构，自己改写样式覆盖它的，Disqus现在也提供每个页面的评论数接口，&lt;a href=&#34;http://docs.disqus.com/developers/universal/&#34;&gt;帮助文档&lt;/a&gt;在这里可以看到。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;代码高亮插件&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.6&lt;/span&gt; 代码高亮插件&lt;/h2&gt;
&lt;p&gt;如果写技术博客，代码高亮少不了，有两个可选插件&lt;a href=&#34;http://mihai.bazon.net/projects/javascript-syntax-highlighting-engine&#34;&gt;DlHightLight代码高亮组件&lt;/a&gt;和&lt;a href=&#34;http://code.google.com/p/google-code-prettify/&#34;&gt;Google Code Prettify&lt;/a&gt;。DLHightLight支持的语言相对较少一些，有js、css、xml和html，Google的高亮插件基本上任何语言都支持，也可以自定义语言，也支持自动识别，也有行号的特别支持。&lt;/p&gt;
&lt;p&gt;Google的高亮插件使用也比较方便，只需要在&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;的标签上加入&lt;code&gt;prettyprint&lt;/code&gt;即可。所以我选择了Google Code Prettify。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;搭建本地jekyll环境&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.7&lt;/span&gt; 搭建本地jekyll环境&lt;/h2&gt;
&lt;p&gt;这里主要介绍一下在Mac OS X下面的安装过程，其他操作系统可以参考官方的&lt;a href=&#34;https://github.com/mojombo/jekyll/wiki/Install&#34;&gt;jekyll安装&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;作为生活在水深火热的墙内人民，有必要进行下面一步修改gem的源，方便我们更快的下载所需组建：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo gem sources --remove http://rubygems.org/
sudo gem sources -a http://ruby.taobao.org/&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后用Gem安装jekyll&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem install jekyll&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不过一般如果有出错提示，你可能需要这样安装：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install jekyll&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我到了这一步的时候总是提示错误&lt;code&gt;Failed to build gem native extension&lt;/code&gt;，很可能的一个原因是没有安装rvm，&lt;a href=&#34;https://rvm.io/rvm/install/&#34;&gt;rvm的安装&lt;/a&gt;可以参考这里，或者敲入下面的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -L https://get.rvm.io | bash -s stable --ruby&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后还需要安装Markdown的解释器，这个需要在你的_config.yml里面设置&lt;code&gt;markdown:rdiscount&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem install jekyll rdiscount&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;好了，如果一切顺利的话，本地环境就基本搭建完成了，进入之前我们建立的博客目录，运行下面的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jekyll serve --watch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个时候，你就可以通过&lt;code&gt;localhost:4000&lt;/code&gt;来访问了。还有关于&lt;a href=&#34;http://jekyllbootstrap.com/&#34;&gt;jekyll bootstrap&lt;/a&gt;的资料，需要自己修改调试的，可以研究一下。&lt;/p&gt;
&lt;p&gt;我在这个过程中还遇到两个诡异的没有解决的问题，一个是我放在根目录下面的blog.md等文件，在GitHub的pages服务上一切正常，可以通过&lt;code&gt;beiyuu.com/blog&lt;/code&gt;访问的到，但是在本地环境下，总是&lt;code&gt;not found&lt;/code&gt;，很是让人郁闷，看生成的&lt;code&gt;_site&lt;/code&gt;目录下面的文件，也是正常的&lt;code&gt;blog.html&lt;/code&gt;，但就是找不到，只有当我把URL改为&lt;code&gt;localhost:4000/blog.html&lt;/code&gt;的时候，才能访问的到，环境不同真糟糕。&lt;/p&gt;
&lt;p&gt;还有一个是关于&lt;code&gt;category&lt;/code&gt;的问题，根据&lt;code&gt;YAML&lt;/code&gt;的语法，我们在文章头部可以定义文章所属的类别，也可以定义为&lt;code&gt;category:[blog,rss]&lt;/code&gt;这样子的多类别，我在本地试一切正常，但是push到GitHub之后，就无法读取了，真让人着急，没有办法，只能采用别的办法满足我的需求了。这里还有一篇&lt;a href=&#34;http://chxt6896.github.com/blog/2012/02/13/blog-jekyll-native.html&#34;&gt;Jekyll 本地调试之若干问题&lt;/a&gt;，安装中如果有其他问题，也可以对照参考一下。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;结语&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;span class=&#34;header-section-number&#34;&gt;0.8&lt;/span&gt; 结语&lt;/h2&gt;
&lt;p&gt;如果你跟着这篇不那么详尽的教程，成功搭建了自己的博客，恭喜你！剩下的就是保持热情的去写自己的文章吧。&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
